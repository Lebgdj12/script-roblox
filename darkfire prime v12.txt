
-- [[ Script Intégré: DARKFIRE GUI V6 Structure + FlingTools (Logique Originale STRICTE) + V7 Style Update + PRIME ENHANCEMENTS V6.2.4 (UI Polish & Notif Translation) + V8 ADDITIONS + V8.3.1 FIX + V8.3.2 LAYOUT FIX + V8.3.3 GRID SPACING FIX + V8.3.4 CHEATS GRID FIX + V8.3.5 GRID LAYOUT FIX + V8.3.6 MORE PLACEHOLDERS + V9.0.0 PLACEHOLDER REMOVAL & NEW CHEATS + V10.0.0 MORE FUN & GRAPHICS CHEATS ]]
-- VERSION: Prime V10.0.0 - More Fun & Graphics Cheats
-- MODIFICATIONS (V10.0.0 - MORE FUN & GRAPHICS CHEATS):
--  - ADDED ~12 New Cheats:
--      - Fun Movement: Ragdoll Self, Float Up.
--      - Fun Visuals: Upside Down, No Face, Force Field.
--      - Fun Interaction: Teleport Behind Target.
--      - Graphics Effects: Depth of Field, Sun Rays, Blur, Neon World.
--      - Graphics Environment: Set Time (Day/Night), Colored Fog.
--  - Integrated cheats from V9 into appropriate categories.
--  - Reorganized Graphics Tab: Added "Visual Effects" and "Environment" sections.
--  - Reorganized Cheats Tab: Added new cheats to "Fun Movement" and "Fun Visuals".
--  - Reorganized FlingTools Tab: Added "Teleport Behind" to "Player Actions".
--  - Updated config save/load, reset logic, and UI text refresh for new features.
--  - Adjusted section heights and grid layouts for new additions.
--  - Added warnings for performance impacts and visual-only cheats.
--  - Updated version number and changelog.
-- MODIFICATIONS (V9.0.0 - PLACEHOLDER REMOVAL & NEW CHEATS):
--  - REMOVED IY Commands: Section, buttons, slider, functions, state vars, config entries, translations.
--  - REMOVED Placeholders: Removed buttons/functions/state marked as [P], Placeholder, Game Specific, FE Limited.
--  - REMOVED RTX Placeholders: Removed RTX section and related buttons.
--  - ADDED Fun Movement/Visual Cheats: Spin Player, Headless, Freeze Camera. [MOVED/INTEGRATED IN V10]
--  - ADDED Real Graphics Cheats: Cartoon Outline, Invert Colors, Bloom. [MOVED/INTEGRATED IN V10]
--  - Updated supporting logic and restructured affected pages.
-- ... (Previous version history truncated for brevity) ...
-- WARNING: Player Lift logic now uses implicit globals.
-- WARNING: Stop Lift / Reset logic may not fully stop Player Lift.
-- WARNING: The repeated checks in `rs` and checks for Color3 functions are workarounds for suspected executor instability.
-- WARNING: God Mode, Instant Respawn, Executor, Config Saving, Chat Spam, Stamina, Phase effectiveness are HIGHLY game-dependent. `writefile`/`readfile` needed for file config saving.
-- WARNING: Translations are basic/placeholders.
-- WARNING (V6.2.4): Using GothamBlack universally may slightly affect text rendering/size.
-- WARNING (V8.3.6): Character Scale is visual only due to FE. Walk on Air modifies Infinite Air Jump behaviour.
-- WARNING (V9.0.0): CelShading/Cartoon Outline, Invert Colors, Bloom can impact performance. Spin Player / Freeze Camera can be disorienting. Headless is visual only.
-- WARNING (V10.0.0): Neon World, Blur, Bloom, Sun Rays can impact performance. Spin Player, Upside Down, Freeze Camera can be disorienting. Headless, No Face, Force Field, Upside Down, Neon World are visual only (FE). Ragdoll, Float Up effectiveness depends on game physics. Colored Fog modifies lighting significantly.


ScreenGui = Instance.new("ScreenGui") 

TweenService = game:GetService("TweenService") 
Players = game:GetService("Players") 
RunService = game:GetService("RunService") 
UserInputService = game:GetService("UserInputService") 
LogService = game:GetService("LogService") 
HttpService = nil 
Debris = game:GetService("Debris") 
ContextActionService = game:GetService("ContextActionService") 
TextService = game:GetService("TextService") 
StarterGui = game:GetService("StarterGui") 
TeleportService = game:GetService("TeleportService") 
CoreGui = game:GetService("CoreGui") 
Lighting = game:GetService("Lighting") 
Workspace = game:GetService("Workspace") 
PhysicsService = game:GetService("PhysicsService") 
ReplicatedStorage = game:GetService("ReplicatedStorage") 

cached_Color3_fromRGB = Color3.fromRGB 
cached_Color3_new = Color3.new 

if typeof(cached_Color3_fromRGB) ~= "function" then warn("PANIC: cached_Color3_fromRGB is nil AT SCRIPT START!") end
if typeof(cached_Color3_new) ~= "function" then warn("PANIC: cached_Color3_new is nil AT SCRIPT START!") end

player = Players.LocalPlayer 
if not player then
    print("Waiting for LocalPlayer...") 
    player = Players:GetPropertyChangedSignal("LocalPlayer"):Wait() 
    print("LocalPlayer found:", player)
end
lp = player 

ScreenGui.Parent = player:WaitForChild("PlayerGui")
ScreenGui.Name = "UltraBeauGUI_Merged_Strict_StyledFling_PrimeV10.0.0_SliderFix" 
ScreenGui.ResetOnSpawn = false

tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out) 
tweenGlow = TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true) 
tweenBounce = TweenInfo.new(0.8, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out) 
currentButtonColor = nil
currentTabColor = nil
currentTextColor = nil
currentSliderBgColor = nil
currentPlaceholderColor = nil
isNeonActive = true 
currentLanguage = "EN" 

if typeof(cached_Color3_fromRGB) == "function" then
    currentButtonColor = cached_Color3_fromRGB(0, 180, 255) 
    currentTabColor = cached_Color3_fromRGB(0, 120, 220)   
    currentTextColor = cached_Color3_fromRGB(255, 255, 255) 
    currentSliderBgColor = cached_Color3_fromRGB(50, 50, 70) 
    currentPlaceholderColor = cached_Color3_fromRGB(150, 150, 150) 
else
    warn("Fallback: Using hardcoded default colors due to missing Color3.fromRGB at init.")
    currentButtonColor = Color3.new(0, 180/255, 1)
    currentTabColor = Color3.new(0, 120/255, 220/255)
    currentTextColor = Color3.new(1, 1, 1)
    currentSliderBgColor = Color3.new(50/255, 50/255, 70/255)
    currentPlaceholderColor = Color3.new(150/255, 150/255, 150/255)
end

if typeof(cached_Color3_fromRGB) == "function" then
    THEME_C3_Red = cached_Color3_fromRGB(255,50,50); THEME_C3_RedMid = cached_Color3_fromRGB(200,25,25); THEME_C3_RedEnd = cached_Color3_fromRGB(150,0,0); THEME_C3_RedBtn = cached_Color3_fromRGB(255,80,80); THEME_C3_RedNeon = cached_Color3_fromRGB(255,100,100); THEME_C3_RedText = cached_Color3_fromRGB(255,255,255); THEME_C3_RedSlider = cached_Color3_fromRGB(70,30,30); THEME_C3_RedPlaceholder = cached_Color3_fromRGB(180,180,180)
    THEME_C3_Blue = cached_Color3_fromRGB(0,200,255); THEME_C3_BlueMid = cached_Color3_fromRGB(0,120,220); THEME_C3_BlueEnd = cached_Color3_fromRGB(0,50,150); THEME_C3_BlueBtn = cached_Color3_fromRGB(0,180,255); THEME_C3_BlueNeon = cached_Color3_fromRGB(0,255,255); THEME_C3_BlueText = cached_Color3_fromRGB(255,255,255); THEME_C3_BlueSlider = cached_Color3_fromRGB(50,50,70); THEME_C3_BluePlaceholder = cached_Color3_fromRGB(150,150,150)
    THEME_C3_Green = cached_Color3_fromRGB(50,255,50); THEME_C3_GreenMid = cached_Color3_fromRGB(25,200,25); THEME_C3_GreenEnd = cached_Color3_fromRGB(0,150,0); THEME_C3_GreenBtn = cached_Color3_fromRGB(80,255,80); THEME_C3_GreenNeon = cached_Color3_fromRGB(100,255,100); THEME_C3_GreenText = cached_Color3_fromRGB(0,0,0); THEME_C3_GreenSlider = cached_Color3_fromRGB(30,70,30); THEME_C3_GreenPlaceholder = cached_Color3_fromRGB(50,50,50)
    THEME_C3_Purple = cached_Color3_fromRGB(200,50,255); THEME_C3_PurpleMid = cached_Color3_fromRGB(120,25,200); THEME_C3_PurpleEnd = cached_Color3_fromRGB(80,0,150); THEME_C3_PurpleBtn = cached_Color3_fromRGB(180,80,255); THEME_C3_PurpleNeon = cached_Color3_fromRGB(200,100,255); THEME_C3_PurpleText = cached_Color3_fromRGB(255,255,255); THEME_C3_PurpleSlider = cached_Color3_fromRGB(70,30,70); THEME_C3_PurplePlaceholder = cached_Color3_fromRGB(180,180,180)
    THEME_C3_Black = cached_Color3_fromRGB(20,20,25); THEME_C3_BlackMid = cached_Color3_fromRGB(15,15,20); THEME_C3_BlackEnd = cached_Color3_fromRGB(10,10,15); THEME_C3_BlackBtn = cached_Color3_fromRGB(50,50,60); THEME_C3_BlackNeon = cached_Color3_fromRGB(70,70,80); THEME_C3_BlackText = cached_Color3_fromRGB(200,200,200); THEME_C3_BlackSlider = cached_Color3_fromRGB(30,30,35); THEME_C3_BlackPlaceholder = cached_Color3_fromRGB(120,120,120)
    THEME_C3_PrimeStart = cached_Color3_fromRGB(255, 215, 0); THEME_C3_PrimeMid = cached_Color3_fromRGB(200, 160, 0); THEME_C3_PrimeEnd = cached_Color3_fromRGB(50, 50, 50); THEME_C3_PrimeBtn = cached_Color3_fromRGB(255, 190, 0); THEME_C3_PrimeNeon = cached_Color3_fromRGB(255, 235, 100); THEME_C3_PrimeText = cached_Color3_fromRGB(10, 10, 10); THEME_C3_PrimeSlider = cached_Color3_fromRGB(60,60,60); THEME_C3_PrimePlaceholder = cached_Color3_fromRGB(80,80,80)
    THEME_C3_CyberStart = cached_Color3_fromRGB(0, 255, 255); THEME_C3_CyberMid = cached_Color3_fromRGB(255, 0, 255); THEME_C3_CyberEnd = cached_Color3_fromRGB(50, 50, 50); THEME_C3_CyberBtn = cached_Color3_fromRGB(0, 200, 200); THEME_C3_CyberNeon = cached_Color3_fromRGB(255, 100, 255); THEME_C3_CyberText = cached_Color3_fromRGB(255,255,255); THEME_C3_CyberSlider = cached_Color3_fromRGB(30,30,50); THEME_C3_CyberPlaceholder = cached_Color3_fromRGB(150,150,200)
    THEME_C3_ToxicStart = cached_Color3_fromRGB(150, 255, 0); THEME_C3_ToxicMid = cached_Color3_fromRGB(50, 200, 50); THEME_C3_ToxicEnd = cached_Color3_fromRGB(30, 60, 30); THEME_C3_ToxicBtn = cached_Color3_fromRGB(180, 255, 50); THEME_C3_ToxicNeon = cached_Color3_fromRGB(200, 255, 100); THEME_C3_ToxicText = cached_Color3_fromRGB(10,10,10); THEME_C3_ToxicSlider = cached_Color3_fromRGB(40,70,40); THEME_C3_ToxicPlaceholder = cached_Color3_fromRGB(80,120,80)
    THEME_C3_OceanStart = cached_Color3_fromRGB(0, 100, 255); THEME_C3_OceanMid = cached_Color3_fromRGB(0, 150, 200); THEME_C3_OceanEnd = cached_Color3_fromRGB(0, 50, 100); THEME_C3_OceanBtn = cached_Color3_fromRGB(0, 130, 255); THEME_C3_OceanNeon = cached_Color3_fromRGB(100, 200, 255); THEME_C3_OceanText = cached_Color3_fromRGB(240,240,240); THEME_C3_OceanSlider = cached_Color3_fromRGB(30,60,90); THEME_C3_OceanPlaceholder = cached_Color3_fromRGB(120,160,200)
else
    warn("Cannot define global theme colors: cached_Color3_fromRGB is nil!")
    THEME_C3_Black = Color3.new(20/255,20/255,25/255); THEME_C3_BlackMid = Color3.new(15/255,15/255,20/255); THEME_C3_BlackEnd = Color3.new(10/255,10/255,15/255); THEME_C3_BlackBtn = Color3.new(50/255,50/255,60/255); THEME_C3_BlackNeon = Color3.new(70/255,70/255,80/255); THEME_C3_BlackText = Color3.new(200/255,200/255,200/255); THEME_C3_BlackSlider = Color3.new(30/255,30/355,35/255); THEME_C3_BlackPlaceholder = Color3.new(120/255,120/255,120/255)
end

plrs = Players 
ws = Workspace 
uis = UserInputService 
rs_RunService = RunService 
heartbeat = rs_RunService.Heartbeat 
renderstepped = rs_RunService.RenderStepped 
angles = CFrame.Angles 
cf = CFrame.new 
v3 = Vector3.new 
v3_010 = v3(0, 1, 0) 
v3_0 = v3(0, 0, 0) 
osclock = os.clock 
twait = task.wait 
slower = nil 
ssub = nil 
Camera = workspace.CurrentCamera 
speeding = 32 
maxspeed = 75 
off = nil 
mouse = player:GetMouse() 
camera = workspace.CurrentCamera 
ts = TweenService 

if string and typeof(string.lower) == "function" and typeof(string.sub) == "function" then
    slower = string.lower
    ssub = string.sub
else
    warn("String functions (lower/sub) unavailable at init!")
    slower = function(s) return s end
    ssub = function(s, ...) return s end
end

if typeof(CFrame.Angles) == "function" then
    off = angles(-1.5707963267948966, 0, 0) 
else
     warn("CFrame.Angles unavailable at init!")
     off = CFrame.new() 
end


currentSize = UDim2.new(0, 400, 0, 300) 
currentPosition = UDim2.new(0.5, -200, 0.5, -150) 
-- draggingSlider and sliderBeingDragged are now local to createSliderLogic
canDragMainFrame = true 
isFlying = false 
flySpeed = 50    
flyConnection = nil 
noclipConnection = nil 
isNoclip = false       
noclipParts = {} 
isMinimized = false 
guiVisible = true 
currentLayout = nil 
keyButtons = {}     
particleCount = 0   
maxParticles = 20   
resetCheatsOnDeathEnabled = false 
guiShowTextEmojis = true 

minimizedDrag_mD = false 
minimizedDrag_dOX = 0 
minimizedDrag_dOY = 0 
minimizedDrag_hM = false 

target = nil          
others = {}         
bringing = false      
bringingAll = false   
isSpectating = false  
targetPlayer = nil    
isFrozen = false      
invis_on = false      
invisChair = nil      
ShiftLockActive = nil 
aimbotEnabled = false 
aimbotActive = false  
targetPlayerName = "" 
aimbotLoop = nil      
aimbotCameraLoop = nil 
rotating = false      
rotateLoop = nil      
isToggleActive = false
spamTpLoop = nil      
teleportAllEnabled = false 
teleportAllLoop = nil 
waitTime = 0.1        
stopLiftCheckpoint_Source = nil 
carToggleActivated = false 
carDeactivateFunc = nil 
killBrickNega = true  
killBrickLoop = nil   
noclipClipon = true   
noclipSimpleLoop = nil 
espScriptEnabled = false 
espHeartbeatConnection = nil 
espPlayerAddedConnection = nil 
espCharacterAddedConnections = {} 
laserGunCreated = false 
lift_outline = nil 
lift_gravityActive = true
lift_scriptDisabled = false
lift_renderSteppedConn = nil
lift_mouseUpConn = nil
lift_loopThread = nil
lift_tween = nil 
infiniteJumpEnabled = false 
infiniteJumpConn = nil 
walkOnWaterEnabled = false 
walkOnWaterLoop = nil 
walkOnWaterPart = nil 
tpToMouseEnabled = false 
tpToMouseConn = nil 
fullBrightEnabled = false 
antiAfkEnabled = false 
antiAfkLoop = nil 
instantRespawnEnabled = false 
instantRespawnConn = nil 
removeFogEnabled = false 
removeFogV2Enabled = false 
originalFogEnd = Lighting.FogEnd 
originalFogStart = Lighting.FogStart 
originalFogColor = Lighting.FogColor 
originalAtmosphereDensity = Lighting:FindFirstChildOfClass("Atmosphere") and Lighting:FindFirstChildOfClass("Atmosphere").Density or 0.35 
originalAtmosphereColor = Lighting:FindFirstChildOfClass("Atmosphere") and Lighting:FindFirstChildOfClass("Atmosphere").Color or Color3.fromRGB(128, 128, 128) 
originalAtmosphereHaze = Lighting:FindFirstChildOfClass("Atmosphere") and Lighting:FindFirstChildOfClass("Atmosphere").Haze or 1 
crosshairEnabled = false 
crosshairGui = nil 
fpsLoop = nil 
renderSteppedFpsConn = nil 
godModeEnabled = false 
godModeLoop = nil 
fovValue = 70 
chatSpamEnabled = false 
chatSpamText = "DMX GUI ON TOP!" 
chatSpamDelay = 1 
chatSpamLoop = nil 
currentSkyboxId = "" 
orbitEnabled = false 
orbitTarget = nil 
orbitLoop = nil 
orbitRadius = 10 
orbitSpeed = 3 
attachEnabled = false 
attachTarget = nil 
attachWeld = nil 
infiniteStaminaEnabled = false 
infiniteStaminaLoop = nil 
phaseEnabled = false 
phaseLoop = nil 
annoyLoop = nil 
spiderEnabled = false 
spiderLoop = nil 
jesusFlyEnabled = false 
jesusFlyLoop = nil 
jesusFlyHeight = 5 
originalCameraMode = player.CameraMode 
originalCameraSubject = workspace.CurrentCamera.CameraSubject 
tracersEnabled = false 
tracersLoop = nil 
tracersTable = {} 
noArmsEnabled = false 
noLegsEnabled = false 
rainbowCharEnabled = false 
rainbowCharLoop = nil 
walkSpeedMultiplier = 1 
jumpPowerMultiplier = 1 
infiniteAirJumpEnabled = false 
infiniteAirJumpConn = nil 
wallWalkEnabled = false 
wallWalkLoop = nil 
teleportToolEnabled = false 
teleportToolConn = nil 
lowGravityEnabled = false 
originalGravity = workspace.Gravity 
bhopEnabled = false 
bhopLoop = nil 
chamsStyle = 1 
autoClickerEnabled = false 
autoClickerLoop = nil 
antiVoidEnabled = false 
antiVoidLoop = nil 
skyboxList = {"rbxassetid://1690210667", "rbxassetid://1690210961", "rbxassetid://1690211108", "rbxassetid://2021486712", "rbxassetid://6392096119"} 
currentSkyboxIndex = 0 
autoRespawnEnabled = false 
userIdInputText = "" 
webhookUrlText = "" 
webhookMessageText = "" 
walkOnAirEnabled = false 
platformStandEnabled = false 
characterScaleValue = 1 
spinPlayerEnabled = false 
spinPlayerLoop = nil 
headlessEnabled = false 
freezeCamEnabled = false 
originalCamType = Enum.CameraType.Fixed 
cartoonOutlineEnabled = false 
cartoonOutlineEffect = nil 
invertColorsEnabled = false 
invertColorsEffect = nil 
bloomEnabled = false 
bloomEffect = nil 
ragdollEnabled = false 
floatUpEnabled = false 
floatUpLoop = nil 
upsideDownEnabled = false 
upsideDownLoop = nil 
noFaceEnabled = false 
originalFace = nil 
forceFieldEnabled = false 
forceFieldPart = nil 
depthOfFieldEnabled = false 
dofEffect = nil 
sunRaysEnabled = false 
sunRaysEffect = nil 
blurEnabled = false 
blurEffect = nil 
neonWorldEnabled = false 
neonWorldOriginalMaterials = {} 
coloredFogEnabled = false 
coloredFogColor = Color3.fromRGB(0, 255, 0) 

uiScaleValue = 1 
shadowQuality = 3 


-- ... (autres variables globales) ...

-- Variables pour Chat Bypass
chatBypassFonts = {}             -- Table pour stocker les polices bypass
chatBypassSelectedFont = nil   -- Table de la police actuellement sélectionnée
chatBypassSelectedFontName = ""-- Nom de la police sélectionnée
chatBypassTextBox = nil        -- Référence à la TextBox de saisie
chatBypassFontButtons = {}     -- Table pour stocker les boutons de police
chatBypassSelectedButton = nil -- Référence au bouton de police sélectionné

-- ... (reste des variables globales) ...


MainFrame, TitleBar, TitleLabel, NeonBorder, Gradient = nil, nil, nil, nil, nil 
MinimizeButton, MinimizedButton, Hitbox, MinGradient = nil, nil, nil, nil 
TabBar, TabListLayout, ContentFrame = nil, nil, nil 
SelectionFrame = nil 
pageInstances = {} 
tabButtons = {} 

FlingToolsPlayerInputBox = nil 
FlingToolsPlayerInfoLabel = nil 
FlingToolsBringButton = nil     
FlingToolsNotifyLabel = nil     
FlingToolsNoclipStatusLabel = nil 
FlingToolsOtherButtons = {} 
FlingToolsDebugLabel = nil 
flingPlayerListFrame = nil 

fpsLabel = nil 
skyboxInput = nil 
consoleErrorList = nil 
userIdInput = nil 
webhookUrlInput = nil 
webhookMessageInput = nil 
charScaleValueLabel = nil 

scriptExecutorInput = nil 

ResetOnDeathButton = nil 
NeonToggleButton = nil 
ShowEmojisButton = nil 
TranslateButton = nil 

GuiService = game:GetService("GuiService") 

chatSpyLoggingEnabled = true 
chatSpyParrotEnabled = false 
chatSpyLogPanel = nil 
chatSpyLogLayout = nil 
chatSpyMessageFrames = {} 
CHATSPY_HISTORY_MAX_MESSAGES = 100 
CHATSPY_PARROT_DELAY = 0.15 


translations = { 
    gui_title = {EN = "DMX GUI Prime v10.0.0", FR = "DMX GUI Prime v10.0.0"},
    gui_minimized = {EN = "GUI", FR = "GUI"},
    tab_home = {EN = "Home", FR = "Accueil"},
    tab_cheats = {EN = "Cheats", FR = "Cheats"},
    tab_flingtools = {EN = "FlingTools", FR = "FlingOutils"},
    tab_executor = {EN = "Executor", FR = "Exécuteur"},
    tab_graphics = {EN = "Graphics", FR = "Graphismes"},
    tab_console = {EN = "Console", FR = "Console"},
    tab_keyboard = {EN = "Keyboard", FR = "Clavier"},
    tab_misc = {EN = "Misc", FR = "Divers"},
    tab_miscfeatures = {EN = "MiscFeatures", FR = "FonctDivers"},
    tab_settings = {EN = "Settings", FR = "Paramètres"},
    tab_versionhistory = {EN = "VersionHistory", FR = "Historique"},
    tab_chatspy = {EN = "Chat Spy", FR = "Chat Spy"}, 
    section_movement = {EN = "Movement", FR = "Mouvement"},
    section_advanced_movement = {EN = "Adv. Movement", FR = "Mouv. Avancé"},
    section_fun_movement = {EN = "Fun Movement", FR = "Mouv. Fun"},
    section_visual = {EN = "Visual", FR = "Visuel"},
    section_fun_visuals = {EN = "Fun Visuals", FR = "Visuels Fun"},
    section_combat_visuals = {EN = "Combat / Visuals", FR = "Combat / Visuels"},
    section_player_interaction = {EN = "Player Interaction", FR = "Interaction Joueur"},
    section_misc_actions = {EN = "Misc Actions", FR = "Actions Diverses"},
    section_gravity = {EN = "Gravity", FR = "Gravité"},
    section_target_player = {EN = "Target Player", FR = "Joueur Cible"},
    section_tp_fling = {EN = "Teleport / Fling", FR = "TP / Fling"},
    section_player_actions = {EN = "Player Actions", FR = "Actions Joueur"},
    section_server = {EN = "Server", FR = "Serveur"},
    section_utility = {EN = "Utility", FR = "Utilitaire"},
    section_other_utilities = {EN = "Other Utils", FR = "Autres Utils"},
    section_skybox = {EN = "Skybox", FR = "Skybox"},
    section_workspace_utils = {EN = "Workspace Utils", FR = "Utils Espace"},
    section_information = {EN = "Information", FR = "Information"},
    section_ui_custom = {EN = "UI Customization", FR = "Perso. IU"},
    section_visual_settings = {EN = "Visual Settings", FR = "Param Visuels"},
    section_visual_effects = {EN = "Visual Effects", FR = "Effets Visuels"},
    section_environment = {EN = "Environment", FR = "Environnement"}, 
    section_themes = {EN = "Themes", FR = "Thèmes"},
    section_appearance = {EN = "Appearance", FR = "Apparence"},
    section_config = {EN = "Configuration", FR = "Configuration"},
    section_webhook = {EN = "Webhook Sender", FR = "Envoyeur Webhook"},
    section_chat_log = {EN = "Chat Log", FR = "Log Chat"}, 

    label_speed = {EN = "Speed", FR = "Vitesse"},
    label_jump = {EN = "Jump", FR = "Saut"},
    label_fov = {EN = "FOV", FR = "CdV"},
    label_flyspeed = {EN = "Fly Speed", FR = "Vit. Vol"},
    label_gravity = {EN = "Gravity", FR = "Gravité"},
    label_spamtext = {EN = "Spam Text", FR = "Texte Spam"},
    label_spamdelay = {EN = "Spam Delay", FR = "Délai Spam"},
    label_target_placeholder = {EN = "DisplayName/Name (Optional)", FR = "Pseudo/Nom (Optionnel)"},
    label_target_info = {EN = "Target Info", FR = "Infos Cible"},
    label_target_notfound = {EN = "NO PLAYER FOUND", FR = "JOUEUR INTROUVABLE"},
    label_fps = {EN = "FPS", FR = "IPS"},
    label_skyboxid = {EN = "Skybox ID", FR = "ID Skybox"},
    label_transparency = {EN = "Transparency", FR = "Transparence"},
    label_neon = {EN = "Neon", FR = "Néon"},
    label_showemojis = {EN = "Show Emojis", FR = "Aff. Emojis"},
    label_resetondeath = {EN = "Reset on Death", FR = "Réinit. Mort"},
    label_translate = {EN = "Translate", FR = "Traduire"},
    label_uiscale = {EN = "UI Scale", FR = "Échelle IU"},
    label_shadows = {EN = "Shadows", FR = "Ombres"},
    label_speedmulti = {EN = "Speed Multi", FR = "Multi Vit."},
    label_jumpmulti = {EN = "Jump Multi", FR = "Multi Saut"},
    label_brightness = {EN = "Brightness", FR = "Luminosité"},
    label_espboxstyle = {EN = "ESP Box Style", FR = "Style Boîte ESP"},
    label_userid = {EN = "User ID", FR = "ID Utilisateur"},
    label_webhookurl = {EN = "Webhook URL", FR = "URL Webhook"},
    label_webhookmsg = {EN = "Message", FR = "Message"},
    label_espboxsize = {EN = "ESP Size", FR = "Taille ESP"},
    label_charscale = {EN = "Char Scale", FR = "Échelle Perso"},

    button_fly = {EN = "Fly", FR = "Voler"},
    button_infjump = {EN = "Inf Jump", FR = "Saut Inf"},
    button_walkwater = {EN = "WalkWater", FR = "MarcheEau"},
    button_instaspawn = {EN = "InstaSpawn", FR = "Réap.Insta"},
    button_godmode = {EN = "God Mode", FR = "Mode Dieu"},
    button_infstamina = {EN = "Inf Stamina", FR = "Endu. Inf"},
    button_phase = {EN = "Phase", FR = "Phase"},
    button_remfog = {EN = "Rem Fog", FR = "Ret. Brouil."},
    button_noclip = {EN = "Noclip", FR = "Noclip"},
    button_spam = {EN = "Spam", FR = "Spam"},
    button_resetall = {EN = "Reset All", FR = "Tout Réinit."},
    button_bring = {EN = "Bring", FR = "Amener"},
    button_bringing = {EN = "Bringing...", FR = "Amenant..."},
    button_bringall = {EN = "Bring All", FR = "Tous Amener"},
    button_teleport = {EN = "Teleport", FR = "Téléporter"},
    button_fling = {EN = "Fling", FR = "Fling"},
    button_flingall = {EN = "Fling All", FR = "Fling Tous"},
    button_spamtp = {EN = "Spam TP", FR = "Spam TP"},
    button_tpall = {EN = "TP All", FR = "TP Tous"},
    button_tpmouse = {EN = "TP Mouse", FR = "TP Souris"},
    button_orbit = {EN = "Orbit", FR = "Orbiter"},
    button_attach = {EN = "Attach", FR = "Attacher"},
    button_tripplayer = {EN = "Trip Player", FR = "Faire Tréb."},
    button_sitplayer = {EN = "Sit Player", FR = "Asseoir Joueur"},
    button_annoyplayer = {EN = "Annoy Player", FR = "Embêter Joueur"},
    button_lasergun = {EN = "Laser Gun", FR = "PistoLaser"},
    button_esp = {EN = "ESP", FR = "ESP"},
    button_track = {EN = "Track", FR = "Suivre"},
    button_aimbot = {EN = "Aimbot", FR = "Aimbot"},
    button_spectate = {EN = "Spectate", FR = "Observer"},
    button_freeze = {EN = "Freeze", FR = "Geler"},
    button_playerlift = {EN = "Player Lift", FR = "Levier Joueur"},
    button_stoplift = {EN = "Stop Lift", FR = "Arrêt Levier"},
    button_car = {EN = "Car", FR = "Voiture"},
    button_killbrick = {EN = "Kill Brick", FR = "Brique Tue"},
    button_invisible = {EN = "Invisible", FR = "Invisible"},
    button_shiftlock = {EN = "ShiftLock", FR = "ShiftLock"},
    button_rotate = {EN = "Rotate", FR = "Tourner"},
    button_rejoin = {EN = "Rejoin", FR = "Rejoindre"},
    button_serverhop = {EN = "Server Hop", FR = "Saut Serv."},
    button_getspeed = {EN = "Get Speed", FR = "Obt. Vitesse"},
    button_antiafk = {EN = "Anti AFK", FR = "Anti AFK"},
    button_crosshair = {EN = "Crosshair", FR = "Réticule"},
    button_set = {EN = "Set", FR = "Ok"},
    button_execute = {EN = "Execute", FR = "Exécuter"},
    button_paste = {EN = "Paste", FR = "Coller"},
    button_clear = {EN = "Clear", FR = "Effacer"},
    button_copyall = {EN = "Copy All", FR = "Tout Copier"},
    button_removedebris = {EN = "Remove Debris", FR = "Ret. Débris"},
    button_clearworkspace = {EN = "Clear Workspace", FR = "Vider Espace"},
    button_serverinfo = {EN = "Server Info", FR = "Infos Serveur"},
    button_fullbright = {EN = "Full Bright", FR = "Lumi Max"},
    button_saveclip = {EN = "Save Clip", FR = "Sauv PresseP"},
    button_loadclip = {EN = "Load Clip", FR = "Charg PresseP"},
    button_savefile = {EN = "Save File", FR = "Sauv Fichier"},
    button_loadfile = {EN = "Load File", FR = "Charg Fichier"},
    button_centergui = {EN = "Center GUI", FR = "Centrer GUI"},
    button_red = {EN = "Red", FR = "Rouge"},
    button_blue = {EN = "Blue", FR = "Bleu"},
    button_green = {EN = "Green", FR = "Vert"},
    button_purple = {EN = "Purple", FR = "Violet"},
    button_black = {EN = "Black", FR = "Noir"},
    button_prime = {EN = "Prime", FR = "Prime"},
    button_cyberpunk = {EN = "Cyberpunk", FR = "Cyberpunk"},
    button_toxic = {EN = "Toxic", FR = "Toxique"},
    button_ocean = {EN = "Ocean", FR = "Océan"},
    button_clearconsole = {EN = "Clear Console", FR = "Vider Console"},
    button_parrot = {EN = "Parrot", FR = "Perroquet"}, 
    button_loglocal = {EN = "Log Local", FR = "Log Local"}, 
    button_spider = {EN = "Spider", FR = "Araignée"},
    button_jesusfly = {EN = "Jesus Fly", FR = "Vol Jésus"},
    button_highjump = {EN = "High Jump", FR = "Saut Haut"},
    button_tracers = {EN = "Tracers", FR = "Traceurs"},
    button_noarms = {EN = "No Arms", FR = "Sans Bras"},
    button_nolegs = {EN = "No Legs", FR = "Sans Jambes"},
    button_rainbowchar = {EN = "Rainbow Char", FR = "Perso ArcEnCiel"},
    button_thirdperson = {EN = "Third Person", FR = "3ème Pers."},
    button_firstperson = {EN = "First Person", FR = "1ère Pers."},
    button_headsit = {EN = "Head Sit", FR = "Assis Tête"},
    button_destroygui = {EN = "Destroy GUI", FR = "Détruire GUI"},
    button_infairjump = {EN = "Inf AirJump", FR = "Saut Air Inf"},
    button_wallwalk = {EN = "Wall Walk", FR = "Marche Mur"},
    button_tptool = {EN = "TP Tool", FR = "Outil TP"},
    button_lowgravity = {EN = "Low Gravity", FR = "Gravité Faible"},
    button_bhop = {EN = "Bunny Hop", FR = "Saut Lapin"},
    button_chamsv2 = {EN = "Chams V2", FR = "Chams V2"},
    button_autoclicker = {EN = "Auto Clicker", FR = "Clic Auto"},
    button_printpositions = {EN = "Print Positions", FR = "Impr Positions"},
    button_antivoid = {EN = "Anti Void", FR = "Anti Vide"},
    button_remfogv2 = {EN = "Rem Fog V2", FR = "Ret Brouil V2"},
    button_cycleskybox = {EN = "Cycle Skybox", FR = "Cycle Skybox"},
    button_panic = {EN = "Panic", FR = "Panique"},
    button_autorespawn = {EN = "Auto Respawn", FR = "Réap Auto"},
    button_clearchat = {EN = "Clear Chat", FR = "Vider Chat"},
    button_getuserid = {EN = "Get ID", FR = "Obt ID"},
    button_copyuserid = {EN = "Copy ID", FR = "Copier ID"},
    button_sendwebhook = {EN = "Send", FR = "Envoyer"},
    button_walkonair = {EN = "Walk On Air", FR = "Marche Air"},
    button_platformstand = {EN = "PlatformStand", FR = "PlatformStand"},
    button_hopsmallest = {EN = "Hop Smallest", FR = "Saut Mini Serv"},
    button_spinplayer = {EN = "Spin Player", FR = "Tourner Joueur"},
    button_headless = {EN = "Headless", FR = "Sans Tête"},
    button_freezecam = {EN = "Freeze Cam", FR = "Geler Cam"},
    button_cartoonoutline = {EN = "Cartoon Outline", FR = "Contour Cartoon"},
    button_invertcolors = {EN = "Invert Colors", FR = "Inverser Couleurs"},
    button_bloom = {EN = "Bloom", FR = "Bloom"},
    button_ragdoll = {EN = "Ragdoll", FR = "Ragdoll"},
    button_floatup = {EN = "Float Up", FR = "Flotter Haut"},
    button_upsidedown = {EN = "Upside Down", FR = "À l'envers"},
    button_noface = {EN = "No Face", FR = "Sans Visage"},
    button_forcefield = {EN = "Force Field", FR = "Champ Force"},
    button_depthoffield = {EN = "Depth of Field", FR = "Prof. de Champ"},
    button_sunrays = {EN = "Sun Rays", FR = "Rayons Soleil"},
    button_blur = {EN = "Blur", FR = "Flou"},
    button_setday = {EN = "Set Day", FR = "Mettre Jour"},
    button_setnight = {EN = "Set Night", FR = "Mettre Nuit"},
    button_neonworld = {EN = "Neon World", FR = "Monde Néon"},
    button_coloredfog = {EN = "Colored Fog", FR = "Brouillard Coloré"},
    button_tpbehind = {EN = "TP Behind", FR = "TP Derrière"},

    state_on = {EN = " ON", FR = " ACTIF"},
    state_off = {EN = " OFF", FR = " INACTIF"},

    placeholder_skybox = {EN = "Asset ID", FR = "ID Asset"},
    placeholder_executor = {EN = "-- Enter Lua code here...\n-- Use print() for output in the Dev Console (F9)", FR = "-- Entrez le code Lua ici...\n-- Utilisez print() pour la sortie dans la Console Dev (F9)"},
    placeholder_chatspam = {EN = "Enter Text", FR = "Entrez Texte"},
    placeholder_userid = {EN = "Username/Display", FR = "Pseudo/Affichage"},
    placeholder_webhookurl = {EN = "Webhook URL", FR = "URL Webhook"},
    placeholder_webhookmsg = {EN = "Message Content", FR = "Contenu Message"},

    notif_loaded = {EN = "DMX GUI PRIME V10.0.0 Loaded! (F4 to toggle)", FR = "DMX GUI PRIME V10.0.0 Chargé ! (F4 pour basculer)"}, 
    notif_feature_state = {EN = "%s: %s", FR = "%s : %s"}, 
    notif_value_set = {EN = "Value set to: %s", FR = "Valeur définie sur : %s"},
    notif_gui_enabled = {EN = "GUI enabled", FR = "GUI activée"},
    notif_gui_disabled = {EN = "GUI disabled", FR = "GUI désactivée"},
    notif_gui_minimized = {EN = "GUI Minimized", FR = "GUI Minimisée"},
    notif_gui_maximized = {EN = "GUI Maximized", FR = "GUI Maximisée"},
    notif_gui_centered = {EN = "GUI centered", FR = "GUI centrée"},
    notif_gui_mode = {EN = "GUI mode set to: %s", FR = "Mode GUI défini sur : %s"},
    notif_layout_switched = {EN = "Layout switched to %s", FR = "Disposition changée en %s"},
    notif_theme_applied = {EN = "%s theme", FR = "Thème %s"},
    notif_key_pressed = {EN = "Key pressed: %s", FR = "Touche pressée : %s"},
    notif_key_error = {EN = "Error pressing key: %s", FR = "Erreur touche : %s"},
    notif_key_invalid = {EN = "Invalid KeyCode for: %s", FR = "KeyCode invalide pour : %s"},
    notif_no_key_method = {EN = "No key input method available!", FR = "Méthode d'entrée touche indisponible !"},
    notif_logs_copied = {EN = "Logs copied!", FR = "Logs copiés !"},
    notif_error_copied = {EN = "Error copied!", FR = "Erreur copiée !"},
    notif_logs_sent = {EN = "Logs sent! (WEBHOOK NEEDED)", FR = "Logs envoyés ! (WEBHOOK REQUIS)"},
    notif_error_sent = {EN = "Error sent! (WEBHOOK NEEDED)", FR = "Erreur envoyée ! (WEBHOOK REQUIS)"},
    notif_copy_unavailable = {EN = "Copy not available!", FR = "Copie indisponible !"},
    notif_copy_failed = {EN = "Copy/Send failed: %s", FR = "Copie/Envoi échoué : %s"},
    notif_console_cleared = {EN = "Console output cleared.", FR = "Sortie console effacée."},
    notif_console_clear_error = {EN = "Clear Console Error: List not found.", FR = "Erreur Vider Console : Liste introuvable."},
    notif_exec_attempt = {EN = "Attempting to execute script...", FR = "Tentative d'exécution du script..."},
    notif_exec_empty = {EN = "Executor Error: No script entered.", FR = "Erreur Exécuteur : Aucun script entré."},
    notif_exec_success = {EN = "Script executed (check console for output/errors).", FR = "Script exécuté (vérifiez console pour sortie/erreurs)."},
    notif_exec_runtime_error = {EN = "Script Execution Error: %s", FR = "Erreur Exécution Script : %s"},
    notif_exec_load_error = {EN = "Executor Error loading script: %s", FR = "Erreur chargement script Exécuteur : %s"},
    notif_exec_paste_success = {EN = "Clipboard pasted into executor.", FR = "Presse-papiers collé dans exécuteur."},
    notif_exec_paste_fail = {EN = "Paste failed: Clipboard empty or getclipboard unavailable.", FR = "Collage échoué : Presse-papiers vide ou getclipboard indispo."},
    notif_exec_cleared = {EN = "Executor cleared.", FR = "Exécuteur effacé."},
    notif_error_input_not_found = {EN = "%s Error: Input field not found.", FR = "Erreur %s : Champ d'entrée introuvable."}, 
    notif_skybox_apply = {EN = "Attempting to apply Skybox ID: %s", FR = "Tentative application ID Skybox : %s"},
    notif_skybox_error_invalid = {EN = "Skybox Error: Please enter a valid Asset ID.", FR = "Erreur Skybox : Veuillez entrer un ID Asset valide."},
    notif_config_saved_clipboard = {EN = "Config saved to clipboard!", FR = "Config sauv. dans presse-papiers !"},
    notif_config_save_fail_clipboard = {EN = "Save failed: setclipboard unavailable.", FR = "Sauv échouée : setclipboard indispo."},
    notif_config_save_fail_encode = {EN = "Save failed: Could not encode config.", FR = "Sauv échouée : Encodage config impossible."},
    notif_config_load_fail_clipboard = {EN = "Load failed: Clipboard empty or getclipboard unavailable.", FR = "Charg. échoué : Presse-papiers vide ou getclipboard indispo."},
    notif_config_load_fail_format = {EN = "Load failed: Invalid config format in clipboard.", FR = "Charg. échoué : Format config invalide dans presse-papiers."},
    notif_config_applying = {EN = "Loading config...", FR = "Chargement config..."},
    notif_config_apply_fail = {EN = "Load failed: Error applying config values.", FR = "Charg. échoué : Erreur application valeurs config."},
    notif_config_loaded = {EN = "Config loaded successfully!", FR = "Config chargée avec succès !"},
    notif_config_save_error_writefile = {EN = "Save Error: 'writefile' function is not available in this executor.", FR = "Erreur Sauv. : fonction 'writefile' indispo. dans cet exécuteur."},
    notif_config_save_error_encode = {EN = "Save Error: Could not encode config.", FR = "Erreur Sauv. : Encodage config impossible."},
    notif_config_save_success_file = {EN = "Config saved to DMX_GUI_Prime_Config.json", FR = "Config sauv. dans DMX_GUI_Prime_Config.json"},
    notif_config_save_fail_write = {EN = "Save Error: Failed to write file - %s", FR = "Erreur Sauv. : Échec écriture fichier - %s"},
    notif_config_load_error_readfile = {EN = "Load Error: 'readfile' function is not available in this executor.", FR = "Erreur Charg. : fonction 'readfile' indispo. dans cet exécuteur."},
    notif_config_load_error_isfile = {EN = "Load Error: Config file 'DMX_GUI_Prime_Config.json' not found.", FR = "Erreur Charg. : Fichier config 'DMX_GUI_Prime_Config.json' introuvable."},
    notif_config_load_fail_read = {EN = "Load failed: Could not read file or file is empty - %s", FR = "Charg. échoué : Lecture fichier impossible ou vide - %s"},
    notif_config_load_fail_format_file = {EN = "Load failed: Invalid config format in file.", FR = "Charg. échoué : Format config invalide dans fichier."},
    notif_states_resetting = {EN = "States resetting...", FR = "Réinitialisation états..."},
    notif_states_reset_core = {EN = "Resetting Core Cheats...", FR = "Réinit. Cheats Principaux..."},
    notif_states_persist_core = {EN = "Core Cheats Persisted...", FR = "Cheats Principaux Conservés..."},
    notif_states_reset_fling = {EN = "Resetting FlingTools Cheats...", FR = "Réinit. Cheats FlingOutils..."},
    notif_states_persist_fling = {EN = "FlingTools Cheats Persisted...", FR = "Cheats FlingOutils Conservés..."},
    notif_states_reset_complete = {EN = "States reset complete.", FR = "Réinit. états terminée."},
    notif_language_set = {EN = "Language set to: %s", FR = "Langue définie sur : %s"},
    notif_error_char_not_found = {EN = "Character not found!", FR = "Personnage introuvable !"},
    notif_error_humanoid_rootpart = {EN = "Humanoid or RootPart not found!", FR = "Humanoïde ou RootPart introuvable !"},
    notif_bring_cancelled = {EN = "Bring Cancelled", FR = "Amener Annulé"},
    notif_error_bring_notarget = {EN = "Bring Error: No target selected", FR = "Erreur Amener : Cible non sélectionnée"},
    notif_error_bring_nochar = {EN = "Bring Error: Character(s) not found", FR = "Erreur Amener : Personnage(s) introuvable"},
    notif_error_bring_noworkspace = {EN = "Bring Error: Character not in workspace", FR = "Erreur Amener : Personnage hors espace"},
    notif_error_bring_noroot = {EN = "Bring Error: RootPart not found", FR = "Erreur Amener : RootPart introuvable"},
    notif_bring_starting = {EN = "Bringing %s...", FR = "Amenant %s..."},
    notif_bring_finished = {EN = "Bring Finished", FR = "Amener Terminé"},
    notif_bring_all_active = {EN = "Bring All is already active!", FR = "Amener Tous déjà actif !"},
    notif_bring_all_start = {EN = "Attempting to bring all players...", FR = "Tentative amener tous les joueurs..."},
    notif_bring_all_fail_nochar = {EN = "Bring All failed: Local character not found.", FR = "Amener Tous échoué : Perso local introuvable."},
    notif_bring_all_finished = {EN = "Bring All finished (%s players attempted).", FR = "Amener Tous terminé (%s joueurs tentés)."},
    notif_teleport_success = {EN = "Teleported to %s", FR = "Téléporté vers %s"},
    notif_teleport_fail = {EN = "Teleport Error: Player/Character not found or invalid!", FR = "Erreur TP : Joueur/Perso introuvable ou invalide !"},
    notif_fling_attempt = {EN = "Attempting to fling %s", FR = "Tentative de fling %s"},
    notif_fling_error_whitelist = {EN = "Fling Error: This user is whitelisted! (Owner)", FR = "Erreur Fling : Cet utilisateur est whitelist ! (Proprio)"},
    notif_fling_error_notarget = {EN = "Fling Error: No target selected!", FR = "Erreur Fling : Cible non sélectionnée !"},
    notif_fling_all_start = {EN = "Attempting to fling all players...", FR = "Tentative de fling tous les joueurs..."},
    notif_fling_all_finished = {EN = "Fling All finished (%s players).", FR = "Fling Tous terminé (%s joueurs)."},
    notif_error_target_sitting = {EN = "Fling Error: Target is sitting", FR = "Erreur Fling : Cible assise"},
    notif_error_target_missing_parts = {EN = "Fling Error: Target is missing parts", FR = "Erreur Fling : Parties manquantes chez cible"},
    notif_error_unknown_char = {EN = "Fling Error: Unknown character issue", FR = "Erreur Fling : Problème perso inconnu"},
    notif_lasorgun_created = {EN = "Laser Gun Added!", FR = "PistoLaser Ajouté !"},
    notif_lasorgun_already_created = {EN = "Laser Gun already created/added.", FR = "PistoLaser déjà créé/ajouté."},
    notif_lasorgun_invalid_target = {EN = "Laser Gun: Invalid target clicked.", FR = "PistoLaser : Cible clic invalide."},
    notif_spamtp_error_noname = {EN = "Spam TP Error: Enter player name.", FR = "Erreur Spam TP : Entrez nom joueur."},
    notif_spamtp_error_noplayer = {EN = "Spam TP Error: Player not found.", FR = "Erreur Spam TP : Joueur introuvable."},
    notif_spamtp_started = {EN = "Spam TP Started on %s", FR = "Spam TP Démarré sur %s"},
    notif_spamtp_stopped = {EN = "Spam TP Stopped", FR = "Spam TP Arrêté"},
    notif_spamtp_error_noroot = {EN = "Spam TP Error: Target missing RootPart.", FR = "Erreur Spam TP : RootPart cible manquant."},
    notif_spamtp_error_invalid = {EN = "Spam TP Error: Target invalid/dead.", FR = "Erreur Spam TP : Cible invalide/morte."},
    notif_spamtp_error_nochar = {EN = "Spam TP Error: Local character invalid.", FR = "Erreur Spam TP : Perso local invalide."},
    notif_tpall_char_lost = {EN = "TP To All: Character lost, stopping.", FR = "TP Tous : Perso perdu, arrêt."},
    notif_orbit_error_notarget = {EN = "Orbit Error: Select a valid target first.", FR = "Erreur Orbite : Sélectionnez cible valide d'abord."},
    notif_orbit_status = {EN = "Orbit Player: %s", FR = "Orbiter Joueur : %s"}, 
    notif_attach_error_notarget = {EN = "Attach Error: Select a valid target first.", FR = "Erreur Attacher : Sélectionnez cible valide d'abord."},
    notif_attach_error_noroots = {EN = "Attach Error: Could not find RootParts.", FR = "Erreur Attacher : RootParts introuvables."},
    notif_attach_status = {EN = "Attach to Player: %s", FR = "Attacher au Joueur : %s"}, 
    notif_trip_error_notarget = {EN = "Trip Error: Select a valid target first.", FR = "Erreur Tréb. : Sélectionnez cible valide d'abord."},
    notif_trip_attempt = {EN = "Attempted to trip %s", FR = "Tentative de faire trébucher %s"},
    notif_sit_error_notarget = {EN = "Sit Error: Select a valid target first.", FR = "Erreur Asseoir : Sélectionnez cible valide d'abord."},
    notif_sit_attempt = {EN = "Attempted to sit %s", FR = "Tentative d'asseoir %s"},
    notif_annoy_error_notarget = {EN = "Annoy Error: Select a valid target first (needs Head part).", FR = "Erreur Embêter : Sélectionnez cible valide d'abord (req. Tête)."},
    notif_annoy_start = {EN = "Annoying %s...", FR = "Embêtement de %s..."},
    notif_annoy_finished = {EN = "Finished annoying %s", FR = "Embêtement de %s terminé"},
    notif_playerlift_activated = {EN = "Player Lift Activated!", FR = "Levier Joueur Activé !"},
    notif_playerlift_reset = {EN = "Player Lift Resetted", FR = "Levier Joueur Réinitialisé"},
    notif_playerlift_target_set = {EN = "Player Lift: Target set to %s", FR = "Levier Joueur : Cible définie sur %s"},
    notif_playerlift_target_cleared = {EN = "Player Lift: Target cleared", FR = "Levier Joueur : Cible effacée"},
    notif_playerlift_target_left = {EN = "Player Lift target left, disabling lift.", FR = "Cible Levier Joueur partie, désactivation."},
    notif_playerlift_stopped = {EN = "Player Lift Stopped.", FR = "Levier Joueur Arrêté."},
    notif_error_char_missing_parts = {EN = "%s Error: Missing character parts.", FR = "Erreur %s : Parties perso manquantes."},
    notif_error_activate = {EN = "%s Error: Failed to activate.", FR = "Erreur %s : Échec activation."},
    notif_error_status_label = {EN = "%s Error: Status label missing.", FR = "Erreur %s : Label statut manquant."},
    notif_getspeed_result = {EN = "Current WalkSpeed: %s", FR = "Vitesse Marche Actuelle : %s"},
    notif_getspeed_fail = {EN = "Get Speed Error: Character/Humanoid not found.", FR = "Erreur Obt. Vitesse : Perso/Humanoïde introuvable."},
    notif_removedebris_result = {EN = "Removed %s debris items.", FR = "%s débris retirés."},
    notif_clearworkspace_warn = {EN = "WARNING: Attempting to clear workspace (may crash).", FR = "ATTENTION : Tentative de vider l'espace (peut planter)."},
    notif_clearworkspace_result = {EN = "Cleared %s items from workspace.", FR = "%s éléments vidés de l'espace."},
    notif_error_raycast = {EN = "%s Error: Raycast failed.", FR = "Erreur %s : Raycast échoué."},
    notif_highjump_success = {EN = "High Jump!", FR = "Saut Haut !"},
    notif_error_no_limbs = {EN = "%s Error: Could not find limbs to hide.", FR = "Erreur %s : Membres à cacher introuvables."},
    notif_view_set = {EN = "View set to %s", FR = "Vue définie sur %s"},
    notif_headsit_fail_notarget = {EN = "Head Sit Error: No target selected or target has no Head.", FR = "Erreur Assis Tête : Cible non sélec. ou sans Tête."},
    notif_headsit_success = {EN = "Attempted Head Sit on %s", FR = "Tentative Assis Tête sur %s"},
    notif_error_tptool = {EN = "TP Tool Error: Click position invalid.", FR = "Erreur Outil TP : Position clic invalide."},
    notif_chams_style_set = {EN = "Chams Style: %s", FR = "Style Chams : %s"},
    notif_printpositions_done = {EN = "Printed player positions to console.", FR = "Positions joueurs imprimées dans console."},
    notif_panic_activated = {EN = "Panic Mode Activated! Disabling cheats...", FR = "Mode Panique Activé ! Désactivation cheats..."}, 
    notif_clearchat_done = {EN = "Chat cleared.", FR = "Chat effacé."}, 
    notif_userid_fail_noplayer = {EN = "Get User ID Error: Player '%s' not found.", FR = "Erreur Obt ID Utilisateur : Joueur '%s' introuvable."}, 
    notif_userid_success = {EN = "User ID for %s: %d", FR = "ID Utilisateur pour %s : %d"}, 
    notif_userid_copied = {EN = "User ID copied to clipboard.", FR = "ID Utilisateur copié dans presse-papiers."}, 
    notif_userid_copy_fail = {EN = "Copy User ID Failed: No ID available.", FR = "Échec Copie ID Utilisateur : Aucun ID dispo."}, 
    notif_webhook_fail_url = {EN = "Webhook Send Failed: Invalid or empty URL.", FR = "Échec Envoi Webhook : URL invalide ou vide."}, 
    notif_webhook_fail_http = {EN = "Webhook Send Failed: HttpService unavailable.", FR = "Échec Envoi Webhook : HttpService indispo."}, 
    notif_webhook_sending = {EN = "Sending webhook message...", FR = "Envoi message webhook..."}, 
    notif_webhook_success = {EN = "Webhook message sent.", FR = "Message webhook envoyé."}, 
    notif_webhook_error = {EN = "Webhook Send Error: %s", FR = "Erreur Envoi Webhook : %s"}, 
    notif_serverhop_smallest_start = {EN = "Searching for smallest server...", FR = "Recherche du plus petit serveur..."}, 
    notif_serverhop_smallest_fail = {EN = "Hop Smallest failed: Could not find suitable server.", FR = "Saut Mini Serv échoué : Serveur convenable introuvable."}, 
    notif_walkonair_requires_infairjump = {EN = "Walk On Air requires Inf AirJump to be enabled.", FR = "Marche Air nécessite Saut Air Inf activé."}, 
    notif_charscale_fe = {EN = "Character Scale only affects your view due to FE.", FR = "Échelle Perso affecte que votre vue (FE)."}, 
    notif_error_nohead = {EN = "%s Error: Character head not found.", FR = "Erreur %s : Tête du personnage introuvable."}, 
    notif_error_create_effect = {EN = "%s Error: Failed to create effect.", FR = "Erreur %s : Échec création effet."}, 
    notif_error_camera_scriptable = {EN = "%s Error: Camera type issue.", FR = "Erreur %s : Problème type caméra."}, 
    notif_error_tpbehind_notarget = {EN = "TP Behind Error: Select a valid target first.", FR = "Erreur TP Derrière : Sélectionnez cible valide d'abord."}, 
    notif_error_tpbehind_noroot = {EN = "TP Behind Error: Target missing RootPart.", FR = "Erreur TP Derrière : RootPart cible manquant."}, 
    notif_tpbehind_success = {EN = "Teleported behind %s", FR = "Téléporté derrière %s"}, 
    notif_time_set = {EN = "Time set to %s", FR = "Heure mise à %s"}, 
    notif_neonworld_warn = {EN = "Neon World: May impact performance.", FR = "Monde Néon : Peut impacter les performances."}, 
    notif_chatspy_log_toggled = {EN = "Chat Spy local logging: %s", FR = "Log local Chat Spy : %s"}, 
    notif_chatspy_parrot_toggled = {EN = "Chat Spy parrot mode: %s", FR = "Mode perroquet Chat Spy : %s"}, 
    notif_gui_destroyed = {EN="GUI Destroyed.", FR="GUI Détruite."},
    notif_shadow_quality_placeholder = {EN = "Shadow Quality (Placeholder): %s", FR = "Qualité Ombres (Placeholder) : %s"}, 
    -- ... (autres traductions) ...
tab_chatbypass = {EN = "Chat Bypass", FR = "Chat Bypass"},
section_bypass_input = {EN = "Message Input", FR = "Saisie Message"},
section_bypass_fonts = {EN = "Bypass Fonts", FR = "Polices Bypass"},
button_sendbypass = {EN = "Send Bypass", FR = "Envoyer Bypass"},
placeholder_bypass_message = {EN = "Enter message to bypass...", FR = "Entrez message à bypass..."},
notif_bypass_font_selected = {EN = "Bypass font set to: %s", FR = "Police Bypass définie sur : %s"},
notif_bypass_send_error = {EN = "Bypass Send Error: %s", FR = "Erreur Envoi Bypass : %s"},
notif_bypass_no_event = {EN = "Bypass Send Error: Chat event not found.", FR = "Erreur Envoi Bypass : Événement chat introuvable."},
-- ... (fin des traductions) ...
}

ShowNotification = function(key, ...) 
    if not ScreenGui or not ScreenGui.Parent then return end
    args_ShowNotification = {...} 

    pcall(function() 
        C3_fromRGB_local_ShowNotification = cached_Color3_fromRGB 
        if typeof(C3_fromRGB_local_ShowNotification) ~= "function" then warn("ShowNotification: C3_fromRGB_local_ShowNotification is nil!"); return end

        messageFormat_ShowNotification = key 
        if translations[key] and translations[key][currentLanguage] then
            messageFormat_ShowNotification = translations[key][currentLanguage]
        elseif translations[key] and translations[key]["EN"] then
            messageFormat_ShowNotification = translations[key]["EN"] 
        else
            warn("Notification translation key not found:", key)
        end

        message_ShowNotification = messageFormat_ShowNotification
        if #args_ShowNotification > 0 then
            success_ShowNotification, formattedMsg_ShowNotification = pcall(string.format, messageFormat_ShowNotification, unpack(args_ShowNotification))
            if success_ShowNotification then
                message_ShowNotification = formattedMsg_ShowNotification
            else
                warn("Failed to format notification string for key:", key, "Error:", formattedMsg_ShowNotification)
                argString_ShowNotification = ""
                for i, v in ipairs(args_ShowNotification) do argString_ShowNotification = argString_ShowNotification .. tostring(v) .. (i < #args_ShowNotification and ", " or "") end
                message_ShowNotification = messageFormat_ShowNotification .. " | Args: " .. argString_ShowNotification
            end
        end

        Notification_ShowNotification = Instance.new("Frame"); Notification_ShowNotification.Name = "Notification"; Notification_ShowNotification.Size = UDim2.new(0, 200, 0, 60); Notification_ShowNotification.Position = UDim2.new(1, -210, 1, 0); Notification_ShowNotification.BackgroundColor3 = C3_fromRGB_local_ShowNotification(20, 20, 40); Notification_ShowNotification.Parent = ScreenGui
        NotificationLabel_ShowNotification = Instance.new("TextLabel"); NotificationLabel_ShowNotification.Size = UDim2.new(1, -10, 1, -10); NotificationLabel_ShowNotification.Position = UDim2.new(0, 5, 0, 5); NotificationLabel_ShowNotification.BackgroundTransparency = 1; NotificationLabel_ShowNotification.TextColor3 = C3_fromRGB_local_ShowNotification(255, 255, 255); NotificationLabel_ShowNotification.TextWrapped = true; NotificationLabel_ShowNotification.TextSize = 16; NotificationLabel_ShowNotification.Text = message_ShowNotification;
        NotificationLabel_ShowNotification.Font = Enum.Font.GothamBlack; 
        NotificationLabel_ShowNotification.Parent = Notification_ShowNotification
        NotifCorner_ShowNotification = Instance.new("UICorner"); NotifCorner_ShowNotification.CornerRadius = UDim.new(0, 10); NotifCorner_ShowNotification.Parent = Notification_ShowNotification
        notifTween_ShowNotification = TweenService:Create(Notification_ShowNotification, tweenInfo, {Position = UDim2.new(1, -210, 1, -70)})
        if notifTween_ShowNotification then notifTween_ShowNotification:Play() else warn("Failed to create notification tween (in)") end
        task.delay(3, function() if Notification_ShowNotification and Notification_ShowNotification.Parent then
             notifTweenOut_ShowNotification = TweenService:Create(Notification_ShowNotification, tweenInfo, {Position = UDim2.new(1, -210, 1, 0)})
             if notifTweenOut_ShowNotification then notifTweenOut_ShowNotification:Play(); task.wait(tweenInfo.Time) else warn("Failed to create notification tween (out)") end 
             Notification_ShowNotification:Destroy()
        end end)
    end)
end

getText = function(key, state, emojiOn, emojiOff) 
    baseText_getText = key 
    if translations[key] and translations[key][currentLanguage] then
        baseText_getText = translations[key][currentLanguage]
    elseif translations[key] and translations[key]["EN"] then
        baseText_getText = translations[key]["EN"] 
    else
        warn("Translation key not found:", key)
    end

    stateText_getText = "" 
    if state == true then
        stateText_getText = translations["state_on"][currentLanguage] or translations["state_on"]["EN"]
    elseif state == false then
        stateText_getText = translations["state_off"][currentLanguage] or translations["state_off"]["EN"]
    end

    currentEmoji_getText = "" 
    if guiShowTextEmojis then
        if state == true then
            currentEmoji_getText = emojiOn or ""
        elseif state == false then
            currentEmoji_getText = emojiOff or ""
        else 
            currentEmoji_getText = emojiOn or ""
        end
    end

    emojiSeparator_getText = (currentEmoji_getText ~= "" and stateText_getText ~= "") and " " or (currentEmoji_getText ~= "" and " " or "") 
    return baseText_getText .. stateText_getText .. emojiSeparator_getText .. currentEmoji_getText
end

typeText = function(label, text) 
    label.Text = ""; for i = 1, #text do if not label or not label.Parent then break end; label.Text = string.sub(text, 1, i); task.wait(0.05) end
end

addHoverEffect = function(button) 
    if not button:IsA("TextButton") then return end
    if button == FlingToolsNoclipStatusLabel or button == fpsLabel then return end 

    originalTransparency_addHoverEffect = button.BackgroundTransparency 

    button.MouseEnter:Connect(function()
        targetTransparency_addHoverEffect = originalTransparency_addHoverEffect + 0.2 
        hoverTween_addHoverEffect = TweenService:Create(button, tweenInfo, { BackgroundTransparency = targetTransparency_addHoverEffect }) 
        if hoverTween_addHoverEffect then hoverTween_addHoverEffect:Play() else warn("Failed to create hover tween (transparency enter) for", button.Name) end
    end)

    button.MouseLeave:Connect(function()
        leaveTween_addHoverEffect = TweenService:Create(button, tweenInfo, { BackgroundTransparency = originalTransparency_addHoverEffect }) 
        if leaveTween_addHoverEffect then leaveTween_addHoverEffect:Play() else warn("Failed to create hover tween (transparency leave) for", button.Name) end

        activePageName_addHoverEffect = nil 
        for name, page in pairs(pageInstances) do if page.Visible then activePageName_addHoverEffect = name; break end end

        C3_fromRGB_local_addHoverEffect = cached_Color3_fromRGB 
        canUseRGB_addHoverEffect = typeof(C3_fromRGB_local_addHoverEffect) == "function" 

        currentTabText_addHoverEffect = "" 
        if tabButtons[activePageName_addHoverEffect] then currentTabText_addHoverEffect = tabButtons[activePageName_addHoverEffect].Text end 

        if button.Text == currentTabText_addHoverEffect then 
            baseColor_addHoverEffect = currentButtonColor
        elseif tabButtons[activePageName_addHoverEffect] and button.Parent == TabBar then 
            baseColor_addHoverEffect = currentTabColor
        elseif FlingToolsBringButton and button == FlingToolsBringButton then 
            if bringing then baseColor_addHoverEffect = canUseRGB_addHoverEffect and C3_fromRGB_local_addHoverEffect(255, 150, 0) or Color3.new(1, 150/255, 0)
            elseif target and target.Parent then baseColor_addHoverEffect = canUseRGB_addHoverEffect and C3_fromRGB_local_addHoverEffect(0, 200, 0) or Color3.new(0, 200/255, 0) 
            else baseColor_addHoverEffect = currentButtonColor end
        elseif button.Name:match("Button") and (button.Parent:FindFirstAncestor(".CheatsPage") or button.Parent:FindFirstAncestor(".FlingToolsPage") or button.Parent:FindFirstAncestor(".ExecutorPage") or button.Parent:FindFirstAncestor(".SettingsPage") or button.Parent:FindFirstAncestor(".MiscPage") or button.Parent:FindFirstAncestor(".KeyboardPage") or button.Parent:FindFirstAncestor(".VersionHistoryPage") or button.Parent:FindFirstAncestor(".MiscFeaturesPage") or button.Parent:FindFirstAncestor(".GraphicsPage") ) then 
            if not button.Name:match("Value") and not button.Name:match("TabButton") and button.Name ~= "FlingTools_BringButton" then 
                 baseColor_addHoverEffect = currentButtonColor
            end
        elseif button == MinimizeButton or button == MinimizedButton then baseColor_addHoverEffect = currentButtonColor
        elseif button.Name == "CopyAllButton" or (button.Parent and button.Parent.Name == "ErrorEntry") then baseColor_addHoverEffect = currentButtonColor
        else baseColor_addHoverEffect = currentButtonColor end 

        if baseColor_addHoverEffect and not button.Name:match("Value") then 
             if button.Name == "DestroyGUIButton" or button.Name == "PanicButton" then baseColor_addHoverEffect = Color3.fromRGB(255, 60, 60) end 
             button.BackgroundColor3 = baseColor_addHoverEffect
        elseif button.Name:match("Value") then
             button.BackgroundColor3 = currentSliderBgColor 
        end
    end)
end


function gp(p, n, cl) 
	if typeof(p) == "Instance" then
		c_gp = p:GetChildren() 
		for i = 1, #c_gp do
			v_gp = c_gp[i] 
			if v_gp.Name == n and v_gp:IsA(cl) then
				return v_gp
			end
		end
	end
	return nil
end

i = Instance.new 
v2 = Vector2.new 
bc = BrickColor.new 
c3 = cached_Color3_new 
u2 = UDim2.new 

function rs(l) 
    if not string or typeof(string.char) ~= "function" then warn("rs(): string.char is not available!"); return "ERROR_STRING" end
    if not math or typeof(math.random) ~= "function" then warn("rs(): math.random is not available!"); return "ERROR_MATH" end

    char_rs = string.char 
    random_rs = math.random 

    if typeof(char_rs) ~= "function" then warn("rs(): string.char_rs became nil after caching!"); return "ERROR_STRING_CACHE" end
    if typeof(random_rs) ~= "function" then warn("rs(): math.random_rs became nil after caching!"); return "ERROR_MATH_CACHE" end

    if typeof(random_rs) ~= "function" then warn("rs(): cached 'random_rs' is nil before length calculation!"); return "ERROR_LEN_RAND" end
	l = l or random_rs(8,15) 

	s_rs = "" 
	for i = 1, l do
        if typeof(random_rs) ~= "function" then warn("rs(): cached 'random_rs' is nil inside loop (check 1)!"); return "ERROR_LOOP_RAND1" end
        choice_rs = random_rs(1, 2) 

        if typeof(char_rs) ~= "function" then warn("rs(): cached 'char_rs' is nil inside loop!"); return "ERROR_LOOP_CHAR" end
        if typeof(random_rs) ~= "function" then warn("rs(): cached 'random_rs' is nil inside loop (check 2/3)!"); return "ERROR_LOOP_RAND23" end

		if choice_rs == 1 then
			s_rs = s_rs .. char_rs(random_rs(65, 90)) 
		else
			s_rs = s_rs .. char_rs(random_rs(97, 122)) 
		end
	end
	return s_rs
end
e = Enum 

function findplr(txt) 
	if txt == "" then
		return nil
	end
    if not slower then warn("findplr: 'slower' (string.lower) is unavailable!"); return nil end 
    txt = slower(txt)
	for v, _ in pairs(others) do
        if v and v.Parent then
		    if slower(v.Name):match("^" .. txt) then
			    return v
            elseif v.DisplayName and slower(v.DisplayName):match("^" .. txt) then
			    return v
		    end
        else
             others[v] = nil 
        end
	end
	return nil
end

GetPlayer = function(Name) 
    if not slower then warn("GetPlayer: 'slower' (string.lower) is unavailable!"); return nil end
    Name = slower(Name)
    AllBool_GetPlayer = false 
    if Name == "all" or Name == "others" then
        AllBool_GetPlayer = true
        getgenv().AllBool = true
        return
    elseif Name == "random" then
        GetPlayers_GetPlayer = Players:GetPlayers() 
        if table.find(GetPlayers_GetPlayer, player) then table.remove(GetPlayers_GetPlayer, table.find(GetPlayers_GetPlayer, player)) end
        if #GetPlayers_GetPlayer == 0 then return nil end
        random_GetPlayer = math.random 
        if typeof(random_GetPlayer) ~= "function" then warn("GetPlayer(random): math.random_GetPlayer unavailable!"); return nil end
        return GetPlayers_GetPlayer[random_GetPlayer(#GetPlayers_GetPlayer)]
    elseif Name ~= "random" and Name ~= "all" and Name ~= "others" then
        for _, x in next, Players:GetPlayers() do
            if x ~= player then
                if x.Name:lower():match("^"..Name) then 
                    return x;
                elseif x.DisplayName and x.DisplayName:lower():match("^"..Name) then
                    return x;
                end
            end
        end
    else
        return
    end
    return nil
end

FPos_Fling = function(RootPart, BasePart, Pos, Ang) 
    Character_FPos_Fling = RootPart.Parent 
    pcall(function()
        RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
        Character_FPos_Fling:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
        RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
        RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
    end)
end

SFBasePart_Fling = function(RootPart, TargetPlayer, BasePart) 
    Character_SFBasePart_Fling = RootPart.Parent 
    Humanoid_SFBasePart_Fling = Character_SFBasePart_Fling and Character_SFBasePart_Fling:FindFirstChildOfClass("Humanoid") 
    TCharacter_SFBasePart_Fling = TargetPlayer.Character 
    THumanoid_SFBasePart_Fling = TCharacter_SFBasePart_Fling and TCharacter_SFBasePart_Fling:FindFirstChildOfClass("Humanoid") 

    TimeToWait_SFBasePart_Fling = 2 
    Time_SFBasePart_Fling = tick() 
    Angle_SFBasePart_Fling = 0 
    rad_SFBasePart_Fling = math.rad 

    repeat
        if not THumanoid_SFBasePart_Fling or not BasePart or not BasePart.Parent then break end

        if BasePart.Velocity.Magnitude < 50 then
            Angle_SFBasePart_Fling = Angle_SFBasePart_Fling + 100
            FPos_Fling(RootPart, BasePart, CFrame.new(0, 1.5, 0) + THumanoid_SFBasePart_Fling.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(rad_SFBasePart_Fling(Angle_SFBasePart_Fling), 0, 0))
            task.wait()
            FPos_Fling(RootPart, BasePart, CFrame.new(0, -1.5, 0) + THumanoid_SFBasePart_Fling.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(rad_SFBasePart_Fling(Angle_SFBasePart_Fling), 0, 0))
            task.wait()
            FPos_Fling(RootPart, BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid_SFBasePart_Fling.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(rad_SFBasePart_Fling(Angle_SFBasePart_Fling), 0, 0))
            task.wait()
            FPos_Fling(RootPart, BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid_SFBasePart_Fling.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(rad_SFBasePart_Fling(Angle_SFBasePart_Fling), 0, 0))
            task.wait()
            FPos_Fling(RootPart, BasePart, CFrame.new(0, 1.5, 0) + THumanoid_SFBasePart_Fling.MoveDirection, CFrame.Angles(rad_SFBasePart_Fling(Angle_SFBasePart_Fling), 0, 0))
            task.wait()
            FPos_Fling(RootPart, BasePart, CFrame.new(0, -1.5, 0) + THumanoid_SFBasePart_Fling.MoveDirection, CFrame.Angles(rad_SFBasePart_Fling(Angle_SFBasePart_Fling), 0, 0))
            task.wait()
        else
            FPos_Fling(RootPart, BasePart, CFrame.new(0, 1.5, THumanoid_SFBasePart_Fling.WalkSpeed), CFrame.Angles(rad_SFBasePart_Fling(90), 0, 0))
            task.wait()
            FPos_Fling(RootPart, BasePart, CFrame.new(0, -1.5, -THumanoid_SFBasePart_Fling.WalkSpeed), CFrame.Angles(0, 0, 0))
            task.wait()
            FPos_Fling(RootPart, BasePart, CFrame.new(0, 1.5, THumanoid_SFBasePart_Fling.WalkSpeed), CFrame.Angles(rad_SFBasePart_Fling(90), 0, 0))
            task.wait()
            TRootPart_SFBasePart_Fling = THumanoid_SFBasePart_Fling and THumanoid_SFBasePart_Fling.RootPart 
            if not TRootPart_SFBasePart_Fling then break end
            FPos_Fling(RootPart, BasePart, CFrame.new(0, 1.5, TRootPart_SFBasePart_Fling.Velocity.Magnitude / 1.25), CFrame.Angles(rad_SFBasePart_Fling(90), 0, 0))
            task.wait()
            FPos_Fling(RootPart, BasePart, CFrame.new(0, -1.5, -TRootPart_SFBasePart_Fling.Velocity.Magnitude / 1.25), CFrame.Angles(0, 0, 0))
            task.wait()
            FPos_Fling(RootPart, BasePart, CFrame.new(0, 1.5, TRootPart_SFBasePart_Fling.Velocity.Magnitude / 1.25), CFrame.Angles(rad_SFBasePart_Fling(90), 0, 0))
            task.wait()
            FPos_Fling(RootPart, BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(rad_SFBasePart_Fling(90), 0, 0))
            task.wait()
            FPos_Fling(RootPart, BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
            task.wait()
            FPos_Fling(RootPart, BasePart, CFrame.new(0, -1.5 ,0), CFrame.Angles(rad_SFBasePart_Fling(-90), 0, 0))
            task.wait()
            FPos_Fling(RootPart, BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
            task.wait()
        end
    until not BasePart or not BasePart.Parent or not THumanoid_SFBasePart_Fling or BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TCharacter_SFBasePart_Fling or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter_SFBasePart_Fling or THumanoid_SFBasePart_Fling.Sit or not Humanoid_SFBasePart_Fling or Humanoid_SFBasePart_Fling.Health <= 0 or tick() > Time_SFBasePart_Fling + TimeToWait_SFBasePart_Fling
end

SkidFling = function(TargetPlayer) 
    Character_SkidFling = player.Character 
    Humanoid_SkidFling = Character_SkidFling and Character_SkidFling:FindFirstChildOfClass("Humanoid") 
    RootPart_SkidFling = Humanoid_SkidFling and Humanoid_SkidFling.RootPart 

    TCharacter_SkidFling = TargetPlayer.Character 
    THumanoid_SkidFling = TCharacter_SkidFling and TCharacter_SkidFling:FindFirstChildOfClass("Humanoid") 
    TRootPart_SkidFling = THumanoid_SkidFling and THumanoid_SkidFling.RootPart 
    THead_SkidFling = TCharacter_SkidFling and TCharacter_SkidFling:FindFirstChild("Head") 
    Accessory_SkidFling = TCharacter_SkidFling and TCharacter_SkidFling:FindFirstChildOfClass("Accessory") 
    Handle_SkidFling = nil 

    if Character_SkidFling and Humanoid_SkidFling and RootPart_SkidFling then
        if RootPart_SkidFling.Velocity.Magnitude < 50 then
            getgenv().OldPos = RootPart_SkidFling.CFrame
        end
        AllBool_SkidFling = getgenv().AllBool or false 
        if THumanoid_SkidFling and THumanoid_SkidFling.Sit and not AllBool_SkidFling then
             ShowNotification("error_target_sitting")
            return
        elseif THumanoid_SkidFling and THumanoid_SkidFling.Sit and AllBool_SkidFling then
            return
        end
        if THead_SkidFling then workspace.CurrentCamera.CameraSubject = THead_SkidFling
        else
            if Accessory_SkidFling and Accessory_SkidFling:FindFirstChild("Handle") then
                 Handle_SkidFling = Accessory_SkidFling.Handle
                 workspace.CurrentCamera.CameraSubject = Handle_SkidFling
            elseif THumanoid_SkidFling and TRootPart_SkidFling then workspace.CurrentCamera.CameraSubject = THumanoid_SkidFling end
        end
        if not TCharacter_SkidFling or not TCharacter_SkidFling:FindFirstChildWhichIsA("BasePart") then 
            return
        end

        partToFling_SkidFling = nil 
        if TRootPart_SkidFling and THead_SkidFling then
            if (TRootPart_SkidFling.CFrame.p - THead_SkidFling.CFrame.p).Magnitude > 5 then partToFling_SkidFling = THead_SkidFling else partToFling_SkidFling = TRootPart_SkidFling end
        elseif TRootPart_SkidFling and not THead_SkidFling then partToFling_SkidFling = TRootPart_SkidFling
        elseif not TRootPart_SkidFling and THead_SkidFling then partToFling_SkidFling = THead_SkidFling
        elseif not TRootPart_SkidFling and not THead_SkidFling and Accessory_SkidFling and Handle_SkidFling then partToFling_SkidFling = Handle_SkidFling
        else
            partToFling_SkidFling = TCharacter_SkidFling:FindFirstChildWhichIsA("BasePart")
            if not partToFling_SkidFling then
                 ShowNotification("error_target_missing_parts")
                return
            end
        end

        getgenv().FPDH = workspace.FallenPartsDestroyHeight
        workspace.FallenPartsDestroyHeight = 0/0

        BV_SkidFling = Instance.new("BodyVelocity") 
        BV_SkidFling.Name = "EpixVel"
        BV_SkidFling.Parent = RootPart_SkidFling
        BV_SkidFling.Velocity = Vector3.new(9e8, 9e8, 9e8)
        BV_SkidFling.MaxForce = Vector3.new(1/0, 1/0, 1/0)

        Humanoid_SkidFling:SetStateEnabled(Enum.HumanoidStateType.Seated, false)

        SFBasePart_Fling(RootPart_SkidFling, TargetPlayer, partToFling_SkidFling)

        if BV_SkidFling and BV_SkidFling.Parent then BV_SkidFling:Destroy() end
        Humanoid_SkidFling:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
        workspace.CurrentCamera.CameraSubject = Humanoid_SkidFling

        task.spawn(function()
            repeat
                if RootPart_SkidFling and RootPart_SkidFling.Parent and getgenv().OldPos then
                    RootPart_SkidFling.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
                    Character_SkidFling:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
                    Humanoid_SkidFling:ChangeState("GettingUp")
                    table.foreach(Character_SkidFling:GetChildren(), function(_, x)
                        if x:IsA("BasePart") then
                            x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
                        end
                    end)
                else
                    break
                end
                task.wait()
            until not RootPart_SkidFling or not RootPart_SkidFling.Parent or not getgenv().OldPos or (RootPart_SkidFling.Position - getgenv().OldPos.p).Magnitude < 25
            workspace.FallenPartsDestroyHeight = getgenv().FPDH
        end)
    else
         ShowNotification("error_unknown_char")
        return
    end
end

function sandbox(var, func) 
    env_sandbox = getfenv(func) 
    newenv_sandbox = setmetatable({}, { 
        __index = function(self, k)
            if k == "script" then return var else return env_sandbox[k] end
        end,
    })
    setfenv(func, newenv_sandbox)
    return func
end
function createLaserGun_Original() 
    if laserGunCreated then ShowNotification("notif_lasorgun_already_created"); return end

    C3_new_local_LaserGun = cached_Color3_new 

    cors_LaserGun = {} 
    mas_LaserGun = Instance.new("Model", game:GetService("Lighting")) 

    Tool0_LaserGun = Instance.new("Tool") 
    Part1_LaserGun = Instance.new("Part") 
    SpecialMesh2_LaserGun = Instance.new("SpecialMesh") 
    Sound3_LaserGun = Instance.new("Sound") 
    Sound4_LaserGun = Instance.new("Sound") 
    PointLight5_LaserGun = Instance.new("PointLight") 
    Sound6_LaserGun = Instance.new("Sound") 
    Script9_LaserGun = Instance.new("Script") 

    Tool0_LaserGun.Name = "HyperlaserGun"
    Tool0_LaserGun.Parent = mas_LaserGun
    Tool0_LaserGun.TextureId = "http://www.roblox.com/asset/?id=130093050"
    Tool0_LaserGun.GripPos = Vector3.new(0, -0.100000001, 0.75)
    Tool0_LaserGun.CanBeDropped = false

    Part1_LaserGun.Name = "Handle"
    Part1_LaserGun.Parent = Tool0_LaserGun
    Part1_LaserGun.Size = Vector3.new(0.58, 1.34, 2.48)
    Part1_LaserGun.Position = Vector3.new(0.04, 0, 0.07)
    Part1_LaserGun.BottomSurface = Enum.SurfaceType.Smooth
    Part1_LaserGun.TopSurface = Enum.SurfaceType.Smooth
    Part1_LaserGun.BrickColor = bc("Medium stone grey")

    SpecialMesh2_LaserGun.Parent = Part1_LaserGun
    SpecialMesh2_LaserGun.MeshId = "http://www.roblox.com/asset/?id=130099641"
    SpecialMesh2_LaserGun.Scale = Vector3.new(0.65, 0.65, 0.65)
    SpecialMesh2_LaserGun.TextureId = "http://www.roblox.com/asset/?id=130093033"

    Sound3_LaserGun.Name = "Fire"
    Sound3_LaserGun.Parent = Part1_LaserGun
    Sound3_LaserGun.SoundId = "http://www.roblox.com/asset?id=130113322"

    Sound4_LaserGun.Name = "Reload"
    Sound4_LaserGun.Parent = Part1_LaserGun
    Sound4_LaserGun.SoundId = "http://www.roblox.com/asset?id=130113370"

    PointLight5_LaserGun.Parent = Part1_LaserGun
    PointLight5_LaserGun.Color = typeof(C3_new_local_LaserGun) == "function" and C3_new_local_LaserGun(0, 1, 1) or Color3.new(0, 1, 1) 
    PointLight5_LaserGun.Range = 6

    Sound6_LaserGun.Name = "HitFade"
    Sound6_LaserGun.Parent = Part1_LaserGun
    Sound6_LaserGun.SoundId = "http://www.roblox.com/asset?id=130113415"

    Script9_LaserGun.Parent = Tool0_LaserGun
    table.insert(cors_LaserGun, sandbox(Script9_LaserGun, function()
        Tool_LaserScript = script.Parent 
        Handle_LaserScript = Tool_LaserScript:WaitForChild("Handle")
        Players_LaserScript = game:GetService("Players")
        Debris_LaserScript = game:GetService("Debris")
        Speed_LaserScript = 100
        NozzleOffset_LaserScript = Vector3.new(0, 0.4, -1.1)
        Character_LaserScript, Player_LaserScript, Humanoid_LaserScript = nil,nil,nil

        Tool_LaserScript.Equipped:Connect(function(Mouse_LaserEquip)
            Character_LaserScript = Tool_LaserScript.Parent
            Player_LaserScript = Players_LaserScript:GetPlayerFromCharacter(Character_LaserScript)
            Humanoid_LaserScript = Character_LaserScript:FindFirstChild("Humanoid")
            if not Player_LaserScript or not Humanoid_LaserScript or Humanoid_LaserScript.Health == 0 then return end

            Mouse_LaserEquip.Button1Down:Connect(function()
                if Mouse_LaserEquip.Target then
                    targetPart_LaserFire = Mouse_LaserEquip.Target 

                    laser_LaserFire = Instance.new("Part")
                    laser_LaserFire.Anchored = true
                    laser_LaserFire.CanCollide = false
                    laser_LaserFire.Material = Enum.Material.Neon
                    laser_LaserFire.BrickColor = BrickColor.new("Bright red")
                    laser_LaserFire.Size = Vector3.new(0.2, 0.2, (Handle_LaserScript.Position - Mouse_LaserEquip.Hit.p).magnitude)
                    laser_LaserFire.CFrame = CFrame.new(Handle_LaserScript.Position, Mouse_LaserEquip.Hit.p) * CFrame.new(0, 0, -laser_LaserFire.Size.Z / 2)
                    laser_LaserFire.Parent = workspace
                    Debris_LaserScript:AddItem(laser_LaserFire, 0.1)

                    if Handle_LaserScript:FindFirstChild("Fire") then Handle_LaserScript.Fire:Play() end

                    if targetPart_LaserFire:IsA("BasePart") then 
                        spawn(function() 
                            for transparency_LaserFire = 0, 1, 0.05 do
                                if not targetPart_LaserFire or not targetPart_LaserFire.Parent then break end 
                                targetPart_LaserFire.Transparency = transparency_LaserFire 
                                task.wait(0.05) 
                            end
                            if targetPart_LaserFire and targetPart_LaserFire.Parent then targetPart_LaserFire:Destroy() end 
                        end)
                    end
                else
                    ShowNotification("notif_lasorgun_invalid_target")
                end
            end)
        end)
    end))

    for i, v in pairs(mas_LaserGun:GetChildren()) do
        v.Parent = player:FindFirstChild("Backpack")
        pcall(function() v:MakeJoints() end)
    end
    mas_LaserGun:Destroy()

    for i, v in pairs(cors_LaserGun) do
        spawn(function() 
            pcall(v)
        end)
    end

    pcall(function() StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, true) end)
    laserGunCreated = true
    ShowNotification("notif_lasorgun_created")
end

dwEntities = game:GetService("Players") 
dwLocalPlayer = dwEntities.LocalPlayer 
dwRunService = game:GetService("RunService") 

settings_tbl = { 
	ESP_TeamCheck = false,
	Chams = true,
	Chams_Transparency = 0.1,
	Chams_Glow_Color = (typeof(cached_Color3_fromRGB) == "function" and cached_Color3_fromRGB(255,0,0) or Color3.new(1,0,0)), 
    ESP_BoxStyle = "Box", 
    Chams_Style = 1, 
    ESP_BoxSize = 1 
}

function destroy_chams(char) 
    if not char then return end
	for k, v in next, char:GetChildren() do
		if v:IsA("BasePart") and v.Transparency ~= 1 then
			glow_destroy_chams = v:FindFirstChild("Glow") 
            chams_destroy_chams = v:FindFirstChild("Chams") 
			if glow_destroy_chams and chams_destroy_chams then
                pcall(glow_destroy_chams.Destroy, glow_destroy_chams)
                pcall(chams_destroy_chams.Destroy, chams_destroy_chams)
			end
		end
	end
end

function ApplyESP(v) 
	if v.Character and v.Character:FindFirstChildOfClass('Humanoid') then
        humanoid_ApplyESP = v.Character:FindFirstChildOfClass("Humanoid") 
		humanoid_ApplyESP.NameDisplayDistance = 9e9
		humanoid_ApplyESP.NameOcclusion = Enum.NameOcclusion.NoOcclusion
		humanoid_ApplyESP.HealthDisplayDistance = 9e9
		humanoid_ApplyESP.HealthDisplayType = Enum.HumanoidHealthDisplayType.AlwaysOn
		humanoid_ApplyESP.Health = humanoid_ApplyESP.Health 

        if v.Team then
            head_ApplyESP = v.Character:FindFirstChild("Head") 
            if head_ApplyESP then
                 billboard_ApplyESP = head_ApplyESP:FindFirstChild("NameTag") or head_ApplyESP:FindFirstChild("BillboardGui") 
                 if not billboard_ApplyESP then
                     billboard_ApplyESP = Instance.new("BillboardGui")
                     billboard_ApplyESP.Name = "NameTag"
                     billboard_ApplyESP.Parent = head_ApplyESP
                     billboard_ApplyESP.Size = UDim2.new(1.5, 0, 0, 20)
                     billboard_ApplyESP.StudsOffset = Vector3.new(0, 3, 0)
                     billboard_ApplyESP.AlwaysOnTop = true

                     textLabel_ApplyESP = Instance.new("TextLabel") 
                     textLabel_ApplyESP.Parent = billboard_ApplyESP
                     textLabel_ApplyESP.Size = UDim2.new(1, 0, 1, 0)
                     textLabel_ApplyESP.TextScaled = true
                     textLabel_ApplyESP.BackgroundTransparency = 1
                     textLabel_ApplyESP.TextColor3 = v.TeamColor.Color
                     textLabel_ApplyESP.Font = Enum.Font.GothamBlack 
                     textLabel_ApplyESP.Text = v.Name
                 else
                     textLabel_ApplyESP_existing = billboard_ApplyESP:FindFirstChildOfClass("TextLabel") 
                     if textLabel_ApplyESP_existing then
                          textLabel_ApplyESP_existing.TextColor3 = v.TeamColor.Color
                          textLabel_ApplyESP_existing.Text = v.Name
                          textLabel_ApplyESP_existing.Font = Enum.Font.GothamBlack 
                     end
                     billboard_ApplyESP.Enabled = true
                 end
             end
         end
	end
end

function startEspHeartbeatLoop() 
    if espHeartbeatConnection and espHeartbeatConnection.Connected then return end

    espHeartbeatConnection = dwRunService.Heartbeat:Connect(function()
        if settings_tbl.Chams and espScriptEnabled then
            for k, v in next, dwEntities:GetPlayers() do
                if v ~= dwLocalPlayer then
                    char_EspHeartbeat = v.Character 
                    if char_EspHeartbeat and char_EspHeartbeat:FindFirstChild("HumanoidRootPart") and char_EspHeartbeat:FindFirstChild("Humanoid") and char_EspHeartbeat.Humanoid.Health ~= 0 then
                        applyChamsToV_EspHeartbeat = false 
                        if settings_tbl.ESP_TeamCheck == false then
                            applyChamsToV_EspHeartbeat = true
                        else
                            if v.Team ~= dwLocalPlayer.Team then
                                applyChamsToV_EspHeartbeat = true
                            else
                                destroy_chams(char_EspHeartbeat)
                            end
                        end

                        if applyChamsToV_EspHeartbeat then
                             chamsColor_EspHeartbeat = v.TeamColor.Color 
                             if settings_tbl.Chams_Style == 2 then
                                 chamsColor_EspHeartbeat = settings_tbl.Chams_Glow_Color
                             end

                            for k_inner, b in next, char_EspHeartbeat:GetChildren() do
                                if b:IsA("BasePart") and b.Transparency ~= 1 then
                                    if not b:FindFirstChild("Glow") and not b:FindFirstChild("Chams") then
                                        pcall(function()
                                            chams_box_EspHeartbeat = Instance.new("BoxHandleAdornment", b) 
                                            chams_box_EspHeartbeat.Name = "Chams"; chams_box_EspHeartbeat.AlwaysOnTop = true; chams_box_EspHeartbeat.ZIndex = 4; chams_box_EspHeartbeat.Adornee = b; chams_box_EspHeartbeat.Color3 = chamsColor_EspHeartbeat; chams_box_EspHeartbeat.Transparency = settings_tbl.Chams_Transparency; chams_box_EspHeartbeat.Size = b.Size + Vector3.new(0.02, 0.02, 0.02)
                                            glow_box_EspHeartbeat = Instance.new("BoxHandleAdornment", b) 
                                            glow_box_EspHeartbeat.Name = "Glow"; glow_box_EspHeartbeat.AlwaysOnTop = false; glow_box_EspHeartbeat.ZIndex = 3; glow_box_EspHeartbeat.Adornee = b; glow_box_EspHeartbeat.Color3 = settings_tbl.Chams_Glow_Color; glow_box_EspHeartbeat.Size = chams_box_EspHeartbeat.Size + Vector3.new(0.13, 0.13, 0.13)
                                        end)
                                    else 
                                         existingChams_EspHeartbeat = b:FindFirstChild("Chams") 
                                         if existingChams_EspHeartbeat and existingChams_EspHeartbeat:IsA("BoxHandleAdornment") then
                                             existingChams_EspHeartbeat.Color3 = chamsColor_EspHeartbeat
                                         end
                                    end
                                end
                            end
                        end
                    else
                        destroy_chams(char_EspHeartbeat)
                    end
                end
            end
        else
            for k, v in next, dwEntities:GetPlayers() do if v ~= dwLocalPlayer then destroy_chams(v.Character) end end
        end
    end)
end

function stopEspHeartbeatLoop() 
     if espHeartbeatConnection and espHeartbeatConnection.Connected then espHeartbeatConnection:Disconnect(); espHeartbeatConnection = nil end
     for k, v in next, dwEntities:GetPlayers() do if v ~= dwLocalPlayer then destroy_chams(v.Character) end end
end

function startEspEventListeners() 
     if espPlayerAddedConnection and espPlayerAddedConnection.Connected then return end

     for _, v in ipairs(Players:GetPlayers()) do
         ApplyESP(v)
         if not espCharacterAddedConnections[v] or not espCharacterAddedConnections[v].Connected then
             espCharacterAddedConnections[v] = v.CharacterAdded:Connect(function() task.wait(0.33); ApplyESP(v) end)
         end
     end
     espPlayerAddedConnection = Players.PlayerAdded:Connect(function(p)
         ApplyESP(p)
         if not espCharacterAddedConnections[p] or not espCharacterAddedConnections[p].Connected then
             espCharacterAddedConnections[p] = p.CharacterAdded:Connect(function() task.wait(0.33); ApplyESP(p) end)
         end
     end)
end

function stopEspEventListeners() 
    if espPlayerAddedConnection and espPlayerAddedConnection.Connected then espPlayerAddedConnection:Disconnect(); espPlayerAddedConnection = nil end
    for p, conn in pairs(espCharacterAddedConnections) do if conn and conn.Connected then conn:Disconnect() end end
    espCharacterAddedConnections = {}
    for _, v in ipairs(Players:GetPlayers()) do
        if v.Character and v.Character:FindFirstChildOfClass("Humanoid") then
             humanoid_stopEspEvents = v.Character.Humanoid 
             pcall(function() humanoid_stopEspEvents.NameDisplayDistance = 100 end)
             pcall(function() humanoid_stopEspEvents.NameOcclusion = Enum.NameOcclusion.OccludeAll end)
             pcall(function() humanoid_stopEspEvents.HealthDisplayDistance = 100 end)
             pcall(function() humanoid_stopEspEvents.HealthDisplayType = Enum.HumanoidHealthDisplayType.DisplayWhenDamaged end)
             pcall(function() humanoid_stopEspEvents.Health = humanoid_stopEspEvents.Health end) 
             if v.Character:FindFirstChild("Head") then
                 head_stopEspEvents = v.Character.Head 
                 tag_stopEspEvents = head_stopEspEvents:FindFirstChild("NameTag") or head_stopEspEvents:FindFirstChild("BillboardGui") 
                 if tag_stopEspEvents then pcall(tag_stopEspEvents.Destroy, tag_stopEspEvents) end
             end
        end
    end
end

function toggleESP_Original() 
    espScriptEnabled = not espScriptEnabled
    espButton_toggleESP = FlingToolsOtherButtons["ESP"] 
    if espButton_toggleESP then espButton_toggleESP.Text = getText("button_esp", espScriptEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_esp"), getText(espScriptEnabled and "state_on" or "state_off"))

    if espScriptEnabled then
        startEspHeartbeatLoop()
        startEspEventListeners()
    else
        stopEspHeartbeatLoop()
        stopEspEventListeners()
    end
end

function getClosestTarget_AimbotTrack() 
    closestTarget_AimbotTrack = nil 
    shortestDistance_AimbotTrack = math.huge 
    player_AimbotTrack = game.Players.LocalPlayer 
    character_AimbotTrack = player_AimbotTrack.Character 
    if character_AimbotTrack and character_AimbotTrack:FindFirstChild("HumanoidRootPart") then
        playerPosition_AimbotTrack = character_AimbotTrack.HumanoidRootPart.Position 
        for _, enemy in ipairs(game.Players:GetPlayers()) do
            if enemy ~= player_AimbotTrack and enemy.Character and enemy.Character:FindFirstChild("HumanoidRootPart") then
                 enemyHum_AimbotTrack = enemy.Character:FindFirstChildOfClass("Humanoid") 
                 if enemyHum_AimbotTrack and enemyHum_AimbotTrack.Health > 0 then 
                    targetPosition_AimbotTrack = enemy.Character.HumanoidRootPart.Position 
                    distance_AimbotTrack = (targetPosition_AimbotTrack - playerPosition_AimbotTrack).Magnitude 
                    if distance_AimbotTrack < shortestDistance_AimbotTrack then
                        shortestDistance_AimbotTrack = distance_AimbotTrack
                        closestTarget_AimbotTrack = enemy.Character
                    end
                end
            end
        end
    end
    return closestTarget_AimbotTrack
end
function activateAimbot_Track(targetName) 
    player_activateAimbot = game.Players.LocalPlayer 
    character_activateAimbot = player_activateAimbot.Character or player_activateAimbot.CharacterAdded:Wait() 
    humanoid_activateAimbot = character_activateAimbot:WaitForChild("Humanoid") 

    if aimbotLoop and aimbotLoop.Connected then aimbotLoop:Disconnect() end

    aimbotLoop = game:GetService("RunService").Heartbeat:Connect(function() 
        if aimbotActive then
            targetCharacterModel_activateAimbot = nil 
            if targetName == "" then
                targetCharacterModel_activateAimbot = getClosestTarget_AimbotTrack()
            else
                for _, enemy in ipairs(game.Players:GetPlayers()) do
                    displayName_activateAimbot = enemy.DisplayName 
                    username_activateAimbot = enemy.Name 
                    if (displayName_activateAimbot and displayName_activateAimbot:lower():find(targetName:lower(), 1, true) or username_activateAimbot:lower():find(targetName:lower(), 1, true)) and enemy ~= player_activateAimbot then
                        targetCharacterModel_activateAimbot = enemy.Character
                        break
                    end
                end
            end

            if targetCharacterModel_activateAimbot then
                enemyHumanoid_activateAimbot = targetCharacterModel_activateAimbot:FindFirstChildOfClass("Humanoid") 
                if enemyHumanoid_activateAimbot and enemyHumanoid_activateAimbot.Health > 0 then
                    primaryPart_activateAimbot = targetCharacterModel_activateAimbot.PrimaryPart 
                    if primaryPart_activateAimbot then
                        pcall(humanoid_activateAimbot.MoveTo, humanoid_activateAimbot, primaryPart_activateAimbot.Position)
                    end
                end
            end
        else
            if aimbotLoop and aimbotLoop.Connected then aimbotLoop:Disconnect(); aimbotLoop = nil end
        end
    end)
end
function toggleAimbotTrack_Original() 
    aimbotActive = not aimbotActive
    trackButton_toggleAimbotTrack = FlingToolsOtherButtons["Track"] 
    if trackButton_toggleAimbotTrack then trackButton_toggleAimbotTrack.Text = getText("button_track", aimbotActive, "", "") end
    ShowNotification("notif_feature_state", getText("button_track"), getText(aimbotActive and "state_on" or "state_off"))

    if aimbotActive then
        targetName_toggleAimbotTrack = FlingToolsPlayerInputBox and FlingToolsPlayerInputBox.Text or "" 
        activateAimbot_Track(targetName_toggleAimbotTrack)
    else
        if aimbotLoop and aimbotLoop.Connected then aimbotLoop:Disconnect(); aimbotLoop = nil end
        myChar_toggleAimbotTrack = player.Character 
        myHum_toggleAimbotTrack = myChar_toggleAimbotTrack and myChar_toggleAimbotTrack:FindFirstChildOfClass("Humanoid") 
        myRoot_toggleAimbotTrack = myChar_toggleAimbotTrack and myChar_toggleAimbotTrack:FindFirstChild("HumanoidRootPart") 
        if myHum_toggleAimbotTrack and myRoot_toggleAimbotTrack then pcall(myHum_toggleAimbotTrack.MoveTo, myHum_toggleAimbotTrack, myRoot_toggleAimbotTrack.Position) end
    end
end

function getTargetFromName_AimbotCam(name) 
	if not slower then warn("getTargetFromName_AimbotCam: 'slower' unavailable!"); return nil end
	name = slower(name)
	for _, p_search in ipairs(Players:GetPlayers()) do
		if p_search ~= lp and p_search.Character and p_search.Character:FindFirstChild("HumanoidRootPart") then
            targetHumanoid_AimbotCam = p_search.Character:FindFirstChildOfClass("Humanoid") 
            if targetHumanoid_AimbotCam and targetHumanoid_AimbotCam.Health > 0 then 
			    if string.match(p_search.Name:lower(), name) then
				    return p_search.Character.HumanoidRootPart
                elseif p_search.DisplayName and string.match(p_search.DisplayName:lower(), name) then
                     return p_search.Character.HumanoidRootPart
                end
            end
		end
	end
	return nil
end
function getClosestTarget_AimbotCam() 
	closestTarget_closestAimbotCam = nil 
	shortestDistance_closestAimbotCam = math.huge 

	if lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
		playerPosition_closestAimbotCam = lp.Character.HumanoidRootPart.Position 
		for _, p_search in ipairs(Players:GetPlayers()) do
			if p_search ~= lp and p_search.Character and p_search.Character:FindFirstChild("HumanoidRootPart") then
                targetHumanoid_closestAimbotCam = p_search.Character:FindFirstChildOfClass("Humanoid") 
                if targetHumanoid_closestAimbotCam and targetHumanoid_closestAimbotCam.Health > 0 then
				    targetPosition_closestAimbotCam = p_search.Character.HumanoidRootPart.Position 
				    distance_closestAimbotCam = (targetPosition_closestAimbotCam - playerPosition_closestAimbotCam).Magnitude 
				    if distance_closestAimbotCam < shortestDistance_closestAimbotCam then
					    shortestDistance_closestAimbotCam = distance_closestAimbotCam
					    closestTarget_closestAimbotCam = p_search.Character.HumanoidRootPart
				    end
                end
			end
		end
	end
	return closestTarget_closestAimbotCam
end
function updateCamera_AimbotCam() 
	if aimbotEnabled then
		targetPart_updateCam = nil 
        currentTargetName_updateCam = FlingToolsPlayerInputBox and FlingToolsPlayerInputBox.Text or "" 
        if currentTargetName_updateCam ~= targetPlayerName then
            targetPlayerName = currentTargetName_updateCam
        end

		if targetPlayerName == "" then
			targetPart_updateCam = getClosestTarget_AimbotCam()
		else
			targetPart_updateCam = getTargetFromName_AimbotCam(targetPlayerName)
			if not targetPart_updateCam then
				targetPart_updateCam = getClosestTarget_AimbotCam()
			end
		end

		if targetPart_updateCam and targetPart_updateCam.Parent and targetPart_updateCam.Parent:FindFirstChildOfClass("Humanoid") and targetPart_updateCam.Parent.Humanoid.Health > 0 then 
			targetPos_updateCam = targetPart_updateCam.Position 
			characterPos_updateCam = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") and lp.Character.HumanoidRootPart.Position or Camera.CFrame.Position 
			directionToTarget_updateCam = (targetPos_updateCam - characterPos_updateCam).unit 
			cameraPosition_updateCam = characterPos_updateCam - directionToTarget_updateCam * 10 
            pcall(function() Camera.CFrame = CFrame.new(cameraPosition_updateCam, targetPart_updateCam.Position) end)
        else 
             if aimbotEnabled then toggleAimbotCamera_Original() end
		end
	end
end
function toggleAimbotCamera_Original() 
    aimbotEnabled = not aimbotEnabled
    aimButton_toggleAimbotCam = FlingToolsOtherButtons["Aimbot"] 
    if aimButton_toggleAimbotCam then aimButton_toggleAimbotCam.Text = getText("button_aimbot", aimbotEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_aimbot"), getText(aimbotEnabled and "state_on" or "state_off"))

    if aimbotCameraLoop and aimbotCameraLoop.Connected then aimbotCameraLoop:Disconnect(); aimbotCameraLoop = nil end

    if aimbotEnabled then
        targetPlayerName = FlingToolsPlayerInputBox and FlingToolsPlayerInputBox.Text or ""
        aimbotCameraLoop = RunService.RenderStepped:Connect(updateCamera_AimbotCam) 
    end
end

spectateRenderLoop = nil 
function toggleSpectate_Original() 
    isSpectating = not isSpectating
    spectateButton_toggleSpectate = FlingToolsOtherButtons["Spectate"] 

    if isSpectating then
        if not slower then warn("toggleSpectate_Original: 'slower' unavailable!"); isSpectating = false; return end
        playerName_toggleSpectate = FlingToolsPlayerInputBox and slower(FlingToolsPlayerInputBox.Text) or "" 
        targetPlayer = nil 

        for _, p_search in ipairs(game.Players:GetPlayers()) do
            if p_search ~= player then
                 if slower(p_search.Name):find("^" .. playerName_toggleSpectate) then
                     targetPlayer = p_search; break
                 elseif p_search.DisplayName and slower(p_search.DisplayName):find("^" .. playerName_toggleSpectate) then
                     targetPlayer = p_search; break
                 end
            end
        end

        if not targetPlayer then
            ShowNotification("Spectate Error: Player not found!")
            isSpectating = false
            if spectateButton_toggleSpectate then spectateButton_toggleSpectate.Text = getText("button_spectate", isSpectating, "", "") end
        else
            if spectateRenderLoop and spectateRenderLoop.Connected then spectateRenderLoop:Disconnect() end
            spectateRenderLoop = RunService.RenderStepped:Connect(function() 
                if isSpectating and targetPlayer and targetPlayer.Parent and targetPlayer.Character then
                    targetHum_toggleSpectate = targetPlayer.Character:FindFirstChildWhichIsA("Humanoid") 
                    if targetHum_toggleSpectate and targetHum_toggleSpectate.Health > 0 then
                        pcall(function() workspace.CurrentCamera.CameraSubject = targetHum_toggleSpectate end)
                    else
                        if isSpectating then toggleSpectate_Original() end 
                    end
                else
                    if isSpectating then toggleSpectate_Original() end 
                    if spectateRenderLoop and spectateRenderLoop.Connected then spectateRenderLoop:Disconnect(); spectateRenderLoop = nil end
                end
            end)
            if spectateButton_toggleSpectate then spectateButton_toggleSpectate.Text = getText("button_spectate", isSpectating, "", "") end
            ShowNotification("Spectating " .. targetPlayer.Name)
        end
    else
        if spectateRenderLoop and spectateRenderLoop.Connected then spectateRenderLoop:Disconnect(); spectateRenderLoop = nil end
        pcall(function() workspace.CurrentCamera.CameraSubject = player.Character and player.Character:FindFirstChildWhichIsA("Humanoid") end)
        targetPlayer = nil
        if spectateButton_toggleSpectate then spectateButton_toggleSpectate.Text = getText("button_spectate", isSpectating, "", "") end
        ShowNotification("Stopped spectating")
    end
end

function toggleFreeze_Original() 
    freezeButton_toggleFreeze = FlingToolsOtherButtons["Freeze"] 
	if isFrozen then
        pcall(function() if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then player.Character.HumanoidRootPart.Anchored = false end end)
		isFrozen = false
		if freezeButton_toggleFreeze then freezeButton_toggleFreeze.Text = getText("button_freeze", isFrozen, "", "") end
	else
        pcall(function() if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then player.Character.HumanoidRootPart.Anchored = true end end)
		isFrozen = true
        if freezeButton_toggleFreeze then freezeButton_toggleFreeze.Text = getText("button_freeze", isFrozen, "", "") end
	end
    ShowNotification("notif_feature_state", getText("button_freeze"), getText(isFrozen and "state_on" or "state_off"))
end

function activateScript_Car() 
    character_activateCar = game:GetService("Players").LocalPlayer.Character 
	humanoid_activateCar = character_activateCar and character_activateCar:FindFirstChildWhichIsA("Humanoid") 
    if not humanoid_activateCar then return nil end
    animateScript_activateCar = character_activateCar:FindFirstChild("Animate") 
    if not animateScript_activateCar then return nil end

	originalWalkSpeed_activateCar = humanoid_activateCar.WalkSpeed 
	originalJumpPower_activateCar = humanoid_activateCar.JumpPower 
	originalAnimations_activateCar = {} 
    originalPhysics_activateCar = {} 

    pcall(function() originalAnimations_activateCar.walk = animateScript_activateCar.walk.WalkAnim.AnimationId end)
    pcall(function() originalAnimations_activateCar.run = animateScript_activateCar.run.RunAnim.AnimationId end)
    pcall(function() originalAnimations_activateCar.fall = animateScript_activateCar.fall.FallAnim.AnimationId end)
    pcall(function() originalAnimations_activateCar.idle1 = animateScript_activateCar.idle.Animation1.AnimationId end)
    pcall(function() originalAnimations_activateCar.idle2 = animateScript_activateCar.idle.Animation2.AnimationId end)
    pcall(function() originalAnimations_activateCar.jump = animateScript_activateCar.jump.JumpAnim.AnimationId end)
    for _, part in pairs(character_activateCar:GetDescendants()) do if part:IsA("BasePart") then originalPhysics_activateCar[part] = part.CustomPhysicalProperties end end

    carPhysics_activateCar = PhysicalProperties.new(0.04, 0, 0) 
	if humanoid_activateCar.RigType == Enum.HumanoidRigType.R6 then
		humanoid_activateCar.WalkSpeed = 60
		humanoid_activateCar.JumpPower = 20
        animId_activateCar = "rbxassetid://129342287" 
		pcall(function() animateScript_activateCar.walk.WalkAnim.AnimationId = animId_activateCar end)
        pcall(function() animateScript_activateCar.run.RunAnim.AnimationId = animId_activateCar end)
        pcall(function() animateScript_activateCar.fall.FallAnim.AnimationId = animId_activateCar end)
        pcall(function() animateScript_activateCar.idle.Animation1.AnimationId = animId_activateCar end)
        pcall(function() animateScript_activateCar.idle.Animation2.AnimationId = animId_activateCar end)
        pcall(function() animateScript_activateCar.jump.JumpAnim.AnimationId = animId_activateCar end)
	elseif humanoid_activateCar.RigType == Enum.HumanoidRigType.R15 then
		humanoid_activateCar.WalkSpeed = 60
		humanoid_activateCar.JumpPower = 20
        animId_activateCar_R15 = "rbxassetid://3360694441" 
		pcall(function() animateScript_activateCar.walk.WalkAnim.AnimationId = animId_activateCar_R15 end)
        pcall(function() animateScript_activateCar.run.RunAnim.AnimationId = animId_activateCar_R15 end)
        pcall(function() animateScript_activateCar.fall.FallAnim.AnimationId = animId_activateCar_R15 end)
        pcall(function() animateScript_activateCar.idle.Animation1.AnimationId = animId_activateCar_R15 end)
        pcall(function() animateScript_activateCar.idle.Animation2.AnimationId = animId_activateCar_R15 end)
        pcall(function() animateScript_activateCar.jump.JumpAnim.AnimationId = animId_activateCar_R15 end)
	end
	for _, part in pairs(character_activateCar:GetDescendants()) do if part:IsA("BasePart") then pcall(function() part.CustomPhysicalProperties = carPhysics_activateCar end) end end

	deactivateScript_Car = function() 
        currentChar_deactivateCar = game:GetService("Players").LocalPlayer.Character 
        currentHum_deactivateCar = currentChar_deactivateCar and currentChar_deactivateCar:FindFirstChildWhichIsA("Humanoid") 
        currentAnim_deactivateCar = currentChar_deactivateCar and currentChar_deactivateCar:FindFirstChild("Animate") 
        if not currentHum_deactivateCar or not currentAnim_deactivateCar then return end

		pcall(function() currentHum_deactivateCar.WalkSpeed = originalWalkSpeed_activateCar end)
		pcall(function() currentHum_deactivateCar.JumpPower = originalJumpPower_activateCar end)
        pcall(function() if originalAnimations_activateCar.walk then currentAnim_deactivateCar.walk.WalkAnim.AnimationId = originalAnimations_activateCar.walk end end)
        pcall(function() if originalAnimations_activateCar.run then currentAnim_deactivateCar.run.RunAnim.AnimationId = originalAnimations_activateCar.run end end)
        pcall(function() if originalAnimations_activateCar.fall then currentAnim_deactivateCar.fall.FallAnim.AnimationId = originalAnimations_activateCar.fall end end)
        pcall(function() if originalAnimations_activateCar.idle1 then currentAnim_deactivateCar.idle.Animation1.AnimationId = originalAnimations_activateCar.idle1 end end)
        pcall(function() if originalAnimations_activateCar.idle2 then currentAnim_deactivateCar.idle.Animation2.AnimationId = originalAnimations_activateCar.idle2 end end)
        pcall(function() if originalAnimations_activateCar.jump then currentAnim_deactivateCar.jump.JumpAnim.AnimationId = originalAnimations_activateCar.jump end end)
		for part, props in pairs(originalPhysics_activateCar) do if part and part.Parent then pcall(function() part.CustomPhysicalProperties = props end) end end
	end
	return deactivateScript_Car
end

function toggleCarMode_Original() 
    carToggleActivated = not carToggleActivated
    carButton_toggleCarMode = FlingToolsOtherButtons["Car"] 

    if carToggleActivated then
        if carDeactivateFunc then
             pcall(carDeactivateFunc)
             carDeactivateFunc = nil
        end
        carDeactivateFunc = activateScript_Car()
        if carDeactivateFunc then
            if carButton_toggleCarMode then carButton_toggleCarMode.Text = getText("button_car", carToggleActivated, "", "") end
            ShowNotification("notif_feature_state", getText("button_car"), getText("state_on"))
        else
            carToggleActivated = false
            if carButton_toggleCarMode then carButton_toggleCarMode.Text = getText("button_car", carToggleActivated, "", "") end
            ShowNotification("notif_error_activate", getText("button_car"))
        end
    else
        if carDeactivateFunc then
            pcall(carDeactivateFunc)
            carDeactivateFunc = nil
        end
        if carButton_toggleCarMode then carButton_toggleCarMode.Text = getText("button_car", carToggleActivated, "", "") end
        ShowNotification("notif_feature_state", getText("button_car"), getText("state_off"))
    end
end


function applyKillBrickEffect() 
	if killBrickLoop then task.cancel(killBrickLoop); killBrickLoop = nil end

	if not killBrickNega then
		killBrickLoop = task.spawn(function()
			while not killBrickNega and task.wait() do 
                character_KillBrick = player.Character 
				if not character_KillBrick then break end
                humanoidRootPart_KillBrick = character_KillBrick:FindFirstChild("HumanoidRootPart") 
                if not humanoidRootPart_KillBrick then break end

                parts_KillBrick = workspace:GetPartBoundsInRadius(humanoidRootPart_KillBrick.Position, 10) 
                for _, part in ipairs(parts_KillBrick) do
                    if part and part.Parent then
					    pcall(function() part.CanTouch = killBrickNega end)
                    end
                end
				if killBrickNega then break end
			end
		end)
	end
end
function toggleKillBrick_Original() 
    killBrickNega = not killBrickNega
    killButton_toggleKillBrick = FlingToolsOtherButtons["KillBrick"] 
    if killButton_toggleKillBrick then killButton_toggleKillBrick.Text = getText("button_killbrick", not killBrickNega, "", "") end
    ShowNotification("notif_feature_state", getText("button_killbrick"), getText(not killBrickNega and "state_on" or "state_off"))
    applyKillBrickEffect()
end

function toggleNoclipSimple_Original() 
    statusLabel_NoclipSimple = FlingToolsNoclipStatusLabel 
    noclipButton_NoclipSimple = FlingToolsOtherButtons["Noclip"] 
    C3_fromRGB_local_NoclipSimple = cached_Color3_fromRGB 

    if not statusLabel_NoclipSimple then
        warn("FlingToolsNoclipStatusLabel not found!")
        ShowNotification("notif_error_status_label", getText("button_noclip"))
        return
    end

	if statusLabel_NoclipSimple.Text == "ON" then 
		noclipClipon = true
		statusLabel_NoclipSimple.Text = "OFF" 
		if typeof(C3_fromRGB_local_NoclipSimple) == "function" then statusLabel_NoclipSimple.TextColor3 = C3_fromRGB_local_NoclipSimple(170, 0, 0) end
	else
		noclipClipon = false
		statusLabel_NoclipSimple.Text = "ON" 
		if typeof(C3_fromRGB_local_NoclipSimple) == "function" then statusLabel_NoclipSimple.TextColor3 = C3_fromRGB_local_NoclipSimple(0, 185, 0) end
	end
    if noclipButton_NoclipSimple then noclipButton_NoclipSimple.Text = getText("button_noclip", not noclipClipon, "", "") end
    ShowNotification("notif_feature_state", "Simple Noclip", getText(not noclipClipon and "state_on" or "state_off")) 

    if noclipSimpleLoop and noclipSimpleLoop.Connected then noclipSimpleLoop:Disconnect(); noclipSimpleLoop = nil end

    if not noclipClipon then
        noclipSimpleLoop = game:GetService("RunService").Stepped:Connect(function() 
            if noclipClipon then
                 if noclipSimpleLoop and noclipSimpleLoop.Connected then noclipSimpleLoop:Disconnect(); noclipSimpleLoop = nil end
                 myChar_NoclipSimple = player.Character 
                 if myChar_NoclipSimple then
                     for _, part in ipairs(myChar_NoclipSimple:GetDescendants()) do if part:IsA("BasePart") then pcall(function() part.CanCollide = true end) end end
                 end
                 return
            end

	        for _, p_target in ipairs(Players:GetPlayers()) do
		        if p_target.Character then
			        character_NoclipSimple_Loop = p_target.Character 
			        for _, part in ipairs(character_NoclipSimple_Loop:GetDescendants()) do
				        if part:IsA("BasePart") then
                            pcall(function() part.CanCollide = false end)
				        end
			        end
		        end
	        end
        end)
    else
         myChar_NoclipSimple_Off = player.Character 
         if myChar_NoclipSimple_Off then
             for _, part in ipairs(myChar_NoclipSimple_Off:GetDescendants()) do if part:IsA("BasePart") then pcall(function() part.CanCollide = true end) end end
         end
    end
end

function makeTransparent_Invisible(character) 
    if not character then return end
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            pcall(function() part.LocalTransparencyModifier = invis_on and 0.5 or 0 end)
        end
    end
end
function toggleInvisible_Original() 
    invis_on = not invis_on
    invisibleButton_toggleInvisible = FlingToolsOtherButtons["Invisible"] 
    character_toggleInvisible = player.Character 

    if not character_toggleInvisible or not character_toggleInvisible:FindFirstChild("HumanoidRootPart") or not (character_toggleInvisible:FindFirstChild("Torso") or character_toggleInvisible:FindFirstChild("UpperTorso")) then
         ShowNotification("notif_error_char_missing_parts", getText("button_invisible"))
         invis_on = false; if invisibleButton_toggleInvisible then invisibleButton_toggleInvisible.Text = getText("button_invisible", invis_on, "", "") end; return
    end

    if invis_on then
        savedpos_toggleInvisible = character_toggleInvisible.HumanoidRootPart.CFrame 
        wait() 
        pcall(character_toggleInvisible.MoveTo, character_toggleInvisible, Vector3.new(-25.95, 84, 3537.55))
        wait(0.15) 

        if invisChair and invisChair.Parent then pcall(invisChair.Destroy, invisChair) end
        invisChair = Instance.new('Seat', workspace)
        invisChair.Anchored = false
        invisChair.CanCollide = false
        invisChair.Name = 'invischair_' .. player.UserId 
        invisChair.Transparency = 1
        pcall(function() invisChair.Position = Vector3.new(-25.95, 84, 3537.55) end)

        Weld_toggleInvisible = Instance.new("Weld", invisChair) 
        Weld_toggleInvisible.Part0 = invisChair
        Weld_toggleInvisible.Part1 = character_toggleInvisible:FindFirstChild("Torso") or character_toggleInvisible:FindFirstChild("UpperTorso")
        wait() 

        pcall(function() invisChair.CFrame = savedpos_toggleInvisible end)
        if invisibleButton_toggleInvisible then invisibleButton_toggleInvisible.Text = getText("button_invisible", invis_on, "", "") end
    else
        foundChair_toggleInvisible = workspace:FindFirstChild('invischair_' .. player.UserId) 
        if foundChair_toggleInvisible then pcall(foundChair_toggleInvisible.Destroy, foundChair_toggleInvisible) end
        invisChair = nil
        if invisibleButton_toggleInvisible then invisibleButton_toggleInvisible.Text = getText("button_invisible", invis_on, "", "") end
    end
    makeTransparent_Invisible(character_toggleInvisible)
    ShowNotification("notif_feature_state", getText("button_invisible"), getText(invis_on and "state_on" or "state_off"))
end


function toggleShiftLock_Original() 
    slButton_toggleShiftLock = FlingToolsOtherButtons["ShiftLock"] 
    MaxLength_toggleShiftLock = 900000 
    EnabledOffset_toggleShiftLock = CFrame.new(1.7, 0, 0) 
    DisabledOffset_toggleShiftLock = CFrame.new(-1.7, 0, 0) 
    currentlyActive_toggleShiftLock = ShiftLockActive and ShiftLockActive.Connected 

    if currentlyActive_toggleShiftLock then
        pcall(ShiftLockActive.Disconnect, ShiftLockActive)
        ShiftLockActive = nil
        hum_toggleShiftLock = player.Character and player.Character:FindFirstChildOfClass("Humanoid") 
        if hum_toggleShiftLock then pcall(function() hum_toggleShiftLock.AutoRotate = true end) end
        pcall(function() workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame * DisabledOffset_toggleShiftLock end)
        if slButton_toggleShiftLock then slButton_toggleShiftLock.Text = getText("button_shiftlock", false, "", "") end
        ShowNotification("notif_feature_state", getText("button_shiftlock"), getText("state_off"))
    else
        if ShiftLockActive and not ShiftLockActive.Connected then ShiftLockActive = nil end

        ShiftLockActive = RunService.RenderStepped:Connect(function() 
            Character_ShiftLockLoop = player.Character 
            Humanoid_ShiftLockLoop = Character_ShiftLockLoop and Character_ShiftLockLoop:FindFirstChildOfClass("Humanoid") 
            RootPart_ShiftLockLoop = Humanoid_ShiftLockLoop and Humanoid_ShiftLockLoop.RootPart 
            CurrentCamera_ShiftLockLoop = workspace.CurrentCamera 

            if not Humanoid_ShiftLockLoop or not RootPart_ShiftLockLoop or Humanoid_ShiftLockLoop.Health <= 0 then
                if ShiftLockActive and ShiftLockActive.Connected then toggleShiftLock_Original() end 
                return
            end

            pcall(function() Humanoid_ShiftLockLoop.AutoRotate = false end)

            pcall(function()
                RootPart_ShiftLockLoop.CFrame = CFrame.new(
                    RootPart_ShiftLockLoop.Position,
                    Vector3.new(
                        CurrentCamera_ShiftLockLoop.CFrame.LookVector.X * MaxLength_toggleShiftLock,
                        RootPart_ShiftLockLoop.Position.Y,
                        CurrentCamera_ShiftLockLoop.CFrame.LookVector.Z * MaxLength_toggleShiftLock
                    )
                )
                CurrentCamera_ShiftLockLoop.CFrame = CurrentCamera_ShiftLockLoop.CFrame * EnabledOffset_toggleShiftLock
                if typeof(CurrentCamera_ShiftLockLoop.Focus) == "CFrame" then 
                    CurrentCamera_ShiftLockLoop.Focus = CFrame.fromMatrix( CurrentCamera_ShiftLockLoop.Focus.Position, CurrentCamera_ShiftLockLoop.CFrame.RightVector, CurrentCamera_ShiftLockLoop.CFrame.UpVector ) * EnabledOffset_toggleShiftLock
                end
            end)
        end)
        if slButton_toggleShiftLock then slButton_toggleShiftLock.Text = getText("button_shiftlock", true, "", "") end
        ShowNotification("notif_feature_state", getText("button_shiftlock"), getText("state_on"))
    end
end

rotate_radius = 10 
rotate_speed = 5 
function findPlayer_Rotate(name) 
    if not slower then warn("findPlayer_Rotate: 'slower' unavailable!"); return nil end
    name = slower(name)
    for _, p_search in pairs(Players:GetPlayers()) do
        if p_search ~= player then
            if slower(p_search.Name):sub(1, #name) == name then
                return p_search
            elseif p_search.DisplayName and slower(p_search.DisplayName):sub(1, #name) == name then
                return p_search
            end
        end
    end
    return nil
end
function toggleRotatePlayer_Original() 
    rotating = not rotating
    rotateButton_toggleRotate = FlingToolsOtherButtons["Rotate"] 

    if rotating then
        targetName_toggleRotate = FlingToolsPlayerInputBox and FlingToolsPlayerInputBox.Text or "" 
        targetPlayer = findPlayer_Rotate(targetName_toggleRotate) 

        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
             if rotateButton_toggleRotate then rotateButton_toggleRotate.Text = getText("button_rotate", rotating, "", "") end
             ShowNotification("Rotating around " .. targetPlayer.Name)
             if rotateLoop and rotateLoop.Connected then rotateLoop:Disconnect(); rotateLoop = nil end

             rad_toggleRotate = math.rad 
             deg_toggleRotate = math.deg 
             cos_toggleRotate = math.cos 
             sin_toggleRotate = math.sin 
             rotateLoop = RunService.RenderStepped:Connect(function(deltaTime) 
                if not rotating or not targetPlayer or not targetPlayer.Parent or not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    if rotateLoop and rotateLoop.Connected then rotateLoop:Disconnect(); rotateLoop = nil end
                    rotating = false
                    if rotateButton_toggleRotate then rotateButton_toggleRotate.Text = getText("button_rotate", rotating, "", "") end
                    targetPlayer = nil
                    return
                end

                targetPosition_RotateLoop = targetPlayer.Character.HumanoidRootPart.Position 
                angle_RotateLoop = tick() * rotate_speed 
                newPosition_RotateLoop = Vector3.new( 
                    targetPosition_RotateLoop.X + cos_toggleRotate(angle_RotateLoop) * rotate_radius,
                    targetPosition_RotateLoop.Y + 2, 
                    targetPosition_RotateLoop.Z + sin_toggleRotate(angle_RotateLoop) * rotate_radius
                )
                myChar_RotateLoop = player.Character 
                if myChar_RotateLoop and myChar_RotateLoop:FindFirstChild("HumanoidRootPart") then
                     myChar_RotateLoop.HumanoidRootPart.CFrame = CFrame.new(newPosition_RotateLoop) * CFrame.Angles(0, rad_toggleRotate(90 + deg_toggleRotate(-angle_RotateLoop)), 0) 
                else
                     if rotating then toggleRotatePlayer_Original() end 
                end
             end)
        else
            rotating = false
            targetPlayer = nil
            ShowNotification("Rotate Error: Player not found or invalid.")
            if rotateButton_toggleRotate then rotateButton_toggleRotate.Text = getText("button_rotate", rotating, "", "") end
        end
    else
        if rotateButton_toggleRotate then rotateButton_toggleRotate.Text = getText("button_rotate", rotating, "", "") end
        ShowNotification("Stopped Rotating")
        if rotateLoop and rotateLoop.Connected then rotateLoop:Disconnect(); rotateLoop = nil end
        targetPlayer = nil
    end
end

spamTpTargetPlayer = nil 
function teleportLoop_SpamTP() 
	while isToggleActive do
		humanoid_SpamTP = player.Character and player.Character:FindFirstChildOfClass("Humanoid") 
		if humanoid_SpamTP then
			targetChar_SpamTP = spamTpTargetPlayer and spamTpTargetPlayer.Character 
            targetHumanoid_SpamTP = targetChar_SpamTP and targetChar_SpamTP:FindFirstChildOfClass("Humanoid") 
			if targetHumanoid_SpamTP and targetHumanoid_SpamTP.Health > 0 then 
				torso_SpamTP = targetChar_SpamTP:FindFirstChild("HumanoidRootPart") 
				if torso_SpamTP then
					offset_SpamTP = Vector3.new(0, 3, 0) 
					pcall(humanoid_SpamTP.Parent.SetPrimaryPartCFrame, humanoid_SpamTP.Parent, torso_SpamTP.CFrame * CFrame.new(offset_SpamTP))
					pcall(function() humanoid_SpamTP.Sit = true end)
					wait(0.0001) 
				else
                    ShowNotification("notif_spamtp_error_noroot")
                    toggleSpamTp_Original() 
                    break
				end
			else
                ShowNotification("notif_spamtp_error_invalid")
                toggleSpamTp_Original() 
                break
			end
		else
            ShowNotification("notif_spamtp_error_nochar")
            toggleSpamTp_Original() 
            break
		end
		if not isToggleActive then break end
	end
    currentHum_SpamTP_End = player.Character and player.Character:FindFirstChildOfClass("Humanoid") 
    if currentHum_SpamTP_End then pcall(function() currentHum_SpamTP_End.Sit = false end) end
    spamTpTargetPlayer = nil
end
function toggleSpamTp_Original() 
    spamButton_toggleSpamTp = FlingToolsOtherButtons["SpamTP"] 
    playerName_toggleSpamTp = FlingToolsPlayerInputBox and FlingToolsPlayerInputBox.Text or "" 

	if not isToggleActive and playerName_toggleSpamTp == "" then
        ShowNotification("notif_spamtp_error_noname")
		return
	end

    if not isToggleActive then
        if not slower then warn("toggleSpamTp_Original: 'slower' unavailable!"); return end
        playerNameLower_toggleSpamTp = slower(playerName_toggleSpamTp) 
        spamTpTargetPlayer = nil
        for _, p_search in ipairs(game.Players:GetPlayers()) do
            if p_search ~= player then
                if slower(p_search.Name):find(playerNameLower_toggleSpamTp, 1, true) then spamTpTargetPlayer = p_search; break end
                if p_search.DisplayName and slower(p_search.DisplayName):find(playerNameLower_toggleSpamTp, 1, true) then spamTpTargetPlayer = p_search; break end
            end
        end
        if not spamTpTargetPlayer then
            ShowNotification("notif_spamtp_error_noplayer")
            return
        end
    end

	isToggleActive = not isToggleActive

	if isToggleActive then
        if spamButton_toggleSpamTp then spamButton_toggleSpamTp.Text = getText("button_spamtp", isToggleActive, "", "") end
        ShowNotification("notif_spamtp_started", spamTpTargetPlayer.Name)

        if spamTpLoop then task.cancel(spamTpLoop); spamTpLoop = nil end
		spamTpLoop = spawn(teleportLoop_SpamTP) 

	else
        if spamButton_toggleSpamTp then spamButton_toggleSpamTp.Text = getText("button_spamtp", isToggleActive, "", "") end
        ShowNotification("notif_spamtp_stopped")
		if spamTpLoop then task.cancel(spamTpLoop); spamTpLoop = nil end
	end
end

function teleportToAllPlayersContinuously() 
    if teleportAllLoop then task.cancel(teleportAllLoop); teleportAllLoop = nil end

    teleportAllLoop = task.spawn(function()
	    while true do
		    if teleportAllEnabled then
			    playersList_TpAll = game.Players:GetPlayers() 
			    for _, p_target in ipairs(playersList_TpAll) do
                    if not teleportAllEnabled then break end

				    if p_target ~= player and p_target.Character and p_target.Character.PrimaryPart and p_target.Character:FindFirstChildOfClass("Humanoid") and p_target.Character.Humanoid.Health > 0 then
                        myChar_TpAll = player.Character 
                        if myChar_TpAll then
					        pcall(myChar_TpAll.SetPrimaryPartCFrame, myChar_TpAll, p_target.Character.PrimaryPart.CFrame * CFrame.new(0,3,0)) 
					        wait(waitTime) 
                        else
                            ShowNotification("notif_tpall_char_lost")
                            toggleTeleportAll_Original() 
                            break
                        end
                    else
                         wait() 
                    end
				end
                if not teleportAllEnabled then break end
			    wait() 
            else
		        wait(0.5) 
            end
            if not teleportAllEnabled then break end
	    end
        tpAllButton_TpAll_End = FlingToolsOtherButtons["TpAll"] 
        if tpAllButton_TpAll_End then tpAllButton_TpAll_End.Text = getText("button_tpall", false, "", "") end
    end)
end
function toggleTeleportAll_Original() 
    teleportAllEnabled = not teleportAllEnabled
    tpAllButton_toggleTpAll = FlingToolsOtherButtons["TpAll"] 
    if tpAllButton_toggleTpAll then tpAllButton_toggleTpAll.Text = getText("button_tpall", teleportAllEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_tpall"), getText(teleportAllEnabled and "state_on" or "state_off"))
    if teleportAllEnabled then
        teleportToAllPlayersContinuously()
    else
         if teleportAllLoop then task.cancel(teleportAllLoop); teleportAllLoop = nil end
    end
end

TeleportBehindTarget_Original = function() 
    targetToTp_TPBehind = target 
    if not targetToTp_TPBehind then ShowNotification("notif_error_tpbehind_notarget"); return end
    targetRoot_TPBehind = targetToTp_TPBehind.Character and targetToTp_TPBehind.Character:FindFirstChild("HumanoidRootPart") 
    if not targetRoot_TPBehind then ShowNotification("notif_error_tpbehind_noroot"); return end
    myRoot_TPBehind = player.Character and player.Character:FindFirstChild("HumanoidRootPart") 
    if not myRoot_TPBehind then ShowNotification("notif_error_humanoid_rootpart"); return end

    offset_TPBehind = targetRoot_TPBehind.CFrame.LookVector * -5 
    targetPos_TPBehind = targetRoot_TPBehind.Position + offset_TPBehind + Vector3.new(0, 0.5, 0) 
    pcall(myRoot_TPBehind.SetNetworkOwner, myRoot_TPBehind, player)
    myRoot_TPBehind.CFrame = CFrame.new(targetPos_TPBehind, targetRoot_TPBehind.Position) 
    ShowNotification("notif_tpbehind_success", targetToTp_TPBehind.Name)
end

function toggleInfiniteJump_Original() 
    infiniteJumpEnabled = not infiniteJumpEnabled
    ijButton_toggleInfJump = MainFrame and MainFrame:FindFirstChild("InfiniteJumpButton", true) 
    woaButton_toggleInfJump = FlingToolsOtherButtons["WalkOnAir"] 
    if ijButton_toggleInfJump then ijButton_toggleInfJump.Text = getText("button_infjump", infiniteJumpEnabled, "", "") end
    if woaButton_toggleInfJump then woaButton_toggleInfJump.Text = getText("button_walkonair", walkOnAirEnabled, "", "") end 
    ShowNotification("notif_feature_state", getText("button_infjump"), getText(infiniteJumpEnabled and "state_on" or "state_off"))

    if infiniteJumpConn and infiniteJumpConn.Connected then infiniteJumpConn:Disconnect(); infiniteJumpConn = nil end

    if infiniteJumpEnabled then
        infiniteJumpConn = UserInputService.JumpRequest:Connect(function()
             char_InfJump = player.Character 
             hum_InfJump = char_InfJump and char_InfJump:FindFirstChildOfClass("Humanoid") 
             if hum_InfJump and infiniteJumpEnabled then 
                 pcall(hum_InfJump.ChangeState, hum_InfJump, Enum.HumanoidStateType.Jumping)
                 if walkOnAirEnabled then
                      root_InfJump = char_InfJump:FindFirstChild("HumanoidRootPart") 
                      if root_InfJump then
                           pcall(function() root_InfJump.Velocity = root_InfJump.Velocity + Vector3.new(0, 15, 0) end) 
                           task.wait(0.1)
                           pcall(function() root_InfJump.Velocity = Vector3.new(root_InfJump.Velocity.X, 0, root_InfJump.Velocity.Z) end) 
                      end
                 end
             end
        end)
    end
end

function toggleWalkOnAir_Original() 
    if not infiniteJumpEnabled then
        ShowNotification("notif_walkonair_requires_infairjump")
        return
    end
    walkOnAirEnabled = not walkOnAirEnabled
    woaButton_toggleWalkOnAir = FlingToolsOtherButtons["WalkOnAir"] 
    if woaButton_toggleWalkOnAir then woaButton_toggleWalkOnAir.Text = getText("button_walkonair", walkOnAirEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_walkonair"), getText(walkOnAirEnabled and "state_on" or "state_off"))
end


function toggleWalkOnWater_Original() 
    walkOnWaterEnabled = not walkOnWaterEnabled
    wowButton_toggleWoW = MainFrame and MainFrame:FindFirstChild("WalkOnWaterButton", true) 
    if wowButton_toggleWoW then wowButton_toggleWoW.Text = getText("button_walkwater", walkOnWaterEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_walkwater"), getText(walkOnWaterEnabled and "state_on" or "state_off"))

    if walkOnWaterLoop then task.cancel(walkOnWaterLoop); walkOnWaterLoop = nil end
    if walkOnWaterPart and walkOnWaterPart.Parent then walkOnWaterPart:Destroy(); walkOnWaterPart = nil end

    if walkOnWaterEnabled then
        walkOnWaterLoop = task.spawn(function()
            while walkOnWaterEnabled do
                char_WoW = player.Character 
                root_WoW = char_WoW and char_WoW:FindFirstChild("HumanoidRootPart") 
                hum_WoW = char_WoW and char_WoW:FindFirstChildOfClass("Humanoid") 
                if root_WoW and hum_WoW and hum_WoW.Health > 0 then
                    rayOrigin_WoW = root_WoW.Position 
                    rayDirection_WoW = Vector3.new(0, -20, 0) 
                    rayParams_WoW = RaycastParams.new() 
                    rayParams_WoW.FilterType = Enum.RaycastFilterType.Exclude
                    rayParams_WoW.FilterDescendantsInstances = {char_WoW, walkOnWaterPart} 
                    rayResult_WoW = workspace:Raycast(rayOrigin_WoW, rayDirection_WoW, rayParams_WoW) 

                    terrain_WoW = game.Workspace.Terrain 
                    waterLevel_WoW = -math.huge 
                    pcall(function() 
                        waterLevel_WoW = terrain_WoW:GetWaterCell(math.floor(root_WoW.Position.X), math.floor(root_WoW.Position.Y), math.floor(root_WoW.Position.Z)).Position.Y
                    end)


                    if waterLevel_WoW > -1000 and root_WoW.Position.Y < (waterLevel_WoW + 3) then 
                        if not walkOnWaterPart then
                             walkOnWaterPart = Instance.new("Part")
                             walkOnWaterPart.Name = "WaterWalkPart_" .. player.UserId
                             walkOnWaterPart.Size = Vector3.new(6, 0.5, 6)
                             walkOnWaterPart.Anchored = false 
                             walkOnWaterPart.CanCollide = true
                             walkOnWaterPart.Transparency = 0.8 
                             walkOnWaterPart.Color = Color3.fromRGB(100, 150, 255)
                             walkOnWaterPart.Material = Enum.Material.Plastic
                             walkOnWaterPart.TopSurface = Enum.SurfaceType.Smooth
                             walkOnWaterPart.BottomSurface = Enum.SurfaceType.Smooth
                             walkOnWaterPart.Parent = workspace
                             weld_WoW = Instance.new("WeldConstraint") 
                             weld_WoW.Part0 = root_WoW
                             weld_WoW.Part1 = walkOnWaterPart
                             weld_WoW.Parent = walkOnWaterPart
                        end
                        walkOnWaterPart.CFrame = CFrame.new(root_WoW.Position.X, waterLevel_WoW + 1.5, root_WoW.Position.Z) 
                    else
                        if walkOnWaterPart and walkOnWaterPart.Parent then
                            walkOnWaterPart:Destroy()
                            walkOnWaterPart = nil
                        end
                    end
                else
                     if walkOnWaterPart and walkOnWaterPart.Parent then walkOnWaterPart:Destroy(); walkOnWaterPart = nil end
                     if not char_WoW or not root_WoW or not hum_WoW or hum_WoW.Health <= 0 then break end 
                end
                if not walkOnWaterEnabled then break end
                task.wait(0.1)
            end
            if walkOnWaterPart and walkOnWaterPart.Parent then walkOnWaterPart:Destroy(); walkOnWaterPart = nil end
        end)
    end
end

function toggleTpToMouse_Original() 
    tpToMouseEnabled = not tpToMouseEnabled
    tptmButton_toggleTpToMouse = FlingToolsOtherButtons["TPToMouse"] 
    if tptmButton_toggleTpToMouse then tptmButton_toggleTpToMouse.Text = getText("button_tpmouse", tpToMouseEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_tpmouse") .. " (Ctrl+Click)", getText(tpToMouseEnabled and "state_on" or "state_off"))

    if tpToMouseEnabled then
        if tpToMouseConn and tpToMouseConn.Connected then tpToMouseConn:Disconnect() end
        tpToMouseConn = mouse.Button1Down:Connect(function()
            if tpToMouseEnabled and UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then 
                targetPos_TpToMouse = mouse.Hit.Position 
                myChar_TpToMouse = player.Character 
                root_TpToMouse = myChar_TpToMouse and myChar_TpToMouse:FindFirstChild("HumanoidRootPart") 
                if root_TpToMouse then
                    pcall(function() root_TpToMouse.CFrame = CFrame.new(targetPos_TpToMouse + Vector3.new(0, 3, 0)) end)
                    pcall(function() root_TpToMouse.Velocity = Vector3.new(0,0,0) end) 
                    pcall(function() root_TpToMouse.RotVelocity = Vector3.new(0,0,0) end)
                end
            end
        end)
    else
        if tpToMouseConn and tpToMouseConn.Connected then tpToMouseConn:Disconnect(); tpToMouseConn = nil end
    end
end

ApplyFullBrightnessSlider_Original = function(value) 
    fullBrightEnabled = (value > 0.1) 
    fbButtonG_ApplyFullBright = FlingToolsOtherButtons["FullBrightGraphics"] 
    if fbButtonG_ApplyFullBright then fbButtonG_ApplyFullBright.Text = getText("button_fullbright", fullBrightEnabled, "", "") end 

    pcall(function() Lighting.Brightness = value end)
    ambientVal_ApplyFullBright = math.clamp(128 + (value * 25), 128, 255) 
    pcall(function() Lighting.Ambient = Color3.fromRGB(ambientVal_ApplyFullBright, ambientVal_ApplyFullBright, ambientVal_ApplyFullBright) end)
    pcall(function() Lighting.OutdoorAmbient = Color3.fromRGB(ambientVal_ApplyFullBright, ambientVal_ApplyFullBright, ambientVal_ApplyFullBright) end)
    colorShiftVal_ApplyFullBright = math.clamp(value * 128, 0, 255) 
    pcall(function() Lighting.ColorShift_Top = Color3.fromRGB(colorShiftVal_ApplyFullBright, colorShiftVal_ApplyFullBright, colorShiftVal_ApplyFullBright) end)
    pcall(function() Lighting.ColorShift_Bottom = Color3.fromRGB(colorShiftVal_ApplyFullBright, colorShiftVal_ApplyFullBright, colorShiftVal_ApplyFullBright) end)
end

function toggleFullBright_Original() 
    brightnessSlider_toggleFullBright = MainFrame and MainFrame:FindFirstChild("BrightnessSlider", true) 
    if not brightnessSlider_toggleFullBright then return end 

    bar_toggleFullBright = brightnessSlider_toggleFullBright:FindFirstChild("Bar") 
    valueLabel_toggleFullBright = MainFrame:FindFirstChild("BrightnessValue", true) 

    if fullBrightEnabled then 
        fullBrightEnabled = false
        ApplyFullBrightnessSlider_Original(2) 
        if bar_toggleFullBright then bar_toggleFullBright.Size = UDim2.new((2 - 0) / (5 - 0), 0, 1, 0) end
        if valueLabel_toggleFullBright then valueLabel_toggleFullBright.Text = "2.0" end
    else 
        fullBrightEnabled = true
        ApplyFullBrightnessSlider_Original(5) 
        if bar_toggleFullBright then bar_toggleFullBright.Size = UDim2.new(1, 0, 1, 0) end
        if valueLabel_toggleFullBright then valueLabel_toggleFullBright.Text = "5.0" end
    end
    fbButtonG_toggleFullBright = FlingToolsOtherButtons["FullBrightGraphics"] 
    if fbButtonG_toggleFullBright then fbButtonG_toggleFullBright.Text = getText("button_fullbright", fullBrightEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_fullbright"), getText(fullBrightEnabled and "state_on" or "state_off"))
end


function toggleRemoveFog_Original() 
    removeFogEnabled = not removeFogEnabled
    rfButton_toggleRemFog = MainFrame and MainFrame:FindFirstChild("RemoveFogButton", true) 
    if rfButton_toggleRemFog then rfButton_toggleRemFog.Text = getText("button_remfog", removeFogEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_remfog"), getText(removeFogEnabled and "state_on" or "state_off"))

    if removeFogEnabled then
        if originalFogEnd == Lighting.FogEnd then originalFogEnd = Lighting.FogEnd end
        if originalFogStart == Lighting.FogStart then originalFogStart = Lighting.FogStart end
        pcall(function() Lighting.FogEnd = 100000 end)
        pcall(function() Lighting.FogStart = 99000 end)
    else
        pcall(function() Lighting.FogEnd = originalFogEnd end)
        pcall(function() Lighting.FogStart = originalFogStart end)
    end
    if removeFogEnabled and removeFogV2Enabled then toggleRemoveFogV2_Original() end
    if removeFogEnabled and coloredFogEnabled then toggleColoredFog_Original() end 
end

function toggleRemoveFogV2_Original() 
    removeFogV2Enabled = not removeFogV2Enabled
    rf2Button_toggleRemFogV2 = MainFrame and MainFrame:FindFirstChild("RemoveFogV2Button", true) 
    if rf2Button_toggleRemFogV2 then rf2Button_toggleRemFogV2.Text = getText("button_remfogv2", removeFogV2Enabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_remfogv2"), getText(removeFogV2Enabled and "state_on" or "state_off"))

    if removeFogV2Enabled then
        if originalFogEnd == Lighting.FogEnd then originalFogEnd = Lighting.FogEnd end
        if originalFogStart == Lighting.FogStart then originalFogStart = Lighting.FogStart end
        if originalFogColor == Lighting.FogColor then originalFogColor = Lighting.FogColor end
        pcall(function() Lighting.FogEnd = 10000 end)
        pcall(function() Lighting.FogStart = 0 end)
        pcall(function() Lighting.FogColor = Color3.fromRGB(192, 192, 192) end) 
    else
        pcall(function() Lighting.FogEnd = originalFogEnd end)
        pcall(function() Lighting.FogStart = originalFogStart end)
        pcall(function() Lighting.FogColor = originalFogColor end)
    end
    if removeFogV2Enabled and removeFogEnabled then toggleRemoveFog_Original() end
    if removeFogV2Enabled and coloredFogEnabled then toggleColoredFog_Original() end 
end


function toggleInstantRespawn_Original() 
    instantRespawnEnabled = not instantRespawnEnabled
    irButton_toggleInstaRespawn = MainFrame and MainFrame:FindFirstChild("InstantRespawnButton", true) 
    if irButton_toggleInstaRespawn then irButton_toggleInstaRespawn.Text = getText("button_instaspawn", instantRespawnEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_instaspawn"), getText(instantRespawnEnabled and "state_on" or "state_off") .. " (Game Dependent)")

    if instantRespawnConn and instantRespawnConn.Connected then instantRespawnConn:Disconnect(); instantRespawnConn = nil end

    connectDied_InstantRespawn = function(character) 
        hum_InstantRespawn = character and character:FindFirstChildOfClass("Humanoid") 
        if hum_InstantRespawn then
            if hum_InstantRespawn:FindFirstChild("InstantRespawnDiedConn") then return end
            diedConn_InstantRespawn = hum_InstantRespawn.Died:Connect(function() 
                if instantRespawnEnabled then
                    task.wait(0.05)
                    success_InstantRespawn, err_InstantRespawn = pcall(player.LoadCharacter, player) 
                    if not success_InstantRespawn then ShowNotification("Instant Respawn Failed: %s", tostring(err_InstantRespawn)) end
                end
            end)
            tag_InstantRespawn = Instance.new("BoolValue", hum_InstantRespawn); tag_InstantRespawn.Name = "InstantRespawnDiedConn" 
        end
    end

    if instantRespawnEnabled then
        instantRespawnConn = player.CharacterAdded:Connect(connectDied_InstantRespawn)
        if player.Character then connectDied_InstantRespawn(player.Character) end
    else
        if instantRespawnConn and instantRespawnConn.Connected then instantRespawnConn:Disconnect(); instantRespawnConn = nil end
        currentChar_InstantRespawn = player.Character 
        currentHum_InstantRespawn = currentChar_InstantRespawn and currentChar_InstantRespawn:FindFirstChildOfClass("Humanoid") 
        if currentHum_InstantRespawn then
            tag_InstantRespawn_Off = currentHum_InstantRespawn:FindFirstChild("InstantRespawnDiedConn") 
            if tag_InstantRespawn_Off then tag_InstantRespawn_Off:Destroy() end
        end
    end
end

function toggleAntiAfk_Original() 
    antiAfkEnabled = not antiAfkEnabled
    afkButton_toggleAntiAfk = FlingToolsOtherButtons["AntiAfk"] 
    if afkButton_toggleAntiAfk then afkButton_toggleAntiAfk.Text = getText("button_antiafk", antiAfkEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_antiafk"), getText(antiAfkEnabled and "state_on" or "state_off"))

    if antiAfkLoop then task.cancel(antiAfkLoop); antiAfkLoop = nil end

    if antiAfkEnabled then
        antiAfkLoop = task.spawn(function()
            lastInputTime_AntiAfk = UserInputService:GetLastInputTime() 
            while antiAfkEnabled do
                if os.time() - lastInputTime_AntiAfk > 240 then 
                    char_AntiAfk = player.Character 
                    hum_AntiAfk = char_AntiAfk and char_AntiAfk:FindFirstChildOfClass("Humanoid") 
                    if hum_AntiAfk and hum_AntiAfk.Health > 0 then
                        pcall(hum_AntiAfk.ChangeState, hum_AntiAfk, Enum.HumanoidStateType.Jumping)
                        task.wait(0.2)
                        pcall(hum_AntiAfk.Move, hum_AntiAfk, Vector3.new(0.1, 0, 0))
                        task.wait(0.2)
                        pcall(hum_AntiAfk.Move, hum_AntiAfk, Vector3.new(0, 0, 0))
                         ShowNotification("Anti-AFK action performed.") 
                        lastInputTime_AntiAfk = os.time()
                    else
                        lastInputTime_AntiAfk = os.time()
                    end
                end
                if not antiAfkEnabled then break end
                task.wait(30)
            end
        end)
    end
end

function toggleGodMode_Original() 
    godModeEnabled = not godModeEnabled
    gmButton_toggleGodMode = MainFrame and MainFrame:FindFirstChild("GodModeButton", true) 
    if gmButton_toggleGodMode then gmButton_toggleGodMode.Text = getText("button_godmode", godModeEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_godmode"), getText(godModeEnabled and "state_on" or "state_off") .. " (Likely Patched)")

    if godModeLoop then task.cancel(godModeLoop); godModeLoop = nil end

    if godModeEnabled then
        godModeLoop = task.spawn(function()
            while godModeEnabled do
                char_GodMode = player.Character 
                hum_GodMode = char_GodMode and char_GodMode:FindFirstChildOfClass("Humanoid") 
                if hum_GodMode then
                    pcall(function() hum_GodMode.MaxHealth = math.huge end)
                    pcall(function() hum_GodMode.Health = math.huge end)
                else
                    break
                end
                if not godModeEnabled then break end
                task.wait(0.5)
            end
            char_GodMode_Off = player.Character 
            hum_GodMode_Off = char_GodMode_Off and char_GodMode_Off:FindFirstChildOfClass("Humanoid") 
            if hum_GodMode_Off then
                 pcall(function() hum_GodMode_Off.MaxHealth = 100 end)
                 pcall(function() hum_GodMode_Off.Health = 100 end)
            end
        end)
    end
end

function toggleInfiniteStamina_Original() 
    infiniteStaminaEnabled = not infiniteStaminaEnabled
    isButton_toggleInfStam = MainFrame and MainFrame:FindFirstChild("InfiniteStaminaButton", true) 
    if isButton_toggleInfStam then isButton_toggleInfStam.Text = getText("button_infstamina", infiniteStaminaEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_infstamina"), getText(infiniteStaminaEnabled and "state_on" or "state_off") .. " (Game Dependent)")

    if infiniteStaminaLoop then task.cancel(infiniteStaminaLoop); infiniteStaminaLoop = nil end

    if infiniteStaminaEnabled then
        infiniteStaminaLoop = task.spawn(function()
            while infiniteStaminaEnabled do
                char_InfStam = player.Character 
                hum_InfStam = char_InfStam and char_InfStam:FindFirstChildOfClass("Humanoid") 
                if hum_InfStam then
                    pcall(function() hum_InfStam:SetAttribute("Stamina", 100) end)
                    pcall(function() if hum_InfStam:FindFirstChild("Stamina") and hum_InfStam:FindFirstChild("MaxStamina") then hum_InfStam.Stamina.Value = hum_InfStam.MaxStamina.Value end end)
                else
                    break
                end
                if not infiniteStaminaEnabled then break end
                task.wait(0.2)
            end
        end)
    end
end

function togglePhase_Original() 
    phaseEnabled = not phaseEnabled
    phaseButton_togglePhase = MainFrame and MainFrame:FindFirstChild("PhaseButton", true) 
    if phaseButton_togglePhase then phaseButton_togglePhase.Text = getText("button_phase", phaseEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_phase"), getText(phaseEnabled and "state_on" or "state_off") .. " (Walk through players)")

    if phaseLoop then task.cancel(phaseLoop); phaseLoop = nil end

    if phaseEnabled then
        phaseLoop = task.spawn(function()
            while phaseEnabled do
                char_Phase = player.Character 
                if char_Phase then
                    for _, part in ipairs(char_Phase:GetDescendants()) do
                        if part:IsA("BasePart") then
                            pcall(function() part.CollisionGroup = "Phase" end)
                        end
                    end
                else break end
                if not phaseEnabled then break end
                task.wait(0.5)
            end
             char_Phase_Off = player.Character 
             if char_Phase_Off then
                 for _, part in ipairs(char_Phase_Off:GetDescendants()) do
                     if part:IsA("BasePart") then
                          pcall(function() part.CollisionGroup = "Default" end)
                     end
                 end
             end
        end)
        pcall(function()
            if not PhysicsService then PhysicsService = game:GetService("PhysicsService") end
            groupExists_Phase = false 
            groups_Phase = PhysicsService:GetCollisionGroups() 
            for _, groupInfo in ipairs(groups_Phase) do
                 if groupInfo.name == "Phase" then groupExists_Phase = true; break end
            end
            if not groupExists_Phase then
                 PhysicsService:CreateCollisionGroup("Phase")
                 PhysicsService:CollisionGroupSetCollidable("Phase", "Default", false)
                 PhysicsService:CollisionGroupSetCollidable("Phase", "Phase", false)
            else 
                 PhysicsService:CollisionGroupSetCollidable("Phase", "Default", false)
                 PhysicsService:CollisionGroupSetCollidable("Phase", "Phase", false)
            end
        end)
    end
end

function toggleChatSpam_Original() 
    chatSpamEnabled = not chatSpamEnabled
    csButton_toggleChatSpam = MainFrame and MainFrame:FindFirstChild("ChatSpamButton", true) 
    if csButton_toggleChatSpam then csButton_toggleChatSpam.Text = getText("button_spam", chatSpamEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_spam"), getText(chatSpamEnabled and "state_on" or "state_off"))

    if chatSpamLoop then task.cancel(chatSpamLoop); chatSpamLoop = nil end

    if chatSpamEnabled then
        if chatSpamText == "" then
            ShowNotification("Chat Spam Error: Enter text first!") 
            chatSpamEnabled = false
            if csButton_toggleChatSpam then csButton_toggleChatSpam.Text = getText("button_spam", chatSpamEnabled, "", "") end
            return
        end
        chatSpamLoop = task.spawn(function()
             while chatSpamEnabled do
                 repStorage_ChatSpam = game:GetService("ReplicatedStorage") 
                 sayEvent_ChatSpam = repStorage_ChatSpam:FindFirstChild("DefaultChatSystemEvents", true) and repStorage_ChatSpam.DefaultChatSystemEvents:FindFirstChild("SayMessageRequest") 

                 if sayEvent_ChatSpam then
                      pcall(sayEvent_ChatSpam.FireServer, sayEvent_ChatSpam, chatSpamText, "All")
                 else
                      game:GetService("Chat"):Chat(player.Character.Head, chatSpamText, Enum.ChatColor.White)
                 end

                 if not chatSpamEnabled then break end
                 task.wait(chatSpamDelay)
             end
        end)
    end
end

function toggleCrosshair_Original() 
    crosshairEnabled = not crosshairEnabled
    chButton_toggleCrosshair = FlingToolsOtherButtons["Crosshair"] 
    if chButton_toggleCrosshair then chButton_toggleCrosshair.Text = getText("button_crosshair", crosshairEnabled, "", " ") end
    ShowNotification("notif_feature_state", getText("button_crosshair"), getText(crosshairEnabled and "state_on" or "state_off"))

    if crosshairEnabled then
        if crosshairGui and crosshairGui.Parent then crosshairGui:Destroy() end

        crosshairGui = Instance.new("ScreenGui")
        crosshairGui.Name = "CustomCrosshairGUI"
        crosshairGui.ResetOnSpawn = false
        crosshairGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

        size_Crosshair = 12; thickness_Crosshair = 2; gap_Crosshair = 4; color_Crosshair = Color3.fromRGB(0, 255, 0) 

        lineTop_Crosshair = Instance.new("Frame", crosshairGui); lineTop_Crosshair.Size = UDim2.new(0, thickness_Crosshair, 0, size_Crosshair/2 - gap_Crosshair/2); lineTop_Crosshair.Position = UDim2.new(0.5, -thickness_Crosshair/2, 0.5, -size_Crosshair/2); lineTop_Crosshair.BackgroundColor3 = color_Crosshair; lineTop_Crosshair.BorderSizePixel = 0 
        lineBottom_Crosshair = Instance.new("Frame", crosshairGui); lineBottom_Crosshair.Size = UDim2.new(0, thickness_Crosshair, 0, size_Crosshair/2 - gap_Crosshair/2); lineBottom_Crosshair.Position = UDim2.new(0.5, -thickness_Crosshair/2, 0.5, gap_Crosshair/2); lineBottom_Crosshair.BackgroundColor3 = color_Crosshair; lineBottom_Crosshair.BorderSizePixel = 0 
        lineLeft_Crosshair = Instance.new("Frame", crosshairGui); lineLeft_Crosshair.Size = UDim2.new(0, size_Crosshair/2 - gap_Crosshair/2, 0, thickness_Crosshair); lineLeft_Crosshair.Position = UDim2.new(0.5, -size_Crosshair/2, 0.5, -thickness_Crosshair/2); lineLeft_Crosshair.BackgroundColor3 = color_Crosshair; lineLeft_Crosshair.BorderSizePixel = 0 
        lineRight_Crosshair = Instance.new("Frame", crosshairGui); lineRight_Crosshair.Size = UDim2.new(0, size_Crosshair/2 - gap_Crosshair/2, 0, thickness_Crosshair); lineRight_Crosshair.Position = UDim2.new(0.5, gap_Crosshair/2, 0.5, -thickness_Crosshair/2); lineRight_Crosshair.BackgroundColor3 = color_Crosshair; lineRight_Crosshair.BorderSizePixel = 0 

        crosshairGui.Parent = player:WaitForChild("PlayerGui")

    else
        if crosshairGui and crosshairGui.Parent then
            crosshairGui:Destroy()
            crosshairGui = nil
        end
    end
end

function RejoinServer_Original() 
    ShowNotification("Attempting to rejoin...") 
    success_Rejoin, err_Rejoin = pcall(TeleportService.Teleport, TeleportService, game.PlaceId, player) 
    if not success_Rejoin then
        ShowNotification("Rejoin failed: %s", tostring(err_Rejoin)) 
    end
end

function HopServer_Original() 
    ShowNotification("Attempting to hop server...") 
    placeId_HopServer = game.PlaceId 
    servers_HopServer = {} 
    attempts_HopServer = 0 
    maxAttempts_HopServer = 10 

    getServers_HopServer = function(cursor) 
         if not HttpService then ShowNotification("Server Hop Error: HttpService not available."); return nil end
         url_HopServer = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Asc&limit=100", placeId_HopServer) 
         if cursor then url_HopServer = url_HopServer .. "&cursor=" .. cursor end

         success_HopServer_Get, response_HopServer_Get = pcall(function() return game:HttpGet(url_HopServer, true) end) 
         if not success_HopServer_Get then ShowNotification("Server Hop Error: Failed HttpGet - %s", tostring(response_HopServer_Get)); return nil end

         decodeSuccess_HopServer_Get, result_HopServer_Get = pcall(function() return HttpService:JSONDecode(response_HopServer_Get) end) 
         if decodeSuccess_HopServer_Get and result_HopServer_Get and result_HopServer_Get.data then
             for _, server in ipairs(result_HopServer_Get.data) do
                 if type(server) == "table" and server.playing < server.maxPlayers and server.id ~= game.JobId then
                     table.insert(servers_HopServer, server.id)
                 end
             end
             return result_HopServer_Get.nextPageCursor
         elseif not decodeSuccess_HopServer_Get then ShowNotification("Server Hop Error: Failed to decode server list - %s", tostring(result_HopServer_Get)) end
         return nil
    end

    nextCursor_HopServer = getServers_HopServer() 
    while nextCursor_HopServer and #servers_HopServer < 50 and attempts_HopServer < maxAttempts_HopServer do
        attempts_HopServer = attempts_HopServer + 1
        nextCursor_HopServer = getServers_HopServer(nextCursor_HopServer)
        task.wait(0.1)
    end

    if #servers_HopServer > 0 then
        randomServer_HopServer = servers_HopServer[math.random(1, #servers_HopServer)] 
        success_HopServer_Teleport, err_HopServer_Teleport = pcall(TeleportService.TeleportToPlaceInstance, TeleportService, placeId_HopServer, randomServer_HopServer, player) 
        if not success_HopServer_Teleport then ShowNotification("Server hop failed: %s", tostring(err_HopServer_Teleport)) end
    else
        ShowNotification("Server hop failed: Could not find a suitable server.")
    end
end

HopSmallestServer_Original = function() 
    ShowNotification("notif_serverhop_smallest_start")
    placeId_HopSmallest = game.PlaceId 
    servers_HopSmallest = {} 
    attempts_HopSmallest = 0 
    maxAttempts_HopSmallest = 10 
    smallestServer_HopSmallest = nil 
    smallestCount_HopSmallest = math.huge 

    getServers_HopSmallest = function(cursor) 
         if not HttpService then ShowNotification("Server Hop Error: HttpService not available."); return nil end
         url_HopSmallest = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Asc&limit=100", placeId_HopSmallest) 
         if cursor then url_HopSmallest = url_HopSmallest .. "&cursor=" .. cursor end

         success_HopSmallest_Get, response_HopSmallest_Get = pcall(function() return game:HttpGet(url_HopSmallest, true) end) 
         if not success_HopSmallest_Get then ShowNotification("Server Hop Error: Failed HttpGet - %s", tostring(response_HopSmallest_Get)); return nil end

         decodeSuccess_HopSmallest_Get, result_HopSmallest_Get = pcall(function() return HttpService:JSONDecode(response_HopSmallest_Get) end) 
         if decodeSuccess_HopSmallest_Get and result_HopSmallest_Get and result_HopSmallest_Get.data then
             for _, server in ipairs(result_HopSmallest_Get.data) do
                 if type(server) == "table" and server.playing < server.maxPlayers and server.id ~= game.JobId then
                     if server.playing < smallestCount_HopSmallest then
                         smallestCount_HopSmallest = server.playing
                         smallestServer_HopSmallest = server.id
                     end
                 end
             end
             return result_HopSmallest_Get.nextPageCursor
         elseif not decodeSuccess_HopSmallest_Get then ShowNotification("Server Hop Error: Failed to decode server list - %s", tostring(result_HopSmallest_Get)) end
         return nil
    end

    nextCursor_HopSmallest = getServers_HopSmallest() 
    while nextCursor_HopSmallest and attempts_HopSmallest < maxAttempts_HopSmallest do 
        attempts_HopSmallest = attempts_HopSmallest + 1
        nextCursor_HopSmallest = getServers_HopSmallest(nextCursor_HopSmallest)
        task.wait(0.1)
    end

    if smallestServer_HopSmallest then
        success_HopSmallest_Teleport, err_HopSmallest_Teleport = pcall(TeleportService.TeleportToPlaceInstance, TeleportService, placeId_HopSmallest, smallestServer_HopSmallest, player) 
        if not success_HopSmallest_Teleport then ShowNotification("Server hop failed: %s", tostring(err_HopSmallest_Teleport)) end
    else
        ShowNotification("notif_serverhop_smallest_fail")
    end
end

function ExecuteScript_Original() 
    if not scriptExecutorInput then ShowNotification("notif_error_input_not_found", "Executor"); return end
    scriptContent_ExecuteScript = scriptExecutorInput.Text 
    if scriptContent_ExecuteScript == "" then ShowNotification("notif_exec_empty"); return end

    ShowNotification("notif_exec_attempt")
    func_ExecuteScript, err_ExecuteScript_Load = loadstring(scriptContent_ExecuteScript) 

    if typeof(func_ExecuteScript) == "function" then
        execSuccess_ExecuteScript, execErr_ExecuteScript = pcall(func_ExecuteScript) 
        if execSuccess_ExecuteScript then ShowNotification("notif_exec_success")
        else ShowNotification("notif_exec_runtime_error", tostring(execErr_ExecuteScript)); warn("Script Runtime Error:", execErr_ExecuteScript) end
    else ShowNotification("notif_exec_load_error", tostring(err_ExecuteScript_Load)); warn("Script Loading Error:", err_ExecuteScript_Load) end
end

function PasteScript_Original() 
     if not scriptExecutorInput then ShowNotification("notif_error_input_not_found", "Executor"); return end
     success_PasteScript, content_PasteScript = pcall(function() return getclipboard() end) 
     if success_PasteScript and typeof(content_PasteScript) == "string" then scriptExecutorInput.Text = content_PasteScript; ShowNotification("notif_exec_paste_success")
     else ShowNotification("notif_exec_paste_fail") end
end

function ClearScript_Original() 
     if not scriptExecutorInput then ShowNotification("notif_error_input_not_found", "Executor"); return end
     scriptExecutorInput.Text = ""; ShowNotification("notif_exec_cleared")
end

function ApplySkybox_Original() 
     if not skyboxInput then ShowNotification("notif_error_input_not_found", "Skybox"); return end
     skyboxId_ApplySkybox = skyboxInput.Text:match("%d+") 
     if skyboxId_ApplySkybox and skyboxId_ApplySkybox ~= "" then
          sky_ApplySkybox = Lighting:FindFirstChildOfClass("Sky") or Instance.new("Sky", Lighting) 
          props_ApplySkybox = {"SkyboxBk", "SkyboxDn", "SkyboxFt", "SkyboxLf", "SkyboxRt", "SkyboxUp"} 
          url_ApplySkybox = "http://www.roblox.com/asset/?id=" .. skyboxId_ApplySkybox 
          for _, prop in ipairs(props_ApplySkybox) do pcall(function() sky_ApplySkybox[prop] = url_ApplySkybox end) end
          ShowNotification("notif_skybox_apply", skyboxId_ApplySkybox); currentSkyboxId = skyboxId_ApplySkybox
     else ShowNotification("notif_skybox_error_invalid") end
end

GetWalkSpeed_Original = function() 
    char_GetSpeed = player.Character 
    hum_GetSpeed = char_GetSpeed and char_GetSpeed:FindFirstChildOfClass("Humanoid") 
    if hum_GetSpeed then
        speed_GetSpeed = hum_GetSpeed.WalkSpeed 
        ShowNotification("notif_getspeed_result", tostring(speed_GetSpeed))
    else
        ShowNotification("notif_getspeed_fail")
    end
end


getConfigData = function() 
    config_getConfigData = {} 
    C3_fromRGB_local_getConfigData = cached_Color3_fromRGB 

    if MainFrame then
        config_getConfigData.Speed = MainFrame:FindFirstChild("SpeedValue", true) and MainFrame:FindFirstChild("SpeedValue", true).Text or "16"
        config_getConfigData.Jump = MainFrame:FindFirstChild("JumpValue", true) and MainFrame:FindFirstChild("JumpValue", true).Text or "50"
        config_getConfigData.Gravity = MainFrame:FindFirstChild("GravityValue", true) and MainFrame:FindFirstChild("GravityValue", true).Text or "196.2"
        config_getConfigData.FlySpeed = MainFrame:FindFirstChild("FlySpeedValue", true) and MainFrame:FindFirstChild("FlySpeedValue", true).Text or "50"
        config_getConfigData.FOV = Camera.FieldOfView
        config_getConfigData.ChatSpamText = MainFrame:FindFirstChild("ChatSpamInput", true) and MainFrame:FindFirstChild("ChatSpamInput", true).Text or chatSpamText
        config_getConfigData.ChatSpamDelay = MainFrame:FindFirstChild("ChatSpamDelayValue", true) and MainFrame:FindFirstChild("ChatSpamDelayValue", true).Text or tostring(chatSpamDelay)
        config_getConfigData.WalkSpeedMultiplier = MainFrame:FindFirstChild("SpeedMultiValue", true) and MainFrame:FindFirstChild("SpeedMultiValue", true).Text or tostring(walkSpeedMultiplier) 
        config_getConfigData.JumpPowerMultiplier = MainFrame:FindFirstChild("JumpMultiValue", true) and MainFrame:FindFirstChild("JumpMultiValue", true).Text or tostring(jumpPowerMultiplier) 
        config_getConfigData.CharacterScale = charScaleValueLabel and charScaleValueLabel.Text or tostring(characterScaleValue) 
    end
    config_getConfigData.InfiniteJump = infiniteJumpEnabled
    config_getConfigData.WalkOnWater = walkOnWaterEnabled
    config_getConfigData.InstantRespawn = instantRespawnEnabled
    config_getConfigData.GodMode = godModeEnabled
    config_getConfigData.InfiniteStamina = infiniteStaminaEnabled
    config_getConfigData.Phase = phaseEnabled
    config_getConfigData.RemoveFog = removeFogEnabled
    config_getConfigData.ChatSpam = chatSpamEnabled
    config_getConfigData.Spider = spiderEnabled
    config_getConfigData.JesusFly = jesusFlyEnabled
    config_getConfigData.Tracers = tracersEnabled
    config_getConfigData.NoArms = noArmsEnabled
    config_getConfigData.NoLegs = noLegsEnabled
    config_getConfigData.RainbowChar = rainbowCharEnabled
    config_getConfigData.InfiniteAirJump = infiniteAirJumpEnabled 
    config_getConfigData.WallWalk = wallWalkEnabled 
    config_getConfigData.TeleportTool = teleportToolEnabled 
    config_getConfigData.LowGravity = lowGravityEnabled 
    config_getConfigData.BunnyHop = bhopEnabled 
    config_getConfigData.AutoClicker = autoClickerEnabled 
    config_getConfigData.AntiVoid = antiVoidEnabled 
    config_getConfigData.RemoveFogV2 = removeFogV2Enabled 
    config_getConfigData.AutoRespawn = autoRespawnEnabled 
    config_getConfigData.WalkOnAir = walkOnAirEnabled 
    config_getConfigData.PlatformStand = platformStandEnabled 
    config_getConfigData.SpinPlayer = spinPlayerEnabled 
    config_getConfigData.Headless = headlessEnabled 
    config_getConfigData.FreezeCam = freezeCamEnabled 
    config_getConfigData.Ragdoll = ragdollEnabled 
    config_getConfigData.FloatUp = floatUpEnabled 
    config_getConfigData.UpsideDown = upsideDownEnabled 
    config_getConfigData.NoFace = noFaceEnabled 
    config_getConfigData.ForceField = forceFieldEnabled 

    config_getConfigData.Target = FlingToolsPlayerInputBox and FlingToolsPlayerInputBox.Text or "" 
    config_getConfigData.ESP = espScriptEnabled
    config_getConfigData.Track = aimbotActive
    config_getConfigData.Aimbot = aimbotEnabled
    config_getConfigData.Spectate = isSpectating 
    config_getConfigData.Freeze = isFrozen
    config_getConfigData.Car = carToggleActivated
    config_getConfigData.KillBrick = not killBrickNega 
    config_getConfigData.NoclipSimple = not noclipClipon 
    config_getConfigData.Invisible = invis_on
    config_getConfigData.ShiftLock = (ShiftLockActive and ShiftLockActive.Connected)
    config_getConfigData.Rotate = rotating
    config_getConfigData.SpamTP = isToggleActive
    config_getConfigData.TpAll = teleportAllEnabled
    config_getConfigData.TpToMouse = tpToMouseEnabled
    config_getConfigData.Orbit = orbitEnabled
    config_getConfigData.Attach = attachEnabled

    config_getConfigData.AntiAFK = antiAfkEnabled
    config_getConfigData.Crosshair = crosshairEnabled
    config_getConfigData.SkyboxID = skyboxInput and skyboxInput.Text or currentSkyboxId
    config_getConfigData.UiScale = uiScaleValue 
    config_getConfigData.WebhookURL = webhookUrlInput and webhookUrlInput.Text or "" 
    config_getConfigData.WebhookMessage = webhookMessageInput and webhookMessageInput.Text or "" 
    config_getConfigData.UserIDInput = userIdInput and userIdInput.Text or "" 

    config_getConfigData.FullBright = fullBrightEnabled 
    config_getConfigData.Brightness = Lighting.Brightness 
    config_getConfigData.ShadowQuality = shadowQuality
    config_getConfigData.ChamsStyle = settings_tbl.Chams_Style 
    config_getConfigData.ESPBoxStyle = settings_tbl.ESP_BoxStyle 
    config_getConfigData.ESPBoxSize = settings_tbl.ESP_BoxSize 
    config_getConfigData.CartoonOutline = cartoonOutlineEnabled 
    config_getConfigData.InvertColors = invertColorsEnabled 
    config_getConfigData.Bloom = bloomEnabled 
    config_getConfigData.DepthOfField = depthOfFieldEnabled 
    config_getConfigData.SunRays = sunRaysEnabled 
    config_getConfigData.Blur = blurEnabled 
    config_getConfigData.NeonWorld = neonWorldEnabled 
    config_getConfigData.ColoredFog = coloredFogEnabled 

    config_getConfigData.Transparency = MainFrame and MainFrame.BackgroundTransparency or 0
    config_getConfigData.Neon = isNeonActive
    config_getConfigData.ResetCheatsOnDeath = resetCheatsOnDeathEnabled 
    config_getConfigData.ShowTextEmojis = guiShowTextEmojis 
    config_getConfigData.Language = currentLanguage 
    if typeof(C3_fromRGB_local_getConfigData) == "function" then 
         config_getConfigData.ThemeButtonColor = {R=currentButtonColor.R*255, G=currentButtonColor.G*255, B=currentButtonColor.B*255}
         config_getConfigData.ThemeTextColor = {R=currentTextColor.R*255, G=currentTextColor.G*255, B=currentTextColor.B*255}
         config_getConfigData.ThemeSliderBgColor = {R=currentSliderBgColor.R*255, G=currentSliderBgColor.G*255, B=currentSliderBgColor.B*255}
         config_getConfigData.ThemePlaceholderColor = {R=currentPlaceholderColor.R*255, G=currentPlaceholderColor.G*255, B=currentPlaceholderColor.B*255}
         if NeonBorder then 
             config_getConfigData.ThemeNeonColor = {R=NeonBorder.BackgroundColor3.R*255, G=NeonBorder.BackgroundColor3.G*255, B=NeonBorder.BackgroundColor3.B*255} 
         end
    end

    return config_getConfigData
end

applyConfigData = function(config) 
    if typeof(config) ~= "table" then ShowNotification("notif_config_load_fail_format"); return false end

    ShowNotification("notif_config_applying")
    loadSuccess_applyConfigData = pcall(function() 
        if config.Language and config.Language ~= currentLanguage then
            if TranslateButton then toggleTranslate_Original() end 
        end
        if config.ShowTextEmojis ~= nil and config.ShowTextEmojis ~= guiShowTextEmojis then
             if ShowEmojisButton then toggleShowTextEmojis_Original() end 
        end
        if config.Neon ~= nil and config.Neon ~= isNeonActive then
            if NeonToggleButton then NeonToggleButton.MouseButton1Click:Wait() end 
        end
        if config.ResetCheatsOnDeath ~= nil and config.ResetCheatsOnDeath ~= resetCheatsOnDeathEnabled then
            if ResetOnDeathButton then toggleResetCheatsOnDeath() end
        end

        if config.Transparency then MainFrame.BackgroundTransparency = config.Transparency; Gradient.Transparency = NumberSequence.new(config.Transparency); TabBar.BackgroundTransparency = config.Transparency*0.5; if NeonBorder then NeonBorder.BackgroundTransparency = 0.6+(config.Transparency*0.4) end end

        if config.ThemeButtonColor and typeof(cached_Color3_fromRGB) == "function" and typeof(THEME_C3_BlueBtn) == "Color3" then
            C3_fromRGB_local_applyConfigData = cached_Color3_fromRGB 
            btnCol_applyConfigData = C3_fromRGB_local_applyConfigData(config.ThemeButtonColor.R, config.ThemeButtonColor.G, config.ThemeButtonColor.B) 
            txtCol_applyConfigData = C3_fromRGB_local_applyConfigData(config.ThemeTextColor.R, config.ThemeTextColor.G, config.ThemeTextColor.B) 
            sldCol_applyConfigData = C3_fromRGB_local_applyConfigData(config.ThemeSliderBgColor.R, config.ThemeSliderBgColor.G, config.ThemeSliderBgColor.B) 
            plcCol_applyConfigData = C3_fromRGB_local_applyConfigData(config.ThemePlaceholderColor.R, config.ThemePlaceholderColor.G, config.ThemePlaceholderColor.B) 
            neonCol_applyConfigData = config.ThemeNeonColor and C3_fromRGB_local_applyConfigData(config.ThemeNeonColor.R, config.ThemeNeonColor.G, config.ThemeNeonColor.B) or THEME_C3_BlueNeon 
            gradStart_applyConfigData = btnCol_applyConfigData 
            gradMid_applyConfigData = Color3.fromRGB(btnCol_applyConfigData.R*255*0.7, btnCol_applyConfigData.G*255*0.7, btnCol_applyConfigData.B*255*0.7) 
            gradEnd_applyConfigData = Color3.fromRGB(btnCol_applyConfigData.R*255*0.5, btnCol_applyConfigData.G*255*0.5, btnCol_applyConfigData.B*255*0.5) 
            applyColorTheme(gradStart_applyConfigData, gradMid_applyConfigData, gradEnd_applyConfigData, btnCol_applyConfigData, neonCol_applyConfigData, txtCol_applyConfigData, sldCol_applyConfigData, plcCol_applyConfigData) 
        else warn("Could not apply saved theme colors fully (missing functions or global defs).") end

        if config.Speed then s_applyConfigData = tonumber(config.Speed); if s_applyConfigData then if MainFrame:FindFirstChild("SpeedValue",true) then MainFrame:FindFirstChild("SpeedValue",true).Text = config.Speed end; if player.Character and player.Character:FindFirstChildWhichIsA("Humanoid") then player.Character.Humanoid.WalkSpeed = s_applyConfigData * walkSpeedMultiplier end end end 
        if config.Jump then j_applyConfigData = tonumber(config.Jump); if j_applyConfigData then if MainFrame:FindFirstChild("JumpValue",true) then MainFrame:FindFirstChild("JumpValue",true).Text = config.Jump end; if player.Character and player.Character:FindFirstChildWhichIsA("Humanoid") then player.Character.Humanoid.JumpPower = j_applyConfigData * jumpPowerMultiplier end end end 
        if config.Gravity then g_applyConfigData = tonumber(config.Gravity); if g_applyConfigData then if MainFrame:FindFirstChild("GravityValue",true) then MainFrame:FindFirstChild("GravityValue",true).Text = config.Gravity end; workspace.Gravity = g_applyConfigData end end
        if config.FlySpeed then fs_applyConfigData = tonumber(config.FlySpeed); if fs_applyConfigData then if MainFrame:FindFirstChild("FlySpeedValue",true) then MainFrame:FindFirstChild("FlySpeedValue",true).Text = config.FlySpeed end; flySpeed = fs_applyConfigData end end
        if config.FOV then fov_applyConfigData = tonumber(config.FOV); if fov_applyConfigData then Camera.FieldOfView = fov_applyConfigData; if MainFrame:FindFirstChild("FOVValue",true) then MainFrame:FindFirstChild("FOVValue",true).Text = tostring(math.floor(fov_applyConfigData)) end; if MainFrame:FindFirstChild("FOVBar",true) then bar_applyConfigData = MainFrame:FindFirstChild("FOVBar",true); ratio_applyConfigData=(fov_applyConfigData-30)/(120-30); if typeof(ratio_applyConfigData)=="number" then bar_applyConfigData.Size=UDim2.new(ratio_applyConfigData,0,1,0) end end end end
        if config.ChatSpamText then chatSpamText = config.ChatSpamText; csInput_applyConfigData = MainFrame:FindFirstChild("ChatSpamInput", true); if csInput_applyConfigData then csInput_applyConfigData.Text = chatSpamText end end
        if config.ChatSpamDelay then csd_applyConfigData = tonumber(config.ChatSpamDelay); if csd_applyConfigData then chatSpamDelay = csd_applyConfigData; csdVal_applyConfigData = MainFrame:FindFirstChild("ChatSpamDelayValue", true); if csdVal_applyConfigData then csdVal_applyConfigData.Text = tostring(csd_applyConfigData) end; csdBar_applyConfigData = MainFrame:FindFirstChild("ChatSpamDelayBar", true); if csdBar_applyConfigData then ratio_applyConfigData=(csd_applyConfigData-0.1)/(5-0.1); if typeof(ratio_applyConfigData)=="number" then csdBar_applyConfigData.Size=UDim2.new(ratio_applyConfigData,0,1,0) end end end end
        if config.WalkSpeedMultiplier then wsm_applyConfigData = tonumber(config.WalkSpeedMultiplier); if wsm_applyConfigData then ApplyWalkSpeedMultiplier_Original(wsm_applyConfigData); val_applyConfigData=MainFrame:FindFirstChild("SpeedMultiValue",true); if val_applyConfigData then val_applyConfigData.Text=tostring(wsm_applyConfigData) end; bar_applyConfigData=MainFrame:FindFirstChild("SpeedMultiBar",true); if bar_applyConfigData then bar_applyConfigData.Size=UDim2.new((wsm_applyConfigData-0.1)/(5-0.1),0,1,0) end end end 
        if config.JumpPowerMultiplier then jpm_applyConfigData = tonumber(config.JumpPowerMultiplier); if jpm_applyConfigData then ApplyJumpPowerMultiplier_Original(jpm_applyConfigData); val_applyConfigData=MainFrame:FindFirstChild("JumpMultiValue",true); if val_applyConfigData then val_applyConfigData.Text=tostring(jpm_applyConfigData) end; bar_applyConfigData=MainFrame:FindFirstChild("JumpMultiBar",true); if bar_applyConfigData then bar_applyConfigData.Size=UDim2.new((jpm_applyConfigData-0.1)/(5-0.1),0,1,0) end end end 
        if config.CharacterScale then cs_applyConfigData = tonumber(config.CharacterScale); if cs_applyConfigData then ApplyCharacterScale_Original(cs_applyConfigData); val_applyConfigData = charScaleValueLabel; if val_applyConfigData then val_applyConfigData.Text = string.format("%.2f", cs_applyConfigData) end; bar_applyConfigData = MainFrame and MainFrame:FindFirstChild("CharScaleBar", true); if bar_applyConfigData then bar_applyConfigData.Size = UDim2.new((cs_applyConfigData-0.1)/(3-0.1),0,1,0) end end end 


        if config.InfiniteJump ~= nil and config.InfiniteJump ~= infiniteJumpEnabled then toggleInfiniteJump_Original() end
        if config.WalkOnAir ~= nil and config.WalkOnAir ~= walkOnAirEnabled then toggleWalkOnAir_Original() end 
        if config.PlatformStand ~= nil and config.PlatformStand ~= platformStandEnabled then togglePlatformStand_Original() end 
        if config.SpinPlayer ~= nil and config.SpinPlayer ~= spinPlayerEnabled then toggleSpinPlayer_Original() end 
        if config.Headless ~= nil and config.Headless ~= headlessEnabled then toggleHeadless_Original() end 
        if config.FreezeCam ~= nil and config.FreezeCam ~= freezeCamEnabled then toggleFreezeCam_Original() end 
        if config.Ragdoll ~= nil and config.Ragdoll ~= ragdollEnabled then toggleRagdoll_Original() end 
        if config.FloatUp ~= nil and config.FloatUp ~= floatUpEnabled then toggleFloatUp_Original() end 
        if config.UpsideDown ~= nil and config.UpsideDown ~= upsideDownEnabled then toggleUpsideDown_Original() end 
        if config.NoFace ~= nil and config.NoFace ~= noFaceEnabled then toggleNoFace_Original() end 
        if config.ForceField ~= nil and config.ForceField ~= forceFieldEnabled then toggleForceField_Original() end 
        if config.WalkOnWater ~= nil and config.WalkOnWater ~= walkOnWaterEnabled then toggleWalkOnWater_Original() end
        if config.InstantRespawn ~= nil and config.InstantRespawn ~= instantRespawnEnabled then toggleInstantRespawn_Original() end
        if config.GodMode ~= nil and config.GodMode ~= godModeEnabled then toggleGodMode_Original() end
        if config.InfiniteStamina ~= nil and config.InfiniteStamina ~= infiniteStaminaEnabled then toggleInfiniteStamina_Original() end
        if config.Phase ~= nil and config.Phase ~= phaseEnabled then togglePhase_Original() end
        if config.RemoveFog ~= nil and config.RemoveFog ~= removeFogEnabled then toggleRemoveFog_Original() end
        if config.ChatSpam ~= nil and config.ChatSpam ~= chatSpamEnabled then toggleChatSpam_Original() end
        if config.Spider ~= nil and config.Spider ~= spiderEnabled then toggleSpider_Original() end
        if config.JesusFly ~= nil and config.JesusFly ~= jesusFlyEnabled then toggleJesusFly_Original() end
        if config.Tracers ~= nil and config.Tracers ~= tracersEnabled then toggleTracers_Original() end
        if config.NoArms ~= nil and config.NoArms ~= noArmsEnabled then toggleNoArms_Original() end
        if config.NoLegs ~= nil and config.NoLegs ~= noLegsEnabled then toggleNoLegs_Original() end
        if config.RainbowChar ~= nil and config.RainbowChar ~= rainbowCharEnabled then toggleRainbowChar_Original() end
        if config.InfiniteAirJump ~= nil and config.InfiniteAirJump ~= infiniteAirJumpEnabled then toggleInfiniteAirJump_Original() end 
        if config.WallWalk ~= nil and config.WallWalk ~= wallWalkEnabled then toggleWallWalk_Original() end 
        if config.TeleportTool ~= nil and config.TeleportTool ~= teleportToolEnabled then toggleTeleportTool_Original() end 
        if config.LowGravity ~= nil and config.LowGravity ~= lowGravityEnabled then toggleLowGravity_Original() end 
        if config.BunnyHop ~= nil and config.BunnyHop ~= bhopEnabled then toggleBunnyHop_Original() end 
        if config.AutoClicker ~= nil and config.AutoClicker ~= autoClickerEnabled then toggleAutoClicker_Original() end 
        if config.AntiVoid ~= nil and config.AntiVoid ~= antiVoidEnabled then toggleAntiVoid_Original() end 
        if config.RemoveFogV2 ~= nil and config.RemoveFogV2 ~= removeFogV2Enabled then toggleRemoveFogV2_Original() end 
        if config.AutoRespawn ~= nil and config.AutoRespawn ~= autoRespawnEnabled then toggleAutoRespawn_Original() end 

        if config.Target and FlingToolsPlayerInputBox then FlingToolsPlayerInputBox.Text = config.Target end 
        if config.ESP ~= nil and config.ESP ~= espScriptEnabled then toggleESP_Original() end
        if config.Track ~= nil and config.Track ~= aimbotActive then toggleAimbotTrack_Original() end
        if config.Aimbot ~= nil and config.Aimbot ~= aimbotEnabled then toggleAimbotCamera_Original() end
        if config.Freeze ~= nil and config.Freeze ~= isFrozen then toggleFreeze_Original() end
        if config.Car ~= nil and config.Car ~= carToggleActivated then toggleCarMode_Original() end
        if config.KillBrick ~= nil and config.KillBrick == killBrickNega then toggleKillBrick_Original() end 
        if config.NoclipSimple ~= nil and config.NoclipSimple == noclipClipon then toggleNoclipSimple_Original() end 
        if config.Invisible ~= nil and config.Invisible ~= invis_on then toggleInvisible_Original() end
        if config.ShiftLock ~= nil and config.ShiftLock ~= (ShiftLockActive and ShiftLockActive.Connected) then toggleShiftLock_Original() end
        if config.Rotate ~= nil and config.Rotate ~= rotating then toggleRotatePlayer_Original() end
        if config.SpamTP ~= nil and config.SpamTP ~= isToggleActive then toggleSpamTp_Original() end
        if config.TpAll ~= nil and config.TpAll ~= teleportAllEnabled then toggleTeleportAll_Original() end
        if config.TpToMouse ~= nil and config.TpToMouse ~= tpToMouseEnabled then toggleTpToMouse_Original() end
        if config.Orbit ~= nil and config.Orbit ~= orbitEnabled then toggleOrbit_Original() end
        if config.Attach ~= nil and config.Attach ~= attachEnabled then toggleAttach_Original() end

        if config.AntiAFK ~= nil and config.AntiAFK ~= antiAfkEnabled then toggleAntiAfk_Original() end
        if config.Crosshair ~= nil and config.Crosshair ~= crosshairEnabled then toggleCrosshair_Original() end
        if config.SkyboxID and skyboxInput then skyboxInput.Text = config.SkyboxID; ApplySkybox_Original() end
        if config.UiScale then uis_applyConfigData = tonumber(config.UiScale); if uis_applyConfigData then ApplyUiScale_Original(uis_applyConfigData); val_applyConfigData = MainFrame:FindFirstChild("UiScaleValue",true); if val_applyConfigData then val_applyConfigData.Text=string.format("%.2f",uis_applyConfigData) end; bar_applyConfigData = MainFrame:FindFirstChild("UiScaleBar",true); if bar_applyConfigData then bar_applyConfigData.Size=UDim2.new(uis_applyConfigData/2,0,1,0) end end end
        if config.WebhookURL and webhookUrlInput then webhookUrlInput.Text = config.WebhookURL; webhookUrlText = config.WebhookURL end 
        if config.WebhookMessage and webhookMessageInput then webhookMessageInput.Text = config.WebhookMessage; webhookMessageText = config.WebhookMessage end 
        if config.UserIDInput and userIdInput then userIdInput.Text = config.UserIDInput; userIdInputText = config.UserIDInput end 

        if config.Brightness then bright_applyConfigData = tonumber(config.Brightness); if bright_applyConfigData then ApplyFullBrightnessSlider_Original(bright_applyConfigData); val_applyConfigData=MainFrame:FindFirstChild("BrightnessValue",true); if val_applyConfigData then val_applyConfigData.Text=string.format("%.1f",bright_applyConfigData) end; bar_applyConfigData=MainFrame:FindFirstChild("BrightnessBar",true); if bar_applyConfigData then bar_applyConfigData.Size=UDim2.new((bright_applyConfigData-0)/(5-0),0,1,0) end end end
        if config.FullBright ~= nil and config.FullBright ~= fullBrightEnabled then toggleFullBright_Original() end 
        if config.ShadowQuality then sq_applyConfigData = tonumber(config.ShadowQuality); if sq_applyConfigData then ApplyShadowQuality_Original(sq_applyConfigData); val_applyConfigData = MainFrame:FindFirstChild("ShadowQualityValue",true); if val_applyConfigData then val_applyConfigData.Text=tostring(sq_applyConfigData) end; bar_applyConfigData = MainFrame:FindFirstChild("ShadowQualityBar",true); if bar_applyConfigData then bar_applyConfigData.Size=UDim2.new((sq_applyConfigData-1)/3,0,1,0) end end end
        if config.ChamsStyle then settings_tbl.Chams_Style = config.Chams_Style; CycleChamsStyle_Original(true) end 
        if config.ESPBoxStyle then ApplyESPBoxStyle_Original(config.ESPBoxStyle) end 
        if config.ESPBoxSize then ApplyESPBoxSizeSlider(config.ESPBoxSize) end 
        if config.CartoonOutline ~= nil and config.CartoonOutline ~= cartoonOutlineEnabled then toggleCartoonOutline_Original() end 
        if config.InvertColors ~= nil and config.InvertColors ~= invertColorsEnabled then toggleInvertColors_Original() end 
        if config.Bloom ~= nil and config.Bloom ~= bloomEnabled then toggleBloom_Original() end 
        if config.DepthOfField ~= nil and config.DepthOfField ~= depthOfFieldEnabled then toggleDepthOfField_Original() end 
        if config.SunRays ~= nil and config.SunRays ~= sunRaysEnabled then toggleSunRays_Original() end 
        if config.Blur ~= nil and config.Blur ~= blurEnabled then toggleBlur_Original() end 
        if config.NeonWorld ~= nil and config.NeonWorld ~= neonWorldEnabled then toggleNeonWorld_Original() end 
        if config.ColoredFog ~= nil and config.ColoredFog ~= coloredFogEnabled then toggleColoredFog_Original() end 


        task.wait(0.1)
        refreshAllUITextLanguage() 
        ShowNotification("notif_config_loaded")
    end)
    if not loadSuccess_applyConfigData then ShowNotification("notif_config_apply_fail") end
    return loadSuccess_applyConfigData
end


function SaveConfig_Original() 
    config_SaveConfig = getConfigData() 
    success_SaveConfig, encoded_SaveConfig = pcall(HttpService.JSONEncode, HttpService, config_SaveConfig) 
    if success_SaveConfig then
         clipboardSuccess_SaveConfig = pcall(function() setclipboard(encoded_SaveConfig) end) 
         if clipboardSuccess_SaveConfig then ShowNotification("notif_config_saved_clipboard") else ShowNotification("notif_config_save_fail_clipboard") end
    else ShowNotification("notif_config_save_fail_encode") end
end

function LoadConfig_Original() 
    success_LoadConfig, encoded_LoadConfig = pcall(function() return getclipboard() end) 
    if not success_LoadConfig or typeof(encoded_LoadConfig) ~= "string" or encoded_LoadConfig == "" then ShowNotification("notif_config_load_fail_clipboard"); return end
    decodeSuccess_LoadConfig, config_LoadConfig = pcall(HttpService.JSONDecode, HttpService, encoded_LoadConfig) 
    if not decodeSuccess_LoadConfig or typeof(config_LoadConfig) ~= "table" then ShowNotification("notif_config_load_fail_format"); return end
    applyConfigData(config_LoadConfig)
end

function SaveConfigToFile_Original() 
    if typeof(writefile) ~= "function" then ShowNotification("notif_config_save_error_writefile"); return end
    config_SaveFile = getConfigData() 
    success_SaveFile, encoded_SaveFile = pcall(HttpService.JSONEncode, HttpService, config_SaveFile) 
    if not success_SaveFile then ShowNotification("notif_config_save_error_encode"); return end
    writeSuccess_SaveFile, writeErr_SaveFile = pcall(writefile, "DMX_GUI_Prime_Config.json", encoded_SaveFile) 
    if writeSuccess_SaveFile then ShowNotification("notif_config_save_success_file") else ShowNotification("notif_config_save_fail_write", tostring(writeErr_SaveFile)) end
end

function LoadConfigFromFile_Original() 
     if typeof(readfile) ~= "function" then ShowNotification("notif_config_load_error_readfile"); return end
     if typeof(isfile) ~= "function" or not isfile("DMX_GUI_Prime_Config.json") then ShowNotification("notif_config_load_error_isfile"); return end
     readSuccess_LoadFile, encoded_LoadFile = pcall(readfile, "DMX_GUI_Prime_Config.json") 
     if not readSuccess_LoadFile or typeof(encoded_LoadFile) ~= "string" or encoded_LoadFile == "" then ShowNotification("notif_config_load_fail_read", tostring(encoded_LoadFile)); return end
     decodeSuccess_LoadFile, config_LoadFile = pcall(HttpService.JSONDecode, HttpService, encoded_LoadFile) 
     if not decodeSuccess_LoadFile or typeof(config_LoadFile) ~= "table" then ShowNotification("notif_config_load_fail_format_file"); return end
     applyConfigData(config_LoadFile)
end


function BringAll_Original() 
    if bringingAll then ShowNotification("notif_bring_all_active"); return end
    bringingAll = true; ShowNotification("notif_bring_all_start")
    bringCount_BringAll = 0 
    myRoot_BringAll = player.Character and player.Character:FindFirstChild("HumanoidRootPart") 
    if not myRoot_BringAll then ShowNotification("notif_bring_all_fail_nochar"); bringingAll = false; return end
    bringThreads_BringAll = {} 
    for _, otherPlayer in ipairs(Players:GetPlayers()) do
        if otherPlayer ~= player then
            targetChar_BringAll = otherPlayer.Character 
            targetRoot_BringAll = targetChar_BringAll and targetChar_BringAll:FindFirstChild("HumanoidRootPart") 
            if targetRoot_BringAll then
                 bringCount_BringAll = bringCount_BringAll + 1
                 bringThreads_BringAll[otherPlayer] = task.spawn(function()
                    startTime_BringAll = tick() 
                    while bringingAll and otherPlayer.Parent and targetRoot_BringAll.Parent and (tick() - startTime_BringAll < 10) do
                        pcall(targetRoot_BringAll.SetNetworkOwner, targetRoot_BringAll, player)
                        targetRoot_BringAll.CFrame = myRoot_BringAll.CFrame * CFrame.new(math.random(-5, 5), 2, math.random(-5, 5))
                        targetRoot_BringAll.Velocity = Vector3.new(0, 20, 0)
                        task.wait(0.1)
                    end
                 end)
            end
        end
    end
    task.delay(10, function()
        if bringingAll then bringingAll = false; ShowNotification("notif_bring_all_finished", bringCount_BringAll) end
    end)
end

function toggleOrbit_Original() 
     orbitTarget = target 
     if not orbitTarget or not orbitTarget.Character or not orbitTarget.Character:FindFirstChild("HumanoidRootPart") then
          ShowNotification("notif_orbit_error_notarget"); orbitEnabled = false
          orbButton_toggleOrbit = FlingToolsOtherButtons["Orbit"]; if orbButton_toggleOrbit then orbButton_toggleOrbit.Text = getText("button_orbit", orbitEnabled, "", "") end 
          if orbitLoop and orbitLoop.Connected then orbitLoop:Disconnect(); orbitLoop = nil end; return
     end
     orbitEnabled = not orbitEnabled
     orbButton_toggleOrbit_2 = FlingToolsOtherButtons["Orbit"] 
     if orbButton_toggleOrbit_2 then orbButton_toggleOrbit_2.Text = getText("button_orbit", orbitEnabled, "", "") end
     statusText_toggleOrbit = orbitEnabled and ("ON around "..orbitTarget.Name) or "OFF" 
     ShowNotification("notif_orbit_status", statusText_toggleOrbit)

     if orbitLoop and orbitLoop.Connected then orbitLoop:Disconnect(); orbitLoop = nil end
     if orbitEnabled then
          orbitLoop = RunService.RenderStepped:Connect(function()
               myChar_OrbitLoop = player.Character; myRoot_OrbitLoop = myChar_OrbitLoop and myChar_OrbitLoop:FindFirstChild("HumanoidRootPart") 
               targetRoot_OrbitLoop = orbitTarget and orbitTarget.Character and orbitTarget.Character:FindFirstChild("HumanoidRootPart") 
               if not orbitEnabled or not myRoot_OrbitLoop or not targetRoot_OrbitLoop or not orbitTarget.Parent then
                    if orbitLoop and orbitLoop.Connected then orbitLoop:Disconnect(); orbitLoop = nil end
                    orbitEnabled = false; if orbButton_toggleOrbit_2 then orbButton_toggleOrbit_2.Text = getText("button_orbit", orbitEnabled, "", "") end; orbitTarget = nil; return
               end
               angle_OrbitLoop = tick() * orbitSpeed; targetPos_OrbitLoop = targetRoot_OrbitLoop.Position 
               newPos_OrbitLoop = targetPos_OrbitLoop + Vector3.new(math.cos(angle_OrbitLoop) * orbitRadius, 2, math.sin(angle_OrbitLoop) * orbitRadius) 
               pcall(myRoot_OrbitLoop.SetNetworkOwner, myRoot_OrbitLoop, player); myRoot_OrbitLoop.CFrame = CFrame.new(newPos_OrbitLoop, targetPos_OrbitLoop); myRoot_OrbitLoop.Velocity = Vector3.new(0,0,0); myRoot_OrbitLoop.RotVelocity = Vector3.new(0,0,0)
          end)
     end
end

function toggleAttach_Original() 
     attachTarget = target 
     if not attachTarget or not attachTarget.Character or not attachTarget.Character:FindFirstChild("HumanoidRootPart") then
          ShowNotification("notif_attach_error_notarget"); attachEnabled = false
          attachButton_toggleAttach = FlingToolsOtherButtons["Attach"]; if attachButton_toggleAttach then attachButton_toggleAttach.Text = getText("button_attach", attachEnabled, "", "") end 
          if attachWeld and attachWeld.Parent then attachWeld:Destroy(); attachWeld = nil end; return
     end
     attachEnabled = not attachEnabled
     attachButton_toggleAttach_2 = FlingToolsOtherButtons["Attach"] 
     if attachButton_toggleAttach_2 then attachButton_toggleAttach_2.Text = getText("button_attach", attachEnabled, "", "") end
     statusText_toggleAttach = attachEnabled and ("ON to "..attachTarget.Name) or "OFF" 
     ShowNotification("notif_attach_status", statusText_toggleAttach)

     if attachWeld and attachWeld.Parent then attachWeld:Destroy(); attachWeld = nil end
     if attachEnabled then
          myChar_toggleAttach = player.Character; myRoot_toggleAttach = myChar_toggleAttach and myChar_toggleAttach:FindFirstChild("HumanoidRootPart") 
          targetRoot_toggleAttach = attachTarget.Character:FindFirstChild("HumanoidRootPart") 
          if myRoot_toggleAttach and targetRoot_toggleAttach then
               attachWeld = Instance.new("WeldConstraint"); attachWeld.Part0 = myRoot_toggleAttach; attachWeld.Part1 = targetRoot_toggleAttach; attachWeld.Parent = myRoot_toggleAttach
          else ShowNotification("notif_attach_error_noroots"); toggleAttach_Original() end
     end
end

function TripPlayer_Original() 
     targetToTrip_TripPlayer = target 
     if not targetToTrip_TripPlayer or not targetToTrip_TripPlayer.Character or not targetToTrip_TripPlayer.Character:FindFirstChildOfClass("Humanoid") then ShowNotification("notif_trip_error_notarget"); return end
     hum_TripPlayer = targetToTrip_TripPlayer.Character.Humanoid 
     pcall(function() hum_TripPlayer.PlatformStand = true end); task.wait(0.2); pcall(function() hum_TripPlayer.PlatformStand = false end)
     ShowNotification("notif_trip_attempt", targetToTrip_TripPlayer.Name)
end

function SitPlayer_Original() 
    targetToSit_SitPlayer = target 
     if not targetToSit_SitPlayer or not targetToSit_SitPlayer.Character or not targetToSit_SitPlayer.Character:FindFirstChildOfClass("Humanoid") then ShowNotification("notif_sit_error_notarget"); return end
     hum_SitPlayer = targetToSit_SitPlayer.Character.Humanoid; pcall(function() hum_SitPlayer.Sit = true end) 
     ShowNotification("notif_sit_attempt", targetToSit_SitPlayer.Name)
end

function AnnoyPlayer_Original() 
     targetToAnnoy_AnnoyPlayer = target 
     if not targetToAnnoy_AnnoyPlayer or not targetToAnnoy_AnnoyPlayer.Character or not targetToAnnoy_AnnoyPlayer.Character:FindFirstChild("Head") then ShowNotification("notif_annoy_error_notarget"); return end
     ShowNotification("notif_annoy_start", targetToAnnoy_AnnoyPlayer.Name)
     if annoyLoop then task.cancel(annoyLoop); annoyLoop = nil end
     annoyLoop = task.spawn(function()
          head_AnnoyPlayer = targetToAnnoy_AnnoyPlayer.Character.Head 
          sounds_AnnoyPlayer = { "rbxassetid://9114094015", "rbxassetid://130762942", "rbxassetid://6331214698"} 
          count_AnnoyPlayer = 0 
          while count_AnnoyPlayer < 15 and head_AnnoyPlayer and head_AnnoyPlayer.Parent do
               sound_AnnoyPlayer = Instance.new("Sound", head_AnnoyPlayer); sound_AnnoyPlayer.SoundId = sounds_AnnoyPlayer[math.random(1, #sounds_AnnoyPlayer)]; sound_AnnoyPlayer.Volume = 1; sound_AnnoyPlayer:Play(); Debris:AddItem(sound_AnnoyPlayer, 2) 
               count_AnnoyPlayer = count_AnnoyPlayer + 1; task.wait(0.3)
          end
          annoyLoop = nil; ShowNotification("notif_annoy_finished", targetToAnnoy_AnnoyPlayer.Name)
     end)
end

function toggleResetCheatsOnDeath() 
    resetCheatsOnDeathEnabled = not resetCheatsOnDeathEnabled
    if ResetOnDeathButton then
        ResetOnDeathButton.Text = getText("label_resetondeath", resetCheatsOnDeathEnabled, "", "")
    end
    ShowNotification("notif_feature_state", getText("label_resetondeath"), getText(resetCheatsOnDeathEnabled and "state_on" or "state_off"))
end

function toggleShowTextEmojis_Original() 
    guiShowTextEmojis = not guiShowTextEmojis
    if ShowEmojisButton then
        ShowEmojisButton.Text = getText("label_showemojis", guiShowTextEmojis, "", "")
    end
    ShowNotification("notif_feature_state", getText("label_showemojis"), getText(guiShowTextEmojis and "state_on" or "state_off"))
    if refreshAllUITextLanguage then refreshAllUITextLanguage() end 
end

function toggleTranslate_Original() 
    currentLanguage = (currentLanguage == "EN") and "FR" or "EN"
    if TranslateButton then
        TranslateButton.Text = getText("label_translate", nil, (currentLanguage == "EN" and "" or "")) 
    end
    ShowNotification("notif_language_set", currentLanguage)
    if refreshAllUITextLanguage then refreshAllUITextLanguage() end 
end

function toggleSpider_Original() 
    spiderEnabled = not spiderEnabled
    spiderBtn_toggleSpider = MainFrame and MainFrame:FindFirstChild("SpiderButton", true) 
    if spiderBtn_toggleSpider then spiderBtn_toggleSpider.Text = getText("button_spider", spiderEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_spider"), getText(spiderEnabled and "state_on" or "state_off"))

    if spiderLoop and spiderLoop.Connected then spiderLoop:Disconnect(); spiderLoop = nil end
    if spiderEnabled then
        spiderLoop = RunService.Stepped:Connect(function()
            char_Spider = player.Character 
            hum_Spider = char_Spider and char_Spider:FindFirstChildOfClass("Humanoid") 
            root_Spider = char_Spider and char_Spider:FindFirstChild("HumanoidRootPart") 
            if not spiderEnabled or not hum_Spider or not root_Spider or hum_Spider.Health <= 0 then
                if spiderLoop and spiderLoop.Connected then spiderLoop:Disconnect(); spiderLoop = nil end
                pcall(function() hum_Spider.PlatformStand = false end)
                return
            end

            if hum_Spider.MoveDirection.Magnitude > 0 then
                rayOrigin_Spider = root_Spider.Position 
                rayDirection_Spider = root_Spider.CFrame.LookVector * 2 
                rayParams_Spider = RaycastParams.new() 
                rayParams_Spider.FilterDescendantsInstances = {char_Spider}
                rayParams_Spider.FilterType = Enum.RaycastFilterType.Exclude
                rayResult_Spider = Workspace:Raycast(rayOrigin_Spider, rayDirection_Spider, rayParams_Spider) 

                if rayResult_Spider and rayResult_Spider.Instance and rayResult_Spider.Normal then
                    normal_Spider = rayResult_Spider.Normal 
                    angle_Spider = math.acos(normal_Spider:Dot(Vector3.new(0, 1, 0))) 
                    if angle_Spider > math.rad(10) then 
                        pcall(function() root_Spider.Velocity = Vector3.new(root_Spider.Velocity.X, 35, root_Spider.Velocity.Z) end) 
                        pcall(function() hum_Spider.PlatformStand = true end) 
                    else
                        pcall(function() hum_Spider.PlatformStand = false end)
                    end
                else
                    pcall(function() hum_Spider.PlatformStand = false end)
                end
            else
                pcall(function() hum_Spider.PlatformStand = false end)
            end
        end)
    else
        hum_Spider_Off = player.Character and player.Character:FindFirstChildOfClass("Humanoid") 
        if hum_Spider_Off then pcall(function() hum_Spider_Off.PlatformStand = false end) end
    end
end

function toggleJesusFly_Original() 
    jesusFlyEnabled = not jesusFlyEnabled
    jfBtn_toggleJesusFly = MainFrame and MainFrame:FindFirstChild("JesusFlyButton", true) 
    if jfBtn_toggleJesusFly then jfBtn_toggleJesusFly.Text = getText("button_jesusfly", jesusFlyEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_jesusfly"), getText(jesusFlyEnabled and "state_on" or "state_off"))

    if jesusFlyLoop and jesusFlyLoop.Connected then jesusFlyLoop:Disconnect(); jesusFlyLoop = nil end

    if jesusFlyEnabled then
        originalCameraMode = player.CameraMode 
        originalCameraSubject = workspace.CurrentCamera.CameraSubject 

        player.CameraMode = Enum.CameraMode.Classic 
        task.wait(0.05) 
        workspace.CurrentCamera.CameraSubject = player.Character and player.Character:FindFirstChildWhichIsA("Humanoid")

        root_JesusFly_Init = player.Character and player.Character:FindFirstChild("HumanoidRootPart") 
        if root_JesusFly_Init then jesusFlyHeight = root_JesusFly_Init.Position.Y end 

        jesusFlyLoop = RunService.Heartbeat:Connect(function()
            char_JesusFly = player.Character 
            root_JesusFly = char_JesusFly and char_JesusFly:FindFirstChild("HumanoidRootPart") 
            hum_JesusFly = char_JesusFly and char_JesusFly:FindFirstChildWhichIsA("Humanoid") 
            if not jesusFlyEnabled or not root_JesusFly or not root_JesusFly.Parent or not hum_JesusFly or hum_JesusFly.Health <= 0 then
                if jesusFlyLoop and jesusFlyLoop.Connected then
                    jesusFlyLoop:Disconnect(); jesusFlyLoop = nil
                    pcall(function() player.CameraMode = originalCameraMode end)
                    pcall(function() workspace.CurrentCamera.CameraSubject = originalCameraSubject end)
                end
                return
            end
            if workspace.CurrentCamera.CameraSubject ~= hum_JesusFly then
                pcall(function() workspace.CurrentCamera.CameraSubject = hum_JesusFly end)
            end
            pcall(function() root_JesusFly.Velocity = Vector3.new(root_JesusFly.Velocity.X, 0, root_JesusFly.Velocity.Z) end) 
            pcall(function() root_JesusFly.Position = Vector3.new(root_JesusFly.Position.X, jesusFlyHeight + (root_JesusFly.Size.Y / 2), root_JesusFly.Position.Z) end) 
        end)
    else
        pcall(function() player.CameraMode = originalCameraMode end)
        pcall(function() workspace.CurrentCamera.CameraSubject = originalCameraSubject end)
        if jesusFlyLoop and jesusFlyLoop.Connected then
             jesusFlyLoop:Disconnect(); jesusFlyLoop = nil
        end
    end
end


HighJump_Original = function() 
    char_HighJump = player.Character 
    hum_HighJump = char_HighJump and char_HighJump:FindFirstChildOfClass("Humanoid") 
    if not hum_HighJump then ShowNotification("notif_error_humanoid_rootpart"); return end
    originalJump_HighJump = hum_HighJump.JumpPower 
    hum_HighJump.JumpPower = originalJump_HighJump * 3 
    hum_HighJump:ChangeState(Enum.HumanoidStateType.Jumping)
    ShowNotification("notif_highjump_success")
    task.wait(0.2)
    hum_HighJump.JumpPower = originalJump_HighJump 
end

function toggleTracers_Original() 
    tracersEnabled = not tracersEnabled
    tracersBtn_toggleTracers = MainFrame and MainFrame:FindFirstChild("TracersButton", true) 
    if tracersBtn_toggleTracers then tracersBtn_toggleTracers.Text = getText("button_tracers", tracersEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_tracers"), getText(tracersEnabled and "state_on" or "state_off"))

    if tracersLoop and tracersLoop.Connected then tracersLoop:Disconnect(); tracersLoop = nil end
    if tracersEnabled then
        tracersLoop = RunService.RenderStepped:Connect(function()
            if not tracersEnabled then return end
            myChar_Tracers = player.Character 
            myRoot_Tracers = myChar_Tracers and myChar_Tracers:FindFirstChild("HumanoidRootPart") 
            if not myRoot_Tracers then return end
            myPos_Tracers = myRoot_Tracers.Position 

            currentTracers_Tracers = {} 
            for _, otherPlayer in ipairs(Players:GetPlayers()) do
                if otherPlayer ~= player then
                    otherChar_Tracers = otherPlayer.Character 
                    otherRoot_Tracers = otherChar_Tracers and otherChar_Tracers:FindFirstChild("HumanoidRootPart") 
                    if otherRoot_Tracers then
                        tracerName_Tracers = "Tracer_" .. otherPlayer.UserId 
                        existingTracer_Tracers = tracersTable[tracerName_Tracers] 
                        targetPos_Tracers = otherRoot_Tracers.Position 

                        if not existingTracer_Tracers or not existingTracer_Tracers.Parent then
                            beam_Tracers = Instance.new("Beam") 
                            beam_Tracers.Name = tracerName_Tracers
                            beam_Tracers.Color = ColorSequence.new(otherPlayer.TeamColor.Color)
                            beam_Tracers.Width0 = 0.1
                            beam_Tracers.Width1 = 0.1
                            beam_Tracers.FaceCamera = true
                            beam_Tracers.Transparency = NumberSequence.new(0.5)
                            beam_Tracers.LightEmission = 0.5
                            beam_Tracers.LightInfluence = 0

                            attachment0_Tracers = Instance.new("Attachment", myRoot_Tracers) 
                            attachment1_Tracers = Instance.new("Attachment", otherRoot_Tracers) 
                            beam_Tracers.Attachment0 = attachment0_Tracers
                            beam_Tracers.Attachment1 = attachment1_Tracers
                            beam_Tracers.Parent = CoreGui 

                            
                            tracersTable[tracerName_Tracers] = beam_Tracers
                            currentTracers_Tracers[tracerName_Tracers] = true
                        else
                            pcall(function() existingTracer_Tracers.Color = ColorSequence.new(otherPlayer.TeamColor.Color) end)
                            currentTracers_Tracers[tracerName_Tracers] = true
                        end
                    end
                end
            end

            for name, tracer in pairs(tracersTable) do
                if not currentTracers_Tracers[name] then
                    if tracer and tracer.Parent then tracer:Destroy() end
                    tracersTable[name] = nil
                end
            end
        end)
    else
        for name, tracer in pairs(tracersTable) do
            if tracer and tracer.Parent then tracer:Destroy() end
        end
        tracersTable = {}
    end
end

function toggleNoArms_Original() 
    noArmsEnabled = not noArmsEnabled
    noArmsBtn_toggleNoArms = MainFrame and MainFrame:FindFirstChild("NoArmsButton", true) 
    if noArmsBtn_toggleNoArms then noArmsBtn_toggleNoArms.Text = getText("button_noarms", noArmsEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_noarms"), getText(noArmsEnabled and "state_on" or "state_off"))

    char_NoArms = player.Character 
    if not char_NoArms then ShowNotification("notif_error_char_not_found"); return end
    leftArm_NoArms = char_NoArms:FindFirstChild("Left Arm") or char_NoArms:FindFirstChild("LeftUpperArm") 
    rightArm_NoArms = char_NoArms:FindFirstChild("Right Arm") or char_NoArms:FindFirstChild("RightUpperArm") 

    if not leftArm_NoArms or not rightArm_NoArms then ShowNotification("notif_error_no_limbs", "No Arms"); return end

    if noArmsEnabled then
        pcall(function() leftArm_NoArms.LocalTransparencyModifier = 1 end)
        pcall(function() rightArm_NoArms.LocalTransparencyModifier = 1 end)
    else
        pcall(function() leftArm_NoArms.LocalTransparencyModifier = 0 end)
        pcall(function() rightArm_NoArms.LocalTransparencyModifier = 0 end)
    end
end

function toggleNoLegs_Original() 
    noLegsEnabled = not noLegsEnabled
    noLegsBtn_toggleNoLegs = MainFrame and MainFrame:FindFirstChild("NoLegsButton", true) 
    if noLegsBtn_toggleNoLegs then noLegsBtn_toggleNoLegs.Text = getText("button_nolegs", noLegsEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_nolegs"), getText(noLegsEnabled and "state_on" or "state_off"))

    char_NoLegs = player.Character 
    if not char_NoLegs then ShowNotification("notif_error_char_not_found"); return end
    leftLeg_NoLegs = char_NoLegs:FindFirstChild("Left Leg") or char_NoLegs:FindFirstChild("LeftLowerLeg") 
    rightLeg_NoLegs = char_NoLegs:FindFirstChild("Right Leg") or char_NoLegs:FindFirstChild("RightLowerLeg") 

    if not leftLeg_NoLegs or not rightLeg_NoLegs then ShowNotification("notif_error_no_limbs", "No Legs"); return end

    if noLegsEnabled then
        pcall(function() leftLeg_NoLegs.LocalTransparencyModifier = 1 end)
        pcall(function() rightLeg_NoLegs.LocalTransparencyModifier = 1 end)
    else
        pcall(function() leftLeg_NoLegs.LocalTransparencyModifier = 0 end)
        pcall(function() rightLeg_NoLegs.LocalTransparencyModifier = 0 end)
    end
end

function toggleRainbowChar_Original() 
    rainbowCharEnabled = not rainbowCharEnabled
    rainbowBtn_toggleRainbowChar = MainFrame and MainFrame:FindFirstChild("RainbowCharButton", true) 
    if rainbowBtn_toggleRainbowChar then rainbowBtn_toggleRainbowChar.Text = getText("button_rainbowchar", rainbowCharEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_rainbowchar"), getText(rainbowCharEnabled and "state_on" or "state_off"))

    if rainbowCharLoop then task.cancel(rainbowCharLoop); rainbowCharLoop = nil end
    if rainbowCharEnabled then
        rainbowCharLoop = task.spawn(function()
            hue_RainbowChar = 0 
            while rainbowCharEnabled do
                char_RainbowChar = player.Character 
                if not char_RainbowChar then break end
                hue_RainbowChar = (hue_RainbowChar + 0.01) % 1
                color_RainbowChar = Color3.fromHSV(hue_RainbowChar, 1, 1) 
                for _, part in ipairs(char_RainbowChar:GetDescendants()) do
                    if part:IsA("BasePart") then
                        pcall(function() part.Color = color_RainbowChar end)
                    end
                end
                task.wait(0.05)
            end
            char_RainbowChar_Off = player.Character 
            if char_RainbowChar_Off then
                for _, part in ipairs(char_RainbowChar_Off:GetDescendants()) do
                    if part:IsA("BasePart") then
                        pcall(function() part.Color = Color3.fromRGB(163, 162, 165) end) 
                    end
                end
            end
        end)
    else
        char_RainbowChar_Off_2 = player.Character 
        if char_RainbowChar_Off_2 then
            for _, part in ipairs(char_RainbowChar_Off_2:GetDescendants()) do
                if part:IsA("BasePart") then
                    pcall(function() part.Color = Color3.fromRGB(163, 162, 165) end) 
                end
            end
        end
    end
end

function ForceThirdPerson_Original() 
    hum_ForceThirdPerson = player.Character and player.Character:FindFirstChildOfClass("Humanoid") 
    if hum_ForceThirdPerson then
        player.CameraMode = Enum.CameraMode.Classic
        ShowNotification("notif_view_set", "Third Person")
    else
        ShowNotification("notif_error_humanoid_rootpart")
    end
end

function ForceFirstPerson_Original() 
    hum_ForceFirstPerson = player.Character and player.Character:FindFirstChildOfClass("Humanoid") 
    if hum_ForceFirstPerson then
        player.CameraMode = Enum.CameraMode.LockFirstPerson
        ShowNotification("notif_view_set", "First Person")
    else
        ShowNotification("notif_error_humanoid_rootpart")
    end
end

function HeadSit_Original() 
    targetToSitOn_HeadSit = target 
    myChar_HeadSit = player.Character 
    if not targetToSitOn_HeadSit or not targetToSitOn_HeadSit.Character or not targetToSitOn_HeadSit.Character:FindFirstChild("Head") then ShowNotification("notif_headsit_fail_notarget"); return end
    if not myChar_HeadSit or not myChar_HeadSit:FindFirstChild("HumanoidRootPart") then ShowNotification("notif_error_humanoid_rootpart"); return end

    targetHead_HeadSit = targetToSitOn_HeadSit.Character.Head 
    pcall(myChar_HeadSit.SetPrimaryPartCFrame, myChar_HeadSit, targetHead_HeadSit.CFrame * CFrame.new(0, 1.5, 0))
    ShowNotification("notif_headsit_success", targetToSitOn_HeadSit.Name)
end

function DestroyGUI_Original() 
    ShowNotification("notif_gui_destroyed")
    task.wait(0.1)
    if ScreenGui and ScreenGui.Parent then
        ScreenGui:Destroy()
    end
    pcall(function() if flyConnection and flyConnection.Connected then flyConnection:Disconnect() end end)
    pcall(function() if noclipConnection and noclipConnection.Connected then noclipConnection:Disconnect() end end)
    pcall(function() if infiniteJumpConn and infiniteJumpConn.Connected then infiniteJumpConn:Disconnect() end end)
    pcall(function() if walkOnWaterLoop then task.cancel(walkOnWaterLoop) end end)
    pcall(function() if tpToMouseConn and tpToMouseConn.Connected then tpToMouseConn:Disconnect() end end)
    pcall(function() if instantRespawnConn and instantRespawnConn.Connected then instantRespawnConn:Disconnect() end end)
    pcall(function() if antiAfkLoop then task.cancel(antiAfkLoop) end end)
    pcall(function() if godModeLoop then task.cancel(godModeLoop) end end)
    pcall(function() if chatSpamLoop then task.cancel(chatSpamLoop) end end)
    pcall(function() if orbitLoop and orbitLoop.Connected then orbitLoop:Disconnect() end end)
    pcall(function() if attachWeld and attachWeld.Parent then attachWeld:Destroy() end end)
    pcall(function() if infiniteStaminaLoop then task.cancel(infiniteStaminaLoop) end end)
    pcall(function() if phaseLoop then task.cancel(phaseLoop) end end)
    pcall(function() if annoyLoop then task.cancel(annoyLoop) end end)
    pcall(function() if fpsLoop then task.cancel(fpsLoop) end end)
    pcall(function() if renderSteppedFpsConn and renderSteppedFpsConn.Connected then renderSteppedFpsConn:Disconnect() end end)
    pcall(function() if ShiftLockActive and ShiftLockActive.Connected then ShiftLockActive:Disconnect() end end)
    pcall(function() if aimbotLoop and aimbotLoop.Connected then aimbotLoop:Disconnect() end end)
    pcall(function() if aimbotCameraLoop and aimbotCameraLoop.Connected then aimbotCameraLoop:Disconnect() end end)
    pcall(function() if rotateLoop and rotateLoop.Connected then rotateLoop:Disconnect() end end)
    pcall(function() if spamTpLoop then task.cancel(spamTpLoop) end end)
    pcall(function() if teleportAllLoop then task.cancel(teleportAllLoop) end end)
    pcall(function() if killBrickLoop then task.cancel(killBrickLoop) end end)
    pcall(function() if noclipSimpleLoop and noclipSimpleLoop.Connected then noclipSimpleLoop:Disconnect() end end)
    pcall(function() if espHeartbeatConnection and espHeartbeatConnection.Connected then espHeartbeatConnection:Disconnect() end end)
    pcall(function() if espPlayerAddedConnection and espPlayerAddedConnection.Connected then espPlayerAddedConnection:Disconnect() end end)
    pcall(function() for _, c in pairs(espCharacterAddedConnections) do if c and c.Connected then c:Disconnect() end end end)
    pcall(function() if spectateRenderLoop and spectateRenderLoop.Connected then spectateRenderLoop:Disconnect() end end)
    pcall(function() if lift_renderSteppedConn and lift_renderSteppedConn.Connected then lift_renderSteppedConn:Disconnect() end end)
    pcall(function() if lift_mouseUpConn and lift_mouseUpConn.Connected then lift_mouseUpConn:Disconnect() end end)
    pcall(function() if lift_loopThread then task.cancel(lift_loopThread) end end)
    pcall(function() if spiderLoop and spiderLoop.Connected then spiderLoop:Disconnect() end end)
    pcall(function() if jesusFlyLoop and jesusFlyLoop.Connected then jesusFlyLoop:Disconnect() end end)
    pcall(function() if tracersLoop and tracersLoop.Connected then tracersLoop:Disconnect() end end)
    pcall(function() if rainbowCharLoop then task.cancel(rainbowCharLoop) end end)
    pcall(function() if infiniteAirJumpConn and infiniteAirJumpConn.Connected then infiniteAirJumpConn:Disconnect() end end)
    pcall(function() if wallWalkLoop and wallWalkLoop.Connected then wallWalkLoop:Disconnect() end end)
    pcall(function() if teleportToolConn and teleportToolConn.Connected then teleportToolConn:Disconnect() end end)
    pcall(function() if bhopLoop then task.cancel(bhopLoop) end end)
    pcall(function() if autoClickerLoop then task.cancel(autoClickerLoop) end end)
    pcall(function() if antiVoidLoop and antiVoidLoop.Connected then antiVoidLoop:Disconnect() end end) 
    pcall(function() if spinPlayerLoop and spinPlayerLoop.Connected then spinPlayerLoop:Disconnect() end end) 
    pcall(function() if floatUpLoop then task.cancel(floatUpLoop) end end) 
    pcall(function() if upsideDownLoop and upsideDownLoop.Connected then upsideDownLoop:Disconnect() end end) 
    pcall(function() if forceFieldPart and forceFieldPart.Parent then forceFieldPart:Destroy() end end) 
    pcall(function() if cartoonOutlineEffect and cartoonOutlineEffect.Parent then cartoonOutlineEffect:Destroy() end end) 
    pcall(function() if invertColorsEffect and invertColorsEffect.Parent then invertColorsEffect:Destroy() end end) 
    pcall(function() if bloomEffect and bloomEffect.Parent then bloomEffect:Destroy() end end) 
    pcall(function() if dofEffect and dofEffect.Parent then dofEffect:Destroy() end end) 
    pcall(function() if sunRaysEffect and sunRaysEffect.Parent then sunRaysEffect:Destroy() end end) 
    pcall(function() if blurEffect and blurEffect.Parent then blurEffect:Destroy() end end) 
    pcall(function() if neonWorldEnabled then toggleNeonWorld_Original() end end) 
    pcall(function() if coloredFogEnabled then toggleColoredFog_Original() end end) 
end


ApplyWalkSpeedMultiplier_Original = function(value) 
    walkSpeedMultiplier = value 
    char_ApplyWSM = player.Character 
    hum_ApplyWSM = char_ApplyWSM and char_ApplyWSM:FindFirstChildOfClass("Humanoid") 
    if hum_ApplyWSM then
        baseSpeed_ApplyWSM = 16 
        speedVal_ApplyWSM = tonumber(MainFrame and MainFrame:FindFirstChild("SpeedValue", true) and MainFrame:FindFirstChild("SpeedValue", true).Text or baseSpeed_ApplyWSM) or baseSpeed_ApplyWSM 
        pcall(function() hum_ApplyWSM.WalkSpeed = speedVal_ApplyWSM * walkSpeedMultiplier end)
    end
end


ApplyJumpPowerMultiplier_Original = function(value) 
    jumpPowerMultiplier = value 
    char_ApplyJPM = player.Character 
    hum_ApplyJPM = char_ApplyJPM and char_ApplyJPM:FindFirstChildOfClass("Humanoid") 
    if hum_ApplyJPM then
        baseJump_ApplyJPM = 50 
        jumpVal_ApplyJPM = tonumber(MainFrame and MainFrame:FindFirstChild("JumpValue", true) and MainFrame:FindFirstChild("JumpValue", true).Text or baseJump_ApplyJPM) or baseJump_ApplyJPM 
        pcall(function() hum_ApplyJPM.JumpPower = jumpVal_ApplyJPM * jumpPowerMultiplier end)
    end
end

function toggleWallWalk_Original() 
    wallWalkEnabled = not wallWalkEnabled
    btn_toggleWallWalk = MainFrame and MainFrame:FindFirstChild("WallWalkButton", true) 
    if btn_toggleWallWalk then btn_toggleWallWalk.Text = getText("button_wallwalk", wallWalkEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_wallwalk"), getText(wallWalkEnabled and "state_on" or "state_off"))

    if wallWalkLoop and wallWalkLoop.Connected then wallWalkLoop:Disconnect(); wallWalkLoop = nil end
    if wallWalkEnabled then
        wallWalkLoop = RunService.RenderStepped:Connect(function()
            char_WallWalk = player.Character 
            hum_WallWalk = char_WallWalk and char_WallWalk:FindFirstChildOfClass("Humanoid") 
            root_WallWalk = char_WallWalk and char_WallWalk:FindFirstChild("HumanoidRootPart") 
            if not wallWalkEnabled or not hum_WallWalk or not root_WallWalk or hum_WallWalk.Health <= 0 then
                if wallWalkLoop and wallWalkLoop.Connected then wallWalkLoop:Disconnect(); wallWalkLoop = nil end
                pcall(function() hum_WallWalk.AutoRotate = true end)
                return
            end
            pcall(function() hum_WallWalk.AutoRotate = false end) 

            rayOrigin_WallWalk = root_WallWalk.Position 
            wallRayDistance_WallWalk = 3 
            directions_WallWalk = {root_WallWalk.CFrame.LookVector, -root_WallWalk.CFrame.LookVector, root_WallWalk.CFrame.RightVector, -root_WallWalk.CFrame.RightVector} 
            onWall_WallWalk = false 
            wallNormal_WallWalk = nil 

            for _, dir in ipairs(directions_WallWalk) do
                rayParams_WallWalk = RaycastParams.new() 
                rayParams_WallWalk.FilterDescendantsInstances = {char_WallWalk}
                rayParams_WallWalk.FilterType = Enum.RaycastFilterType.Exclude
                rayResult_WallWalk = Workspace:Raycast(rayOrigin_WallWalk, dir * wallRayDistance_WallWalk, rayParams_WallWalk) 
                if rayResult_WallWalk and rayResult_WallWalk.Normal and math.abs(rayResult_WallWalk.Normal.Y) < 0.5 then 
                    onWall_WallWalk = true
                    wallNormal_WallWalk = rayResult_WallWalk.Normal
                    break
                end
            end

            if onWall_WallWalk and wallNormal_WallWalk then
                gravityForce_WallWalk = Vector3.new(0, workspace.Gravity * root_WallWalk.AssemblyMass, 0) 
                counterGravity_WallWalk = -gravityForce_WallWalk 
                lookVector_WallWalk = (-wallNormal_WallWalk):Cross(Vector3.new(0,1,0)) 
                targetCFrame_WallWalk = CFrame.lookAt(root_WallWalk.Position, root_WallWalk.Position + lookVector_WallWalk, -wallNormal_WallWalk) 
                root_WallWalk.CFrame = root_WallWalk.CFrame:Lerp(targetCFrame_WallWalk, 0.2)
                if root_WallWalk:FindFirstChild("WallWalkForce") then root_WallWalk.WallWalkForce:Destroy() end
                force_WallWalk = Instance.new("BodyForce") 
                force_WallWalk.Name = "WallWalkForce"
                force_WallWalk.Force = counterGravity_WallWalk
                force_WallWalk.Parent = root_WallWalk
                Debris:AddItem(force_WallWalk, 0.1) 
            else
                 if root_WallWalk:FindFirstChild("WallWalkForce") then root_WallWalk.WallWalkForce:Destroy() end
                 pcall(function() hum_WallWalk.AutoRotate = true end) 
            end
        end)
    else
        char_WallWalk_Off = player.Character 
        if char_WallWalk_Off then
             root_WallWalk_Off = char_WallWalk_Off:FindFirstChild("HumanoidRootPart") 
             if root_WallWalk_Off and root_WallWalk_Off:FindFirstChild("WallWalkForce") then root_WallWalk_Off.WallWalkForce:Destroy() end
             hum_WallWalk_Off = char_WallWalk_Off:FindFirstChildOfClass("Humanoid") 
             if hum_WallWalk_Off then pcall(function() hum_WallWalk_Off.AutoRotate = true end) end
        end
        if wallWalkLoop and wallWalkLoop.Connected then wallWalkLoop:Disconnect(); wallWalkLoop = nil end
    end
end

function toggleTeleportTool_Original() 
    teleportToolEnabled = not teleportToolEnabled
    btn_toggleTPTool = MainFrame and MainFrame:FindFirstChild("TeleportToolButton", true) 
    if btn_toggleTPTool then btn_toggleTPTool.Text = getText("button_tptool", teleportToolEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_tptool") .. " (Click)", getText(teleportToolEnabled and "state_on" or "state_off"))

    if teleportToolEnabled then
        if teleportToolConn and teleportToolConn.Connected then teleportToolConn:Disconnect() end
        teleportToolConn = mouse.Button1Down:Connect(function()
            if teleportToolEnabled then
                targetPos_TPTool = mouse.Hit.Position 
                if targetPos_TPTool then
                    myChar_TPTool = player.Character 
                    root_TPTool = myChar_TPTool and myChar_TPTool:FindFirstChild("HumanoidRootPart") 
                    if root_TPTool then
                        pcall(function() root_TPTool.CFrame = CFrame.new(targetPos_TPTool + Vector3.new(0, 3, 0)) end)
                        pcall(function() root_TPTool.Velocity = Vector3.new(0,0,0) end) 
                        pcall(function() root_TPTool.RotVelocity = Vector3.new(0,0,0) end)
                    end
                else
                    ShowNotification("notif_error_tptool")
                end
            end
        end)
    else
        if teleportToolConn and teleportToolConn.Connected then teleportToolConn:Disconnect(); teleportToolConn = nil end
    end
end

function toggleLowGravity_Original() 
    lowGravityEnabled = not lowGravityEnabled
    btn_toggleLowGrav = MainFrame and MainFrame:FindFirstChild("LowGravityButton", true) 
    if btn_toggleLowGrav then btn_toggleLowGrav.Text = getText("button_lowgravity", lowGravityEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_lowgravity"), getText(lowGravityEnabled and "state_on" or "state_off"))

    if lowGravityEnabled then
        originalGravity = workspace.Gravity 
        pcall(function() workspace.Gravity = originalGravity / 3 end) 
    else
        pcall(function() workspace.Gravity = originalGravity end) 
    end
end

function toggleBunnyHop_Original() 
    bhopEnabled = not bhopEnabled
    btn_toggleBHop = MainFrame and MainFrame:FindFirstChild("BunnyHopButton", true) 
    if btn_toggleBHop then btn_toggleBHop.Text = getText("button_bhop", bhopEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_bhop"), getText(bhopEnabled and "state_on" or "state_off"))

    if bhopLoop then task.cancel(bhopLoop); bhopLoop = nil end
    if bhopEnabled then
        bhopLoop = task.spawn(function()
            while bhopEnabled do
                char_BHop = player.Character 
                hum_BHop = char_BHop and char_BHop:FindFirstChildOfClass("Humanoid") 
                if hum_BHop and hum_BHop.MoveDirection.Magnitude > 0 and hum_BHop:GetState() == Enum.HumanoidStateType.Running then
                    pcall(hum_BHop.ChangeState, hum_BHop, Enum.HumanoidStateType.Jumping)
                end
                if not bhopEnabled then break end
                task.wait(0.1) 
            end
        end)
    end
end

function CycleChamsStyle_Original(dontCycle) 
    if not dontCycle then
        settings_tbl.Chams_Style = (settings_tbl.Chams_Style % 2) + 1 
    end
    styleName_CycleChams = (settings_tbl.Chams_Style == 1 and "Team Color" or "Red Glow") 
    ShowNotification("notif_chams_style_set", styleName_CycleChams)
    if espScriptEnabled then
        for _, p_target in ipairs(Players:GetPlayers()) do destroy_chams(p_target.Character) end
    end
end


ApplyESPBoxStyle_Original = function(styleName) 
    settings_tbl.ESP_BoxStyle = styleName
    ShowNotification("ESP Box Style set to: %s (Placeholder)", styleName)
end

ApplyESPBoxSizeSlider = function(value) 
    settings_tbl.ESP_BoxSize = value
end

function toggleAutoClicker_Original() 
    autoClickerEnabled = not autoClickerEnabled
    btn_toggleAutoClicker = FlingToolsOtherButtons["AutoClicker"] 
    if btn_toggleAutoClicker then btn_toggleAutoClicker.Text = getText("button_autoclicker", autoClickerEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_autoclicker"), getText(autoClickerEnabled and "state_on" or "state_off"))

    if autoClickerLoop then task.cancel(autoClickerLoop); autoClickerLoop = nil end
    if autoClickerEnabled then
        autoClickerLoop = task.spawn(function()
            while autoClickerEnabled do
                pcall(mouse.Button1Down, mouse);
                task.wait(0.05); 
                pcall(mouse.Button1Up, mouse);
                task.wait(0.1); 
                if not autoClickerEnabled then break end
            end
        end)
    end
end

PrintPlayerPositions_Original = function() 
    print("--- Player Positions ---")
    for _, p in ipairs(Players:GetPlayers()) do
        char_PrintPos = p.Character 
        root_PrintPos = char_PrintPos and char_PrintPos:FindFirstChild("HumanoidRootPart") 
        if root_PrintPos then
            print(string.format("%s (%s): %s", p.DisplayName, p.Name, tostring(root_PrintPos.Position)))
        else
            print(string.format("%s (%s): No Character/RootPart found.", p.DisplayName, p.Name))
        end
    end
    print("------------------------")
    ShowNotification("notif_printpositions_done")
end

function toggleAntiVoid_Original() 
    antiVoidEnabled = not antiVoidEnabled
    btn_toggleAntiVoid = MainFrame and MainFrame:FindFirstChild("AntiVoidButton", true) 
    if btn_toggleAntiVoid then btn_toggleAntiVoid.Text = getText("button_antivoid", antiVoidEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_antivoid"), getText(antiVoidEnabled and "state_on" or "state_off"))

    if antiVoidLoop and antiVoidLoop.Connected then antiVoidLoop:Disconnect(); antiVoidLoop = nil end
    if antiVoidEnabled then
        antiVoidLoop = RunService.Heartbeat:Connect(function()
            char_AntiVoid = player.Character 
            root_AntiVoid = char_AntiVoid and char_AntiVoid:FindFirstChild("HumanoidRootPart") 
            if not antiVoidEnabled or not root_AntiVoid or not root_AntiVoid.Parent then
                 if antiVoidLoop and antiVoidLoop.Connected then antiVoidLoop:Disconnect(); antiVoidLoop = nil end
                 return
            end
            if root_AntiVoid.Position.Y < workspace.FallenPartsDestroyHeight + 10 then
                ShowNotification("Anti-Void triggered!")
                root_AntiVoid.Velocity = Vector3.new(0, 80, 0) 
                task.wait(0.2)
                root_AntiVoid.Velocity = Vector3.new(0, 0, 0) 
            end
        end)
    end
end

CycleSkybox_Original = function() 
    currentSkyboxIndex = (currentSkyboxIndex % #skyboxList) + 1
    newId_CycleSkybox = skyboxList[currentSkyboxIndex] 
    sky_CycleSkybox = Lighting:FindFirstChildOfClass("Sky") or Instance.new("Sky", Lighting) 
    props_CycleSkybox = {"SkyboxBk", "SkyboxDn", "SkyboxFt", "SkyboxLf", "SkyboxRt", "SkyboxUp"} 
    for _, prop in ipairs(props_CycleSkybox) do pcall(function() sky_CycleSkybox[prop] = newId_CycleSkybox end) end
    ShowNotification("Skybox set to: %s", newId_CycleSkybox)
    if skyboxInput then skyboxInput.Text = newId_CycleSkybox:match("%d+") or newId_CycleSkybox end 
end

PanicMode_Original = function() 
    ShowNotification("notif_panic_activated")
    originalResetState_Panic = resetCheatsOnDeathEnabled 
    resetCheatsOnDeathEnabled = true 
    resetStatesOnSpawn(player.Character) 
    resetCheatsOnDeathEnabled = originalResetState_Panic 
    guiVisible = false; ScreenGui.Enabled = false; 
    
    if MinimizedButton and MinimizedButton.Visible then isMinimized = false; MinimizedButton.Visible = false end -- Ensure it's not minimized
    if MainFrame then MainFrame.Visible = false end -- Hide main frame just in case
end

function toggleAutoRespawn_Original() -- Made global
    autoRespawnEnabled = not autoRespawnEnabled
    btn_toggleAutoRespawn = FlingToolsOtherButtons["AutoRespawn"] -- Made global with suffix
    if btn_toggleAutoRespawn then btn_toggleAutoRespawn.Text = getText("button_autorespawn", autoRespawnEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_autorespawn"), getText(autoRespawnEnabled and "state_on" or "state_off"))

    handleDied_AutoRespawn = function() -- Made global (nested func)
        if autoRespawnEnabled then
            task.wait(0.1) -- Short delay
            pcall(player.LoadCharacter, player)
        end
    end

    diedConnection_AutoRespawn = player.Character and player.Character:FindFirstChildOfClass("Humanoid") and player.Character.Humanoid.Died -- Made global with suffix
    if autoRespawnEnabled then
        if diedConnection_AutoRespawn then
            connections_AutoRespawn = getconnections and getconnections(diedConnection_AutoRespawn) or {} -- Made global with suffix
            alreadyConnected_AutoRespawn = false -- Made global with suffix
            for _, conn in ipairs(connections_AutoRespawn) do
                if conn.Function == handleDied_AutoRespawn then 
                    alreadyConnected_AutoRespawn = true; break
                end
            end
            if not alreadyConnected_AutoRespawn then
                 diedConnection_AutoRespawn:Connect(handleDied_AutoRespawn)
            end
        end
        player.CharacterAdded:Connect(function(char)
            hum_AutoRespawn_charAdded = char:FindFirstChildOfClass("Humanoid") -- Made global with suffix
            if hum_AutoRespawn_charAdded then
                 connections_AutoRespawn_charAdded = getconnections and getconnections(hum_AutoRespawn_charAdded.Died) or {} -- Made global with suffix
                 alreadyConnected_AutoRespawn_charAdded = false -- Made global with suffix
                 for _, conn in ipairs(connections_AutoRespawn_charAdded) do
                     if conn.Function == handleDied_AutoRespawn then alreadyConnected_AutoRespawn_charAdded = true; break end
                 end
                 if not alreadyConnected_AutoRespawn_charAdded then
                      hum_AutoRespawn_charAdded.Died:Connect(handleDied_AutoRespawn)
                 end
            end
        end)
    else
    end
end


ClearChat_Original = function() -- Made global
    chatGui_ClearChat = player.PlayerGui:FindFirstChild("Chat") -- Made global with suffix
    frame_ClearChat = chatGui_ClearChat and chatGui_ClearChat:FindFirstChild("Frame") -- Made global with suffix
    messageLog_ClearChat = frame_ClearChat and frame_ClearChat:FindFirstChild("ChatChannelParentFrame") and frame_ClearChat.ChatChannelParentFrame:FindFirstChild("Frame_MessageLogDisplay") and frame_ClearChat.ChatChannelParentFrame.Frame_MessageLogDisplay:FindFirstChild("Scroller") -- Made global with suffix
    if messageLog_ClearChat then
        for _, v in ipairs(messageLog_ClearChat:GetChildren()) do
            if v:IsA("Frame") or v:IsA("TextLabel") then 
                v:Destroy()
            end
        end
        ShowNotification("notif_clearchat_done")
    else
        warn("Clear Chat: Could not find chat log GUI elements.")
    end
end

GetUserIDFromInput_Original = function() -- Made global
    if not userIdInput then ShowNotification("notif_error_input_not_found", "User ID"); return end
    name_GetUserID = userIdInput.Text -- Made global with suffix
    if name_GetUserID == "" then ShowNotification("Get User ID Error: Enter a username."); return end
    foundPlayer_GetUserID = Players:FindFirstChild(name_GetUserID) or Players:GetPlayerByUserId(tonumber(name_GetUserID) or 0) -- Made global with suffix
    if not foundPlayer_GetUserID then 
        for _, pSearch in ipairs(Players:GetPlayers()) do
            if pSearch.DisplayName:lower() == name_GetUserID:lower() then
                foundPlayer_GetUserID = pSearch
                break
            end
        end
    end

    if foundPlayer_GetUserID then
        userIdInputText = tostring(foundPlayer_GetUserID.UserId) 
        ShowNotification("notif_userid_success", foundPlayer_GetUserID.Name, foundPlayer_GetUserID.UserId)
    else
        ShowNotification("notif_userid_fail_noplayer", name_GetUserID)
    end
end

CopyUserID_Original = function() -- Made global
    if userIdInputText ~= "" then
        success_CopyUserID = pcall(function() setclipboard(userIdInputText) end) -- Made global with suffix
        if success_CopyUserID then ShowNotification("notif_userid_copied")
        else ShowNotification("notif_copy_unavailable") end
    else
        ShowNotification("notif_userid_copy_fail")
    end
end

SendWebhook_Original = function() -- Made global
    if not HttpService then ShowNotification("notif_webhook_fail_http"); return end
    if not webhookUrlInput or webhookUrlInput.Text == "" then ShowNotification("notif_webhook_fail_url"); return end
    if not webhookMessageInput then return end

    url_SendWebhook = webhookUrlInput.Text -- Made global with suffix
    message_SendWebhook = webhookMessageInput.Text -- Made global with suffix

    data_SendWebhook = { content = message_SendWebhook } -- Made global with suffix
    success_SendWebhook, err_SendWebhook = pcall(function() -- Made global with suffix (group)
        HttpService:PostAsync(url_SendWebhook, HttpService:JSONEncode(data_SendWebhook), Enum.HttpContentType.ApplicationJson)
    end)

    if success_SendWebhook then
        ShowNotification("notif_webhook_success")
    else
        ShowNotification("notif_webhook_error", tostring(err_SendWebhook))
        warn("Webhook Send Error:", err_SendWebhook)
    end
end

-- [[ NEW V8.3.6 FUNCTIONS ]] --

function togglePlatformStand_Original() -- Made global
    platformStandEnabled = not platformStandEnabled
    btn_togglePlatStand = FlingToolsOtherButtons["PlatformStand"] -- Made global with suffix
    if btn_togglePlatStand then btn_togglePlatStand.Text = getText("button_platformstand", platformStandEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_platformstand"), getText(platformStandEnabled and "state_on" or "state_off"))

    char_togglePlatStand = player.Character -- Made global with suffix
    hum_togglePlatStand = char_togglePlatStand and char_togglePlatStand:FindFirstChildOfClass("Humanoid") -- Made global with suffix
    if hum_togglePlatStand then
        pcall(function() hum_togglePlatStand.PlatformStand = platformStandEnabled end)
    end
end

ApplyCharacterScale_Original = function(value) -- Made global
    characterScaleValue = value 
    char_ApplyCharScale = player.Character 
    if char_ApplyCharScale then
        humDesc_ApplyCharScale = char_ApplyCharScale:FindFirstChild("HumanoidDescription") 
        if humDesc_ApplyCharScale then
            pcall(function() humDesc_ApplyCharScale.DepthScale = value end)
            pcall(function() humDesc_ApplyCharScale.HeightScale = value end)
            pcall(function() humDesc_ApplyCharScale.WidthScale = value end)
            pcall(function() humDesc_ApplyCharScale.HeadScale = value end)
            hum_ApplyCharScale = char_ApplyCharScale:FindFirstChildOfClass("Humanoid") 
            if hum_ApplyCharScale then
                success_ApplyCharScale, err_ApplyCharScale = pcall(hum_ApplyCharScale.ApplyDescription, hum_ApplyCharScale, humDesc_ApplyCharScale) 
                if not success_ApplyCharScale then warn("Failed to re-apply description for scale:", err_ApplyCharScale) end
            end
        else
            root_ApplyCharScale_fallback = char_ApplyCharScale:FindFirstChild("HumanoidRootPart") 
            if root_ApplyCharScale_fallback then
                scaleFactor_ApplyCharScale_fallback = value / 1 
                for _, part in ipairs(char_ApplyCharScale:GetDescendants()) do
                    if part:IsA("BasePart") then
                        pcall(function() part.Size = part.Size * scaleFactor_ApplyCharScale_fallback end)
                    end
                end
            end
        end
    end
    ShowNotification("notif_charscale_fe") 
end

-- Définition des polices Bypass (copiée et adaptée depuis CHAT BYPASS LE MEILLEUR.txt)
chatBypassFonts = {
    ["The best 100%bypass"] = {
        [" "] = "   ",
        ["A"] = "å̲", ["B"] = "ß̲", ["C"] = "¢̲", ["D"] = "Ð̲", ["E"] = "€̲", ["F"] = "₣̲", ["G"] = "₲̲", ["H"] = "H̲", ["I"] = "ł̲", ["J"] = "J̫̫̲", ["K"] = "ҟ̲", ["L"] = "ℓ̲", ["M"] = "₥̲", ["N"] = "₦̲", ["O"] = "Ø̲", ["P"] = "₱̲", ["Q"] = "Q̲", ["R"] = "я̲", ["S"] = "$̲", ["T"] = "†̲", ["U"] = "µ̲", ["V"] = "Ṽ̲", ["W"] = "₩̲", ["X"] = "ж̲", ["Y"] = "¥̲", ["Z"] = "乙̲",
        ["a"] = "ą̲", ["b"] = "ß̲", ["c"] = "¢̲", ["d"] = "ð̲", ["e"] = "ḙ̲", ["f"] = "ƒ̲", ["g"] = "ǥ̲", ["h"] = "ℏ̲", ["i"] = "ɨ̲", ["j"] = "ʝ̲", ["k"] = "ҟ̲", ["l"] = "ℓ̲", ["m"] = "₥̲", ["n"] = "₦̲", ["o"] = "ø̲", ["p"] = "₱̲", ["q"] = "q̲", ["r"] = "r̲", ["s"] = "$̲", ["t"] = "†̲", ["u"] = "µ̲", ["v"] = "ṽ̲", ["w"] = "₩̲", ["x"] = "ж̲", ["y"] = "¥̲", ["z"] = "ƶ̲",
    },
    ["font with special characters bypass 90%"] = {
        [" "] = "   ",
        ["A"] = "@", ["B"] = "ß", ["C"] = "¢", ["D"] = "Ð", ["E"] = "€", ["F"] = "₣", ["G"] = "₲", ["H"] = "₴", ["I"] = "ł", ["J"] = "J̫̫", ["K"] = "ҡ", ["L"] = "ℓ", ["M"] = "₥", ["N"] = "₦", ["O"] = "Ø", ["P"] = "₱", ["Q"] = "Q", ["R"] = "я", ["S"] = "$", ["T"] = "†", ["U"] = "µ", ["V"] = "Ṽ", ["W"] = "₩", ["X"] = "ж", ["Y"] = "¥", ["Z"] = "乙",
        ["a"] = "ą", ["b"] = "ß", ["c"] = "¢", ["d"] = "ð", ["e"] = "ḙ", ["f"] = "ƒ", ["g"] = "ǥ", ["h"] = "ℏ", ["i"] = "ɨ", ["j"] = "ʝ", ["k"] = "ҡ", ["l"] = "ℓ", ["m"] = "₥", ["n"] = "₦", ["o"] = "ø", ["p"] = "₱", ["q"] = "q", ["r"] = "®", ["s"] = "$", ["t"] = "†", ["u"] = "µ", ["v"] = "ṽ", ["w"] = "₩", ["x"] = "ж", ["y"] = "¥", ["z"] = "ƶ",
    },
    ["font mystique 78% bypass"] = {
        [" "] = "   ",
        ["A"] = "α", ["B"] = "ϐ", ["C"] = "©", ["D"] = "đ", ["E"] = "ξ", ["F"] = "ƭ", ["G"] = "ʛ", ["H"] = "ħ", ["I"] = "ι", ["J"] = "ʆ", ["K"] = "ҡ", ["L"] = "⇋", ["M"] = "ϻ", ["N"] = "₪", ["O"] = "ø", ["P"] = "ρ", ["Q"] = "φ", ["R"] = "ʀ", ["S"] = "§", ["T"] = "Ŧ", ["U"] = "υ", ["V"] = "√", ["W"] = "ω", ["X"] = "χ", ["Y"] = "ƴ", ["Z"] = "ζ",
        ["a"] = "α", ["b"] = "β", ["c"] = "ç", ["d"] = "đ", ["e"] = "ε", ["f"] = "ƒ", ["g"] = "ɠ", ["h"] = "ђ", ["i"] = "ι", ["j"] = "ʝ", ["k"] = "к", ["l"] = "ł", ["m"] = "ϻ", ["n"] = "ŋ", ["o"] = "ø", ["p"] = "ρ", ["q"] = "φ", ["r"] = "я", ["s"] = "ƨ", ["t"] = "ŧ", ["u"] = "υ", ["v"] = "ѵ", ["w"] = "щ", ["x"] = "χ", ["y"] = "γ", ["z"] = "ƶ",
    },
    ["font énigmatique -100% bypass"] = {
        [" "] = "   ",
        ["A"] = "Λ", ["B"] = "Ɓ", ["C"] = "Ƈ", ["D"] = "Ɗ", ["E"] = "Σ", ["F"] = "Ғ", ["G"] = "Ǥ", ["H"] = "Ҕ", ["I"] = "Ɨ", ["J"] = "ʆ", ["K"] = "Қ", ["L"] = "Ŀ", ["M"] = "М", ["N"] = "И", ["O"] = "Φ", ["P"] = "Ƥ", ["Q"] = "Ҩ", ["R"] = "Я", ["S"] = "Ϛ", ["T"] = "Ҭ", ["U"] = "Ц", ["V"] = "Ѵ", ["W"] = "Ш", ["X"] = "Ҳ", ["Y"] = "Ұ", ["Z"] = "Ž",
        ["a"] = "λ", ["b"] = "ƀ", ["c"] = "ȼ", ["d"] = "đ", ["e"] = "ε", ["f"] = "ƒ", ["g"] = "ɠ", ["h"] = "ђ", ["i"] = "ɩ", ["j"] = "ʝ", ["k"] = "ҟ", ["l"] = "ŀ", ["m"] = "м", ["n"] = "и", ["o"] = "σ", ["p"] = "ρ", ["q"] = "զ", ["r"] = "я", ["s"] = "ṣ", ["t"] = "ţ", ["u"] = "µ", ["v"] = "ѵ", ["w"] = "щ", ["x"] = "Ӿ", ["y"] = "ү", ["z"] = "ʑ",
    },
    ["font with emojis 99% bypass "] = {
        [" "] = "     ",
        ["A"] = "🇦ا و", ["B"] = "🇧ا و", ["C"] = "🇨ا و", ["D"] = "🇩ا و", ["E"] = "🇪ا و", ["F"] = "🇫ا و", ["G"] = "🇬ا و", ["H"] = "🇭ا و", ["I"] = "🇮ا و", ["J"] = "🇯ا و", ["K"] = "🇰ا و", ["L"] = "🇱ا و", ["M"] = "🇲ا و", ["N"] = "🇳ا و", ["O"] = "🇴ا و", ["P"] = "🇵ا و", ["Q"] = "🇶ا و", ["R"] = "🇷ا و", ["S"] = "🇸ا و", ["T"] = "🇹ا و", ["U"] = "🇺ا و", ["V"] = "🇻ا و", ["W"] = "🇼ا و", ["X"] = "🇽ا و", ["Y"] = "🇾ا و", ["Z"] = "🇿ا و",
        ["a"] = "🇦ا و", ["b"] = "🇧ا و", ["c"] = "🇨ا و", ["d"] = "🇩ا و", ["e"] = "🇪ا و", ["f"] = "🇫ا و", ["g"] = "🇬ا و", ["h"] = "🇭ا و", ["i"] = "🇮ا و", ["j"] = "🇯ا و", ["k"] = "🇰ا و", ["l"] = "🇱ا و", ["m"] = "🇲ا و", ["n"] = "🇳ا و", ["o"] = "🇴ا و", ["p"] = "🇵ا و", ["q"] = "🇶ا و", ["r"] = "🇷ا و", ["s"] = "🇸ا و", ["t"] = "🇹ا و", ["u"] = "🇺ا و", ["v"] = "🇻ا و", ["w"] = "🇼ا و", ["x"] = "🇽ا و", ["y"] = "🇾ا و", ["z"] = "🇿ا و",
    },
    ["CustomFontWithSpecialLetters"] = {
        [" "] = "   ",
        ["a"] = "+ᵃ", ["b"] = "+ᵇ", ["c"] = "+ᶜ", ["d"] = "+ᵈ", ["e"] = "+ᵉ", ["f"] = "+ᶠ", ["g"] = "+ᵍ", ["h"] = "+ʰ", ["i"] = "+ᵢ", ["j"] = "+ʲ", ["k"] = "+ᵏ", ["l"] = "+ˡ", ["m"] = "+ᵐ", ["n"] = "+ⁿ", ["o"] = "+ᵒ", ["p"] = "+ᵖ", ["q"] = "+ᵠ", ["r"] = "+ʳ", ["s"] = "+ˢ", ["t"] = "+ᵗ", ["u"] = "+ᵘ", ["v"] = "+ᵛ", ["w"] = "+ʷ", ["x"] = "+ˣ", ["y"] = "+ʸ", ["z"] = "+ᶻ",
        ["A"] = "+ᴬ", ["B"] = "+ᴮ", ["C"] = "+ᶜ", ["D"] = "+ᴰ", ["E"] = "+ᴱ", ["F"] = "+ᶠ", ["G"] = "+ᵍ", ["H"] = "+ʰ", ["I"] = "+ᵢ", ["J"] = "+ʲ", ["K"] = "+ᵏ", ["L"] = "+ˡ", ["M"] = "+ᵐ", ["N"] = "+ⁿ", ["O"] = "+ᵒ", ["P"] = "+ᵖ", ["Q"] = "+ᵠ", ["R"] = "+ʳ", ["S"] = "+ˢ", ["T"] = "+ᵗ", ["U"] = "+ᵘ", ["V"] = "+ᵛ", ["W"] = "+ʷ", ["X"] = "+ˣ", ["Y"] = "+ʸ", ["Z"] = "+ᶻ",
    },
    ["Kanji Font"] = {
        [" "] = "　", -- Using a full-width space for Kanji
        ["a"] = "丹", ["b"] = "日", ["c"] = "亡", ["d"] = "句", ["e"] = "ヨ", ["f"] = "乍", ["g"] = "呂", ["h"] = "廾", ["i"] = "工", ["j"] = "勹", ["k"] = "片", ["l"] = "し", ["m"] = "冊", ["n"] = "几", ["o"] = "回", ["p"] = "尸", ["q"] = "甲", ["r"] = "尺", ["s"] = "己", ["t"] = "卞", ["u"] = "凵", ["v"] = "レ", ["w"] = "山", ["x"] = "メ", ["y"] = "と", ["z"] = "乙",
        ["A"] = "丹", ["B"] = "日", ["C"] = "亡", ["D"] = "句", ["E"] = "ヨ", ["F"] = "乍", ["G"] = "呂", ["H"] = "廾", ["I"] = "工", ["J"] = "勹", ["K"] = "片", ["L"] = "し", ["M"] = "冊", ["N"] = "几", ["O"] = "回", ["P"] = "尸", ["Q"] = "甲", ["R"] = "尺", ["S"] = "己", ["T"] = "卞", ["U"] = "凵", ["V"] = "レ", ["W"] = "山", ["X"] = "メ", ["Y"] = "と", ["Z"] = "乙",
    },
}
-- Sélectionner la police par défaut
chatBypassSelectedFontName = "The best 100%bypass" -- Mettre ici le nom exact de la police par défaut
chatBypassSelectedFont = chatBypassFonts[chatBypassSelectedFontName]

-- Fonction pour remplacer les lettres (copiée depuis CHAT BYPASS LE MEILLEUR.txt)
local function replaceLettersBypass(text)
    if not chatBypassSelectedFont then return text end -- Safety check

    local modifiedText = ""
    for i = 1, #text do
        local char = text:sub(i, i)
        modifiedText = modifiedText .. (chatBypassSelectedFont[char] or char)
    end
    return modifiedText
end

-- Fonction pour envoyer le message (adaptée depuis CHAT BYPASS LE MEILLEUR.txt)
-- Remplace ton ancienne fonction par celle-ci
SendBypassMessage = function(message)
    if message == "" then return end

    local modifiedMessage = replaceLettersBypass(message)
    local success, err

    -- NOUVELLE MÉTHODE : TextChatService (la plus fiable en 2024+)
    local TextChatService = game:GetService("TextChatService")
    if TextChatService and TextChatService:FindFirstChild("TextChannels") and TextChatService.TextChannels:FindFirstChild("RBXGeneral") then
        local generalChannel = TextChatService.TextChannels.RBXGeneral
        success, err = pcall(function()
            generalChannel:SendAsync(modifiedMessage)
        end)
        if success then
            if chatBypassTextBox then chatBypassTextBox.Text = "" end
            return true -- On a réussi, on s'arrête là
        end
    end

    -- ANCIENNE MÉTHODE (Fallback pour les vieux jeux)
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local legacyChatEvent = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
    if legacyChatEvent then
        local sayRequest = legacyChatEvent:FindFirstChild("SayMessageRequest")
        if sayRequest then
            success, err = pcall(function()
                sayRequest:FireServer(modifiedMessage, "All")
            end)
            if success then
                if chatBypassTextBox then chatBypassTextBox.Text = "" end
                return true -- On a réussi avec l'ancienne méthode
            end
        end
    end

    -- Si tout a échoué, on notifie l'échec
    warn("Bypass Send Error: Both TextChatService and Legacy Chat methods failed. Error: ", tostring(err))
    ShowNotification("notif_bypass_send_error", tostring(err) or "Aucun chemin de chat valide trouvé.")
    return false
end

-- [[ NEW V9.0.0 FUNCTIONS ]] --

function toggleSpinPlayer_Original() -- Made global
    spinPlayerEnabled = not spinPlayerEnabled
    btn_toggleSpinPlayer = MainFrame and MainFrame:FindFirstChild("SpinPlayerButton", true) -- Made global with suffix
    if btn_toggleSpinPlayer then btn_toggleSpinPlayer.Text = getText("button_spinplayer", spinPlayerEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_spinplayer"), getText(spinPlayerEnabled and "state_on" or "state_off"))

    if spinPlayerLoop and spinPlayerLoop.Connected then spinPlayerLoop:Disconnect(); spinPlayerLoop = nil end
    if spinPlayerEnabled then
        spinPlayerLoop = RunService.RenderStepped:Connect(function(dt)
            char_SpinPlayer = player.Character -- Made global with suffix
            root_SpinPlayer = char_SpinPlayer and char_SpinPlayer:FindFirstChild("HumanoidRootPart") -- Made global with suffix
            if not spinPlayerEnabled or not root_SpinPlayer or not root_SpinPlayer.Parent then
                if spinPlayerLoop and spinPlayerLoop.Connected then spinPlayerLoop:Disconnect(); spinPlayerLoop = nil end
                return
            end
            pcall(function() root_SpinPlayer.CFrame = root_SpinPlayer.CFrame * CFrame.Angles(0, math.rad(360 * dt * 1.5), 0) end) 
        end)
    end
end

function toggleHeadless_Original() -- Made global
    headlessEnabled = not headlessEnabled
    btn_toggleHeadless = MainFrame and MainFrame:FindFirstChild("HeadlessButton", true) -- Made global with suffix
    if btn_toggleHeadless then btn_toggleHeadless.Text = getText("button_headless", headlessEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_headless"), getText(headlessEnabled and "state_on" or "state_off"))

    char_Headless = player.Character -- Made global with suffix
    head_Headless = char_Headless and char_Headless:FindFirstChild("Head") -- Made global with suffix
    if not head_Headless then ShowNotification("notif_error_nohead", "Headless"); return end

    if headlessEnabled then
        pcall(function() head_Headless.LocalTransparencyModifier = 1 end)
    else
        pcall(function() head_Headless.LocalTransparencyModifier = 0 end)
    end
end

function toggleFreezeCam_Original() -- Made global
    freezeCamEnabled = not freezeCamEnabled
    btn_toggleFreezeCam = MainFrame and MainFrame:FindFirstChild("FreezeCamButton", true) -- Made global with suffix
    if btn_toggleFreezeCam then btn_toggleFreezeCam.Text = getText("button_freezecam", freezeCamEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_freezecam"), getText(freezeCamEnabled and "state_on" or "state_off"))

    if freezeCamEnabled then
        originalCamType = Camera.CameraType 
        pcall(function() Camera.CameraType = Enum.CameraType.Scriptable end)
        if Camera.CameraType ~= Enum.CameraType.Scriptable then
             ShowNotification("notif_error_camera_scriptable", "Freeze Cam")
             freezeCamEnabled = false 
             if btn_toggleFreezeCam then btn_toggleFreezeCam.Text = getText("button_freezecam", freezeCamEnabled, "", "") end
        end
    else
        pcall(function() Camera.CameraType = originalCamType end)
    end
end

function toggleCartoonOutline_Original() 
    cartoonOutlineEnabled = not cartoonOutlineEnabled
    btn_toggleCartoonOutline = FlingToolsOtherButtons["CartoonOutline"] 
    if btn_toggleCartoonOutline then btn_toggleCartoonOutline.Text = getText("button_cartoonoutline", cartoonOutlineEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_cartoonoutline"), getText(cartoonOutlineEnabled and "state_on" or "state_off"))

    if cartoonOutlineEnabled then
        if cartoonOutlineEffect and cartoonOutlineEffect.Parent then return end 
        --[[ 
        cartoonOutlineEffect = Instance.new("CelShading") 
        cartoonOutlineEffect.Name = "DarkfireCelShading"
        cartoonOutlineEffect.Parent = Lighting
        if not cartoonOutlineEffect.Parent then
             ShowNotification("notif_error_create_effect", "Cartoon Outline")
             cartoonOutlineEnabled = false 
             if btn_toggleCartoonOutline then btn_toggleCartoonOutline.Text = getText("button_cartoonoutline", cartoonOutlineEnabled, "", "") end
             cartoonOutlineEffect = nil
        end
        --]]
        warn("Cartoon Outline (CelShading) feature is disabled as 'CelShading' is not a standard Roblox Instance.")
        ShowNotification("notif_error_create_effect", "Cartoon Outline")
        cartoonOutlineEnabled = false 
        if btn_toggleCartoonOutline then btn_toggleCartoonOutline.Text = getText("button_cartoonoutline", cartoonOutlineEnabled, "", "") end

    else
        if cartoonOutlineEffect and cartoonOutlineEffect.Parent then
            cartoonOutlineEffect:Destroy()
            cartoonOutlineEffect = nil
        end
    end
end

function toggleInvertColors_Original() 
    invertColorsEnabled = not invertColorsEnabled
    btn_toggleInvertColors = FlingToolsOtherButtons["InvertColors"] 
    if btn_toggleInvertColors then btn_toggleInvertColors.Text = getText("button_invertcolors", invertColorsEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_invertcolors"), getText(invertColorsEnabled and "state_on" or "state_off"))

    if invertColorsEnabled then
        if invertColorsEffect and invertColorsEffect.Parent then return end
        invertColorsEffect = Instance.new("ColorCorrectionEffect") 
        invertColorsEffect.Name = "DarkfireInvertColors"
        invertColorsEffect.TintColor = Color3.fromRGB(255, 255, 255)
        invertColorsEffect.Brightness = -0.5 
        invertColorsEffect.Contrast = -1
        invertColorsEffect.Saturation = -1
        invertColorsEffect.Enabled = true
        invertColorsEffect.Parent = Lighting
        if not invertColorsEffect.Parent then
            ShowNotification("notif_error_create_effect", "Invert Colors")
            invertColorsEnabled = false 
            if btn_toggleInvertColors then btn_toggleInvertColors.Text = getText("button_invertcolors", invertColorsEnabled, "", "") end
            invertColorsEffect = nil
        end
    else
        if invertColorsEffect and invertColorsEffect.Parent then
            invertColorsEffect:Destroy()
            invertColorsEffect = nil
        end
    end
end

function toggleBloom_Original() 
    bloomEnabled = not bloomEnabled
    btn_toggleBloom = FlingToolsOtherButtons["Bloom"] 
    if btn_toggleBloom then btn_toggleBloom.Text = getText("button_bloom", bloomEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_bloom"), getText(bloomEnabled and "state_on" or "state_off"))

    if bloomEnabled then
        if bloomEffect and bloomEffect.Parent then return end
        bloomEffect = Instance.new("BloomEffect") 
        bloomEffect.Name = "DarkfireBloom"
        bloomEffect.Intensity = 0.5 
        bloomEffect.Size = 56
        bloomEffect.Threshold = 0.9
        bloomEffect.Enabled = true
        bloomEffect.Parent = Lighting
        if not bloomEffect.Parent then
             ShowNotification("notif_error_create_effect", "Bloom")
             bloomEnabled = false 
             if btn_toggleBloom then btn_toggleBloom.Text = getText("button_bloom", bloomEnabled, "", "") end
             bloomEffect = nil
        end
    else
        if bloomEffect and bloomEffect.Parent then
            bloomEffect:Destroy()
            bloomEffect = nil
        end
    end
end

function toggleRagdoll_Original() 
    ragdollEnabled = not ragdollEnabled
    btn_toggleRagdoll = MainFrame and MainFrame:FindFirstChild("RagdollButton", true) 
    if btn_toggleRagdoll then btn_toggleRagdoll.Text = getText("button_ragdoll", ragdollEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_ragdoll"), getText(ragdollEnabled and "state_on" or "state_off"))

    hum_toggleRagdoll = player.Character and player.Character:FindFirstChildOfClass("Humanoid") 
    if hum_toggleRagdoll then
        pcall(hum_toggleRagdoll.SetStateEnabled, hum_toggleRagdoll, Enum.HumanoidStateType.FallingDown, not ragdollEnabled)
        pcall(hum_toggleRagdoll.SetStateEnabled, hum_toggleRagdoll, Enum.HumanoidStateType.Ragdoll, not ragdollEnabled)
        if ragdollEnabled then
            pcall(hum_toggleRagdoll.ChangeState, hum_toggleRagdoll, Enum.HumanoidStateType.Ragdoll)
        else
            pcall(hum_toggleRagdoll.ChangeState, hum_toggleRagdoll, Enum.HumanoidStateType.GettingUp)
        end
    end
end

function toggleFloatUp_Original() 
    floatUpEnabled = not floatUpEnabled
    btn_toggleFloatUp = MainFrame and MainFrame:FindFirstChild("FloatUpButton", true) 
    if btn_toggleFloatUp then btn_toggleFloatUp.Text = getText("button_floatup", floatUpEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_floatup"), getText(floatUpEnabled and "state_on" or "state_off"))

    if floatUpLoop then task.cancel(floatUpLoop); floatUpLoop = nil end
    if floatUpEnabled then
        floatUpLoop = task.spawn(function()
            while floatUpEnabled do
                char_FloatUp = player.Character 
                root_FloatUp = char_FloatUp and char_FloatUp:FindFirstChild("HumanoidRootPart") 
                if not char_FloatUp or not root_FloatUp or not root_FloatUp.Parent then break end
                pcall(function() root_FloatUp.Velocity = Vector3.new(root_FloatUp.Velocity.X, 5, root_FloatUp.Velocity.Z) end) 
                task.wait()
            end
        end)
    end
end

function toggleUpsideDown_Original() 
    upsideDownEnabled = not upsideDownEnabled
    btn_toggleUpsideDown = MainFrame and MainFrame:FindFirstChild("UpsideDownButton", true) 
    if btn_toggleUpsideDown then btn_toggleUpsideDown.Text = getText("button_upsidedown", upsideDownEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_upsidedown"), getText(upsideDownEnabled and "state_on" or "state_off"))

    if upsideDownLoop and upsideDownLoop.Connected then upsideDownLoop:Disconnect(); upsideDownLoop = nil end
    if upsideDownEnabled then
        upsideDownLoop = RunService.RenderStepped:Connect(function()
            char_UpsideDown = player.Character 
            root_UpsideDown = char_UpsideDown and char_UpsideDown:FindFirstChild("HumanoidRootPart") 
            if not upsideDownEnabled or not root_UpsideDown or not root_UpsideDown.Parent then
                if upsideDownLoop and upsideDownLoop.Connected then upsideDownLoop:Disconnect(); upsideDownLoop = nil end
                return
            end
            pcall(function() root_UpsideDown.CFrame = root_UpsideDown.CFrame * CFrame.Angles(math.rad(180), 0, 0) end)
        end)
    else
        char_UpsideDown_Off = player.Character 
        root_UpsideDown_Off = char_UpsideDown_Off and char_UpsideDown_Off:FindFirstChild("HumanoidRootPart") 
        if root_UpsideDown_Off then
             pcall(function() root_UpsideDown_Off.Orientation = Vector3.new(0, root_UpsideDown_Off.Orientation.Y, 0) end) 
        end
    end
end

function toggleNoFace_Original() 
    noFaceEnabled = not noFaceEnabled
    btn_toggleNoFace = MainFrame and MainFrame:FindFirstChild("NoFaceButton", true) 
    if btn_toggleNoFace then btn_toggleNoFace.Text = getText("button_noface", noFaceEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_noface"), getText(noFaceEnabled and "state_on" or "state_off"))

    head_toggleNoFace = player.Character and player.Character:FindFirstChild("Head") 
    face_toggleNoFace = head_toggleNoFace and head_toggleNoFace:FindFirstChild("face") 

    if not face_toggleNoFace then ShowNotification("Error: Face decal not found!"); return end

    if noFaceEnabled then
        originalFace = face_toggleNoFace:Clone() 
        originalFace.Parent = nil 
        pcall(function() face_toggleNoFace.Transparency = 1 end)
    else
        pcall(function() face_toggleNoFace.Transparency = 0 end)
    end
end

function toggleForceField_Original() 
    forceFieldEnabled = not forceFieldEnabled
    btn_toggleForceField = MainFrame and MainFrame:FindFirstChild("ForceFieldButton", true) 
    if btn_toggleForceField then btn_toggleForceField.Text = getText("button_forcefield", forceFieldEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_forcefield"), getText(forceFieldEnabled and "state_on" or "state_off"))

    char_toggleForceField = player.Character 
    root_toggleForceField = char_toggleForceField and char_toggleForceField:FindFirstChild("HumanoidRootPart") 

    if forceFieldEnabled then
        if not char_toggleForceField or not root_toggleForceField then return end
        if forceFieldPart and forceFieldPart.Parent then return end 
        forceFieldPart = Instance.new("Part") 
        forceFieldPart.Name = "DarkfireForceField"
        forceFieldPart.Shape = Enum.PartType.Ball
        forceFieldPart.Material = Enum.Material.ForceField
        forceFieldPart.Size = Vector3.new(10, 10, 10) 
        forceFieldPart.Anchored = false
        forceFieldPart.CanCollide = false
        forceFieldPart.Transparency = 0.6
        forceFieldPart.Color = Color3.fromRGB(0, 180, 255)
        forceFieldPart.CFrame = root_toggleForceField.CFrame
        forceFieldPart.Parent = char_toggleForceField
        weld_toggleForceField = Instance.new("WeldConstraint") 
        weld_toggleForceField.Part0 = root_toggleForceField
        weld_toggleForceField.Part1 = forceFieldPart
        weld_toggleForceField.Parent = forceFieldPart
    else
        if forceFieldPart and forceFieldPart.Parent then
            forceFieldPart:Destroy()
            forceFieldPart = nil
        end
    end
end

function toggleDepthOfField_Original() 
    depthOfFieldEnabled = not depthOfFieldEnabled
    btn_toggleDOF = FlingToolsOtherButtons["DepthOfField"] 
    if btn_toggleDOF then btn_toggleDOF.Text = getText("button_depthoffield", depthOfFieldEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_depthoffield"), getText(depthOfFieldEnabled and "state_on" or "state_off"))

    if depthOfFieldEnabled then
        if dofEffect and dofEffect.Parent then return end
        dofEffect = Instance.new("DepthOfFieldEffect") 
        dofEffect.Name = "DarkfireDOF"
        dofEffect.FarIntensity = 0.3 
        dofEffect.FocusDistance = 20
        dofEffect.InFocusRadius = 10
        dofEffect.NearIntensity = 0.4
        dofEffect.Enabled = true
        dofEffect.Parent = Lighting
        if not dofEffect.Parent then
            ShowNotification("notif_error_create_effect", "Depth of Field")
            depthOfFieldEnabled = false
            if btn_toggleDOF then btn_toggleDOF.Text = getText("button_depthoffield", depthOfFieldEnabled, "", "") end
            dofEffect = nil
        end
    else
        if dofEffect and dofEffect.Parent then
            dofEffect:Destroy()
            dofEffect = nil
        end
    end
end

function toggleSunRays_Original() 
    sunRaysEnabled = not sunRaysEnabled
    btn_toggleSunRays = FlingToolsOtherButtons["SunRays"] 
    if btn_toggleSunRays then btn_toggleSunRays.Text = getText("button_sunrays", sunRaysEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_sunrays"), getText(sunRaysEnabled and "state_on" or "state_off"))

    if sunRaysEnabled then
        if sunRaysEffect and sunRaysEffect.Parent then return end
        sunRaysEffect = Instance.new("SunRaysEffect") 
        sunRaysEffect.Name = "DarkfireSunRays"
        sunRaysEffect.Intensity = 0.15 
        sunRaysEffect.Spread = 0.5
        sunRaysEffect.Enabled = true
        sunRaysEffect.Parent = Lighting
        if not sunRaysEffect.Parent then
            ShowNotification("notif_error_create_effect", "Sun Rays")
            sunRaysEnabled = false
            if btn_toggleSunRays then btn_toggleSunRays.Text = getText("button_sunrays", sunRaysEnabled, "", "") end
            sunRaysEffect = nil
        end
    else
        if sunRaysEffect and sunRaysEffect.Parent then
            sunRaysEffect:Destroy()
            sunRaysEffect = nil
        end
    end
end

function toggleBlur_Original() 
    blurEnabled = not blurEnabled
    btn_toggleBlur = FlingToolsOtherButtons["Blur"] 
    if btn_toggleBlur then btn_toggleBlur.Text = getText("button_blur", blurEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_blur"), getText(blurEnabled and "state_on" or "state_off"))

    if blurEnabled then
        if blurEffect and blurEffect.Parent then return end
        blurEffect = Instance.new("BlurEffect") 
        blurEffect.Name = "DarkfireBlur"
        blurEffect.Size = 8 
        blurEffect.Enabled = true
        blurEffect.Parent = Lighting
        if not blurEffect.Parent then
            ShowNotification("notif_error_create_effect", "Blur")
            blurEnabled = false
            if btn_toggleBlur then btn_toggleBlur.Text = getText("button_blur", blurEnabled, "", "") end
            blurEffect = nil
        end
    else
        if blurEffect and blurEffect.Parent then
            blurEffect:Destroy()
            blurEffect = nil
        end
    end
end

SetTimeDay_Original = function() 
    pcall(function() Lighting.ClockTime = 14 end) 
    ShowNotification("notif_time_set", "Day (14:00)")
end

SetTimeNight_Original = function() 
    pcall(function() Lighting.ClockTime = 0 end) 
    ShowNotification("notif_time_set", "Night (00:00)")
end

function toggleNeonWorld_Original() 
    neonWorldEnabled = not neonWorldEnabled
    btn_toggleNeonWorld = FlingToolsOtherButtons["NeonWorld"] 
    if btn_toggleNeonWorld then btn_toggleNeonWorld.Text = getText("button_neonworld", neonWorldEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_neonworld"), getText(neonWorldEnabled and "state_on" or "state_off"))
    if neonWorldEnabled then ShowNotification("notif_neonworld_warn") end

    if neonWorldEnabled then
        neonWorldOriginalMaterials = {} 
        for _, descendant in ipairs(Workspace:GetDescendants()) do
            if descendant:IsA("BasePart") and not descendant:IsA("Terrain") and descendant.Material ~= Enum.Material.Neon then
                neonWorldOriginalMaterials[descendant] = descendant.Material
                pcall(function() descendant.Material = Enum.Material.Neon end)
            end
        end
    else
        for part, originalMaterial in pairs(neonWorldOriginalMaterials) do
            if part and part.Parent then
                pcall(function() part.Material = originalMaterial end)
            end
        end
        neonWorldOriginalMaterials = {}
    end
end

function toggleColoredFog_Original() 
    coloredFogEnabled = not coloredFogEnabled
    btn_toggleColoredFog = FlingToolsOtherButtons["ColoredFog"] 
    if btn_toggleColoredFog then btn_toggleColoredFog.Text = getText("button_coloredfog", coloredFogEnabled, "", "") end
    ShowNotification("notif_feature_state", getText("button_coloredfog"), getText(coloredFogEnabled and "state_on" or "state_off"))

    atmosphere_toggleColoredFog = Lighting:FindFirstChildOfClass("Atmosphere") 
    if not atmosphere_toggleColoredFog and coloredFogEnabled then
        atmosphere_toggleColoredFog = Instance.new("Atmosphere")
        atmosphere_toggleColoredFog.Parent = Lighting
    end

    if coloredFogEnabled then
        if originalFogEnd == Lighting.FogEnd then originalFogEnd = Lighting.FogEnd end
        if originalFogStart == Lighting.FogStart then originalFogStart = Lighting.FogStart end
        if originalFogColor == Lighting.FogColor then originalFogColor = Lighting.FogColor end
        if atmosphere_toggleColoredFog then
             if originalAtmosphereDensity == atmosphere_toggleColoredFog.Density then originalAtmosphereDensity = atmosphere_toggleColoredFog.Density end
             if originalAtmosphereColor == atmosphere_toggleColoredFog.Color then originalAtmosphereColor = atmosphere_toggleColoredFog.Color end
             if originalAtmosphereHaze == atmosphere_toggleColoredFog.Haze then originalAtmosphereHaze = atmosphere_toggleColoredFog.Haze end
             pcall(function() atmosphere_toggleColoredFog.Density = 0.6 end)
             pcall(function() atmosphere_toggleColoredFog.Color = coloredFogColor end)
             pcall(function() atmosphere_toggleColoredFog.Haze = 2.5 end)
        end
        pcall(function() Lighting.FogEnd = 500 end)
        pcall(function() Lighting.FogStart = 0 end)
        pcall(function() Lighting.FogColor = coloredFogColor end)
    else
        pcall(function() Lighting.FogEnd = originalFogEnd end)
        pcall(function() Lighting.FogStart = originalFogStart end)
        pcall(function() Lighting.FogColor = originalFogColor end)
        if atmosphere_toggleColoredFog then
             pcall(function() atmosphere_toggleColoredFog.Density = originalAtmosphereDensity end)
             pcall(function() atmosphere_toggleColoredFog.Color = originalAtmosphereColor end)
             pcall(function() atmosphere_toggleColoredFog.Haze = originalAtmosphereHaze end)
        end
    end
    if coloredFogEnabled and removeFogEnabled then toggleRemoveFog_Original() end
    if coloredFogEnabled and removeFogV2Enabled then toggleRemoveFogV2_Original() end
end


-- Remplace ton ancienne fonction chatSpySendMessage par celle-ci
chatSpySendMessage = function(messageContent)
    if not messageContent or messageContent == "" then return false, "Empty message" end

    local success, err

    -- NOUVELLE MÉTHODE : TextChatService (la plus fiable en 2024+)
    local TextChatService = game:GetService("TextChatService")
    if TextChatService and TextChatService:FindFirstChild("TextChannels") and TextChatService.TextChannels:FindFirstChild("RBXGeneral") then
        local generalChannel = TextChatService.TextChannels.RBXGeneral
        success, err = pcall(function()
            generalChannel:SendAsync(messageContent)
        end)
        if success then return true end
    end

    -- ANCIENNE MÉTHODE (Fallback pour les vieux jeux)
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local legacyChatEventFolder = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
    if legacyChatEventFolder then
        local sayRequest = legacyChatEventFolder:FindFirstChild("SayMessageRequest")
        if sayRequest then
            success, err = pcall(function()
                sayRequest:FireServer(messageContent, "All")
            end)
            if success then return true end
        end
    end

    -- Si tout a échoué
    local finalError = tostring(err) or "Aucune méthode de chat valide trouvée."
    warn("ChatSpy Send Error:", finalError)
    if chatSpyLogPanel and addMessageToChatSpyLog then
         pcall(addMessageToChatSpyLog, "ChatSpy Erreur", "Envoi perroquet impossible: "..finalError, Color3.fromRGB(255, 100, 100))
    end

    return false, finalError
end

addMessageToChatSpyLog = function(playerName, message, messageColor) 
    if not chatSpyLoggingEnabled and playerName ~= "ChatSpy Système" and playerName ~= "ChatSpy Erreur" then return end
    if not chatSpyLogPanel or not chatSpyLogPanel.Parent or not chatSpyLogLayout then
        return
    end
    if not TextService then 
        warn("ChatSpy Log Error: TextService not available for GetTextSize.")
        TextService = game:GetService("TextService") 
        if not TextService then return end
    end


    C3_fromRGB_local_ChatSpyLog = cached_Color3_fromRGB or Color3.fromRGB 
    TEXT_COLOR_PLAYERNAME_HEX_ChatSpyLog = "#CCCCCC" 
    COPY_BUTTON_SIZE_ChatSpyLog = UDim2.new(0, 35, 0, 20) 
    COPY_BUTTON_TEXT_ChatSpyLog = "" 
    COPY_BUTTON_DEFAULT_BG_COLOR_ChatSpyLog = Color3.fromRGB(50, 50, 50) 
    COPY_BUTTON_HOVER_BG_COLOR_ChatSpyLog = Color3.fromRGB(70, 70, 70) 
    COPY_BUTTON_TEXT_COLOR_ChatSpyLog = Color3.fromRGB(150, 150, 150) 
    COPY_BUTTON_HOVER_TEXT_COLOR_ChatSpyLog = Color3.fromRGB(210, 210, 210) 
    COPY_SUCCESS_TEXT_ChatSpyLog = "" 
    COPY_FAIL_TEXT_ChatSpyLog = "" 
    COPY_UNAVAILABLE_TEXT_ChatSpyLog = "N/A" 

    messageFrame_ChatSpyLog = Instance.new("Frame") 
    messageFrame_ChatSpyLog.Name = "ChatSpyMessage"; messageFrame_ChatSpyLog.Parent = chatSpyLogPanel
    messageFrame_ChatSpyLog.BackgroundTransparency = 1
    messageFrame_ChatSpyLog.Size = UDim2.new(1, 0, 0, 22); messageFrame_ChatSpyLog.LayoutOrder = tick() 
    table.insert(chatSpyMessageFrames, messageFrame_ChatSpyLog)

    HorizontalLayout_ChatSpyLog = Instance.new("UIListLayout", messageFrame_ChatSpyLog) 
    HorizontalLayout_ChatSpyLog.FillDirection = Enum.FillDirection.Horizontal
    HorizontalLayout_ChatSpyLog.VerticalAlignment = Enum.VerticalAlignment.Center 
    HorizontalLayout_ChatSpyLog.Padding = UDim.new(0, 4)

    messageLabel_ChatSpyLog = Instance.new("TextLabel") 
    messageLabel_ChatSpyLog.Name = "MessageText"; messageLabel_ChatSpyLog.Parent = messageFrame_ChatSpyLog
    messageLabel_ChatSpyLog.BackgroundTransparency = 1
    buttonWidth_ChatSpyLog = COPY_BUTTON_SIZE_ChatSpyLog.X.Offset + HorizontalLayout_ChatSpyLog.Padding.Offset 
    messageLabel_ChatSpyLog.Size = UDim2.new(1, -buttonWidth_ChatSpyLog - 5, 1, 0) 
    messageLabel_ChatSpyLog.Font = Enum.Font.SourceSans; messageLabel_ChatSpyLog.TextSize = 14
    messageLabel_ChatSpyLog.TextColor3 = messageColor or Color3.fromRGB(230, 230, 230);
    messageLabel_ChatSpyLog.TextWrapped = true
    messageLabel_ChatSpyLog.RichText = true
    escapedMessage_ChatSpyLog = message:gsub("<", "<"):gsub(">", ">") 
    messageLabel_ChatSpyLog.Text = string.format("<font color='%s'><b>%s:</b></font> %s", TEXT_COLOR_PLAYERNAME_HEX_ChatSpyLog, playerName, escapedMessage_ChatSpyLog)
    messageLabel_ChatSpyLog.TextXAlignment = Enum.TextXAlignment.Left; messageLabel_ChatSpyLog.TextYAlignment = Enum.TextYAlignment.Top
    messageLabel_ChatSpyLog.LayoutOrder = 1

    copyButton_ChatSpyLog = Instance.new("TextButton") 
    copyButton_ChatSpyLog.Name = "CopyButton"; copyButton_ChatSpyLog.Parent = messageFrame_ChatSpyLog
    copyButton_ChatSpyLog.Size = COPY_BUTTON_SIZE_ChatSpyLog; copyButton_ChatSpyLog.Text = COPY_BUTTON_TEXT_ChatSpyLog
    copyButton_ChatSpyLog.TextColor3 = COPY_BUTTON_TEXT_COLOR_ChatSpyLog; copyButton_ChatSpyLog.TextSize = 14
    copyButton_ChatSpyLog.Font = Enum.Font.SourceSansSemibold
    copyButton_ChatSpyLog.BackgroundColor3 = COPY_BUTTON_DEFAULT_BG_COLOR_ChatSpyLog
    copyButton_ChatSpyLog.BackgroundTransparency = 0.5; copyButton_ChatSpyLog.BorderSizePixel = 0
    Instance.new("UICorner", copyButton_ChatSpyLog).CornerRadius = UDim.new(0, 4)
    copyButton_ChatSpyLog.LayoutOrder = 2; copyButton_ChatSpyLog.AutoButtonColor = false

    copyButton_ChatSpyLog.MouseEnter:Connect(function()
        copyButton_ChatSpyLog.BackgroundTransparency = 0.2; copyButton_ChatSpyLog.TextColor3 = COPY_BUTTON_HOVER_TEXT_COLOR_ChatSpyLog
        copyButton_ChatSpyLog.BackgroundColor3 = COPY_BUTTON_HOVER_BG_COLOR_ChatSpyLog
    end)
    copyButton_ChatSpyLog.MouseLeave:Connect(function()
        copyButton_ChatSpyLog.BackgroundTransparency = 0.5; copyButton_ChatSpyLog.TextColor3 = COPY_BUTTON_TEXT_COLOR_ChatSpyLog
        copyButton_ChatSpyLog.BackgroundColor3 = COPY_BUTTON_DEFAULT_BG_COLOR_ChatSpyLog
    end)

    copyButton_ChatSpyLog.MouseButton1Click:Connect(function()
        textToCopy_ChatSpyLog = string.format("[%s]: %s", playerName, message) 
        success_ChatSpyLogCopy = false; errorMsg_ChatSpyLogCopy = "N/A"; triedFunc_ChatSpyLogCopy = "None" 
        if typeof(setclipboard) == "function" then triedFunc_ChatSpyLogCopy="setclipboard"; success_ChatSpyLogCopy,errorMsg_ChatSpyLogCopy=pcall(setclipboard,textToCopy_ChatSpyLog) end
        if success_ChatSpyLogCopy then
            copyButton_ChatSpyLog.Text = COPY_SUCCESS_TEXT_ChatSpyLog; copyButton_ChatSpyLog.TextColor3 = C3_fromRGB_local_ChatSpyLog(0, 255, 0)
            task.delay(1, function() if copyButton_ChatSpyLog and copyButton_ChatSpyLog.Parent then copyButton_ChatSpyLog.Text = COPY_BUTTON_TEXT_ChatSpyLog; copyButton_ChatSpyLog.TextColor3 = COPY_BUTTON_TEXT_COLOR_ChatSpyLog end end)
        else
            warn("ChatSpy Copy Error with", triedFunc_ChatSpyLogCopy, ":", tostring(errorMsg_ChatSpyLogCopy))
            copyButton_ChatSpyLog.Text = COPY_FAIL_TEXT_ChatSpyLog; copyButton_ChatSpyLog.TextColor3 = C3_fromRGB_local_ChatSpyLog(255, 0, 0)
            if triedFunc_ChatSpyLogCopy == "None" then copyButton_ChatSpyLog.Text=COPY_UNAVAILABLE_TEXT_ChatSpyLog; copyButton_ChatSpyLog.Enabled=false end
            task.delay(1.5, function() if copyButton_ChatSpyLog and copyButton_ChatSpyLog.Parent and copyButton_ChatSpyLog.Enabled then copyButton_ChatSpyLog.Text = COPY_BUTTON_TEXT_ChatSpyLog; copyButton_ChatSpyLog.TextColor3 = COPY_BUTTON_TEXT_COLOR_ChatSpyLog end end)
        end
    end)

    resizeMessageFrame_ChatSpyLog = function() 
        if not messageLabel_ChatSpyLog or not messageLabel_ChatSpyLog.Parent or not messageFrame_ChatSpyLog or not messageFrame_ChatSpyLog.Parent or not TextService then return end
        
        labelWidth_ChatSpyLog = messageLabel_ChatSpyLog.AbsoluteSize.X 
        if labelWidth_ChatSpyLog <= 0 then 
            logPanelPadding_ChatSpyLog_Resize = chatSpyLogPanel:FindFirstChildOfClass("UIPadding") 
            if chatSpyLogPanel and chatSpyLogPanel.AbsoluteSize.X > 0 then
                labelWidth_ChatSpyLog = chatSpyLogPanel.AbsoluteSize.X - buttonWidth_ChatSpyLog - 5 - (logPanelPadding_ChatSpyLog_Resize and (logPanelPadding_ChatSpyLog_Resize.PaddingLeft.Offset + logPanelPadding_ChatSpyLog_Resize.PaddingRight.Offset) or 10)
            else
                labelWidth_ChatSpyLog = 200 
            end
            labelWidth_ChatSpyLog = math.max(10, labelWidth_ChatSpyLog) 
        end

        textBounds_ChatSpyLog = TextService:GetTextSize(messageLabel_ChatSpyLog.Text, messageLabel_ChatSpyLog.TextSize, messageLabel_ChatSpyLog.Font, Vector2.new(labelWidth_ChatSpyLog, math.huge)) 
        neededHeight_ChatSpyLog = math.max(COPY_BUTTON_SIZE_ChatSpyLog.Y.Offset, textBounds_ChatSpyLog.Y) + 4 
        messageFrame_ChatSpyLog.Size = UDim2.new(1, 0, 0, neededHeight_ChatSpyLog)

        if chatSpyLogPanel and chatSpyLogLayout then
             task.defer(function()
                  if chatSpyLogPanel and chatSpyLogLayout and chatSpyLogPanel.Parent and chatSpyLogLayout.Parent then
                      newCanvasHeight_ChatSpyLog = chatSpyLogLayout.AbsoluteContentSize.Y + 10 
                      if chatSpyLogPanel.CanvasSize.Y.Offset ~= newCanvasHeight_ChatSpyLog then
                          chatSpyLogPanel.CanvasSize = UDim2.new(0,0,0, newCanvasHeight_ChatSpyLog)
                      end
                  end
             end)
        end
    end

    messageLabel_ChatSpyLog:GetPropertyChangedSignal("Text"):Connect(resizeMessageFrame_ChatSpyLog)
    task.defer(resizeMessageFrame_ChatSpyLog)

    if #chatSpyMessageFrames > CHATSPY_HISTORY_MAX_MESSAGES then
        oldestMessageFrame_ChatSpyLog = table.remove(chatSpyMessageFrames, 1) 
        if oldestMessageFrame_ChatSpyLog and oldestMessageFrame_ChatSpyLog.Parent then oldestMessageFrame_ChatSpyLog:Destroy() end
    end
end

onChatSpyPlayerChatted = function(playerInstance, message)
    if not playerInstance or playerInstance == lp then return end
    originalMessage_ChatSpy = message:gsub("^%s*(.-)%s*$", "%1")
    if not originalMessage_ChatSpy:match("%S") then return end
    messageColor_ChatSpy = Color3.fromRGB(230, 230, 230)
    if originalMessage_ChatSpy:sub(1, 1) == "/" then
        if originalMessage_ChatSpy:sub(1, 2) == "/w" or originalMessage_ChatSpy:sub(1, 8) == "/whisper" or originalMessage_ChatSpy:sub(1, 5) == "/team" or originalMessage_ChatSpy:sub(1, 2) == "/t" or originalMessage_ChatSpy:sub(1, 3) == "/pm" or originalMessage_ChatSpy:sub(1, 5) == "/tell" then
            messageColor_ChatSpy = Color3.fromRGB(180, 180, 255)
        else messageColor_ChatSpy = Color3.fromRGB(255, 100, 100) end
    end
    pcall(addMessageToChatSpyLog, playerInstance.Name, originalMessage_ChatSpy, messageColor_ChatSpy)
    if chatSpyParrotEnabled then
        messageToSend_ChatSpy = string.format("%s", originalMessage_ChatSpy) -- On peut simplifier, ou garder le formatage, au choix
        task.delay(CHATSPY_PARROT_DELAY, function()
             if chatSpyParrotEnabled and ScreenGui and ScreenGui.Parent then
                chatSpySendMessage(messageToSend_ChatSpy) -- Appelle notre nouvelle fonction super-intelligente
            end
        end)
    end
end

CreerPageChatSpy = function() 
    C3_fromRGB_local_CreerPageChatSpy = cached_Color3_fromRGB or Color3.fromRGB 
    if typeof(C3_fromRGB_local_CreerPageChatSpy) ~= "function" then warn("CreerPageChatSpy: C3_fromRGB_local_CreerPageChatSpy is nil!"); return nil end

    ChatSpyPage_Creer = Instance.new("Frame"); ChatSpyPage_Creer.Name = "ChatSpyPage"; ChatSpyPage_Creer.Size = UDim2.new(1, 0, 1, 0); ChatSpyPage_Creer.BackgroundTransparency = 1; ChatSpyPage_Creer.Visible = false; ChatSpyPage_Creer.Parent = ContentFrame 
    ChatSpyTitle_Creer = Instance.new("TextLabel"); ChatSpyTitle_Creer.Name="ChatSpyTitle"; ChatSpyTitle_Creer.Size = UDim2.new(1, 0, 0, 40); ChatSpyTitle_Creer.Position = UDim2.new(0, 0, 0, 0); ChatSpyTitle_Creer.BackgroundTransparency = 1; ChatSpyTitle_Creer.Font = Enum.Font.GothamBlack; ChatSpyTitle_Creer.TextColor3 = C3_fromRGB_local_CreerPageChatSpy(0, 220, 255); ChatSpyTitle_Creer.TextSize = 20; 
    ChatSpyTitle_Creer.Text = getText("tab_chatspy") .. " ";
    ChatSpyTitle_Creer.Parent = ChatSpyPage_Creer

    MainContainer_CreerChatSpy = Instance.new("Frame") 
    MainContainer_CreerChatSpy.Name = "MainContainer"
    MainContainer_CreerChatSpy.Size = UDim2.new(1, -10, 1, -50)
    MainContainer_CreerChatSpy.Position = UDim2.new(0, 5, 0, 45)
    MainContainer_CreerChatSpy.BackgroundTransparency = 1
    MainContainer_CreerChatSpy.Parent = ChatSpyPage_Creer

    ContainerLayout_CreerChatSpy = Instance.new("UIListLayout") 
    ContainerLayout_CreerChatSpy.Parent = MainContainer_CreerChatSpy
    ContainerLayout_CreerChatSpy.SortOrder = Enum.SortOrder.LayoutOrder
    ContainerLayout_CreerChatSpy.Padding = UDim.new(0, 5)

    ControlsSection_CreerChatSpy = Instance.new("Frame") 
    ControlsSection_CreerChatSpy.Name = "ControlsSection"
    ControlsSection_CreerChatSpy.Size = UDim2.new(1, 0, 0, 40)
    ControlsSection_CreerChatSpy.BackgroundTransparency = 1
    ControlsSection_CreerChatSpy.LayoutOrder = 1
    ControlsSection_CreerChatSpy.Parent = MainContainer_CreerChatSpy

    ControlsLayout_CreerChatSpy = Instance.new("UIGridLayout") 
    ControlsLayout_CreerChatSpy.Parent = ControlsSection_CreerChatSpy
    ControlsLayout_CreerChatSpy.CellSize = UDim2.new(0, 110, 0, 30)
    ControlsLayout_CreerChatSpy.CellPadding = UDim2.new(0, 5, 0, 5) 
    ControlsLayout_CreerChatSpy.HorizontalAlignment = Enum.HorizontalAlignment.Center
    ControlsLayout_CreerChatSpy.VerticalAlignment = Enum.VerticalAlignment.Center
    ControlsLayout_CreerChatSpy.SortOrder = Enum.SortOrder.LayoutOrder

    ParrotButton_CreerChatSpy = createButton(ControlsSection_CreerChatSpy, "ChatSpyParrotButton", "button_parrot", 1, function() 
        chatSpyParrotEnabled = not chatSpyParrotEnabled
        btn_ParrotToggle = ChatSpyPage_Creer:FindFirstChild("ChatSpyParrotButton", true) 
        if btn_ParrotToggle then btn_ParrotToggle.Text = getText("button_parrot", chatSpyParrotEnabled, "", "") end
        statusKey_ParrotToggle = chatSpyParrotEnabled and "state_on" or "state_off" 
        pcall(addMessageToChatSpyLog, "ChatSpy Système", getText("notif_chatspy_parrot_toggled", getText(statusKey_ParrotToggle)), C3_fromRGB_local_CreerPageChatSpy(255, 230, 150))
    end, "", "", chatSpyParrotEnabled)

    LogButton_CreerChatSpy = createButton(ControlsSection_CreerChatSpy, "ChatSpyLogButton", "button_loglocal", 2, function() 
        chatSpyLoggingEnabled = not chatSpyLoggingEnabled
        btn_LogToggle = ChatSpyPage_Creer:FindFirstChild("ChatSpyLogButton", true) 
        if btn_LogToggle then btn_LogToggle.Text = getText("button_loglocal", chatSpyLoggingEnabled, "", "") end
        statusKey_LogToggle = chatSpyLoggingEnabled and "state_on" or "state_off" 
        if chatSpyLoggingEnabled then
            pcall(addMessageToChatSpyLog, "ChatSpy Système", getText("notif_chatspy_log_toggled", getText(statusKey_LogToggle)), C3_fromRGB_local_CreerPageChatSpy(255, 230, 150))
        end
    end, "", "", chatSpyLoggingEnabled)
    
    LogSectionTitleFrame_CreerChatSpy = Instance.new("Frame") 
    LogSectionTitleFrame_CreerChatSpy.Name = "LogSectionTitleFrame"
    LogSectionTitleFrame_CreerChatSpy.Size = UDim2.new(1, 0, 0, 30) 
    LogSectionTitleFrame_CreerChatSpy.BackgroundTransparency = 1
    LogSectionTitleFrame_CreerChatSpy.LayoutOrder = 2 
    LogSectionTitleFrame_CreerChatSpy.Parent = MainContainer_CreerChatSpy

    sectionTitle_CreerChatSpy = Instance.new("TextLabel", LogSectionTitleFrame_CreerChatSpy) 
    sectionTitle_CreerChatSpy.Name = "LogSectionTitle"
    sectionTitle_CreerChatSpy.Size = UDim2.new(1, -10, 1, 0)
    sectionTitle_CreerChatSpy.Position = UDim2.new(0, 5, 0, 2)
    sectionTitle_CreerChatSpy.BackgroundTransparency = 1
    sectionTitle_CreerChatSpy.Text = getText("section_chat_log") .. " "
    sectionTitle_CreerChatSpy.TextColor3 = C3_fromRGB_local_CreerPageChatSpy(0, 220, 255)
    sectionTitle_CreerChatSpy.Font = Enum.Font.GothamBlack
    sectionTitle_CreerChatSpy.TextSize = 18
    sectionTitle_CreerChatSpy.TextXAlignment = Enum.TextXAlignment.Left

    LogPanel_CreerChatSpy = Instance.new("ScrollingFrame") 
    LogPanel_CreerChatSpy.Name = "ChatSpyLogPanel"; LogPanel_CreerChatSpy.Parent = MainContainer_CreerChatSpy 
    LogPanel_CreerChatSpy.LayoutOrder = 3 
    LogPanel_CreerChatSpy.BackgroundColor3 = C3_fromRGB_local_CreerPageChatSpy(35, 35, 45); 
    LogPanel_CreerChatSpy.BorderSizePixel = 1
    LogPanel_CreerChatSpy.BorderColor3 = C3_fromRGB_local_CreerPageChatSpy(20,20,25)
    LogPanel_CreerChatSpy.Size = UDim2.new(1, 0, 1, 0) 
    LogPanel_CreerChatSpy.ScrollBarThickness = 8 
    LogPanel_CreerChatSpy.ScrollBarImageColor3 = C3_fromRGB_local_CreerPageChatSpy(120, 120, 130)
    LogPanel_CreerChatSpy.ScrollingDirection = Enum.ScrollingDirection.Y; LogPanel_CreerChatSpy.CanvasSize = UDim2.new(0, 0, 0, 0)
    LogPanel_CreerChatSpy.ClipsDescendants = true; LogPanel_CreerChatSpy.BackgroundTransparency = 0.1 
    chatSpyLogPanel = LogPanel_CreerChatSpy

    logPanelPadding_CreerChatSpy = Instance.new("UIPadding", LogPanel_CreerChatSpy) 
    logPanelPadding_CreerChatSpy.PaddingLeft = UDim.new(0, 5); logPanelPadding_CreerChatSpy.PaddingRight = UDim.new(0, 5)
    logPanelPadding_CreerChatSpy.PaddingTop = UDim.new(0, 5); logPanelPadding_CreerChatSpy.PaddingBottom = UDim.new(0, 5)

    UIListLayout_CreerChatSpy = Instance.new("UIListLayout", LogPanel_CreerChatSpy) 
    UIListLayout_CreerChatSpy.Padding = UDim.new(0, 4); UIListLayout_CreerChatSpy.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout_CreerChatSpy.HorizontalAlignment = Enum.HorizontalAlignment.Left; UIListLayout_CreerChatSpy.FillDirection = Enum.FillDirection.Vertical
    chatSpyLogLayout = UIListLayout_CreerChatSpy

    task.delay(0.5, function()
        if ChatSpyPage_Creer and ChatSpyPage_Creer.Parent then
            pcall(addMessageToChatSpyLog, "ChatSpy Système", "Chat Spy Log Initialisé.", C3_fromRGB_local_CreerPageChatSpy(255, 230, 150))
        end
    end)

    pageInstances.ChatSpy = ChatSpyPage_Creer; return ChatSpyPage_Creer
end


RemoveDebris_Original = function() 
    count_RemoveDebris = 0 
    for _, item in ipairs(Workspace:GetChildren()) do
        if item:IsA("Part") and not item.Anchored and item.Name ~= "Handle" and not item:FindFirstAncestorOfClass("Model") then Debris:AddItem(item, 0.01); count_RemoveDebris = count_RemoveDebris + 1
        elseif item:IsA("Tool") or item:IsA("Hat") or item:IsA("Accessory") then Debris:AddItem(item, 0.01); count_RemoveDebris = count_RemoveDebris + 1 end
    end
    ShowNotification("notif_removedebris_result", count_RemoveDebris)
end

ClearWorkspace_Original = function() 
     ShowNotification("notif_clearworkspace_warn")
     keep_ClearWorkspace = {Camera, Lighting, Terrain}; myChar_ClearWorkspace = player.Character; if myChar_ClearWorkspace then table.insert(keep_ClearWorkspace, myChar_ClearWorkspace) end 
     count_ClearWorkspace = 0 
     for _, item in ipairs(Workspace:GetChildren()) do
         shouldKeep_ClearWorkspace = false; for _, k in ipairs(keep_ClearWorkspace) do if item == k then shouldKeep_ClearWorkspace = true; break end end 
         if not shouldKeep_ClearWorkspace then pcall(item.Destroy, item); count_ClearWorkspace = count_ClearWorkspace + 1 end
     end
     ShowNotification("notif_clearworkspace_result", count_ClearWorkspace)
end

toggleServerInfo_Original = function() 
     serverInfoVisible = not serverInfoVisible 
     infoButton_toggleServerInfo = MainFrame and MainFrame:FindFirstChild("ServerInfoButton", true) 
     if infoButton_toggleServerInfo then infoButton_toggleServerInfo.Text = getText("button_serverinfo", serverInfoVisible, "", "") end

     if serverInfoDisplay then 
         if serverInfoVisible then
              placeId_toggleServerInfo = game.PlaceId; jobId_toggleServerInfo = game.JobId; players_toggleServerInfo = #Players:GetPlayers(); maxPlayers_toggleServerInfo = Players.MaxPlayers; region_toggleServerInfo = "N/A" 
              success_toggleServerInfo, info_toggleServerInfo = pcall(TeleportService.GetPlayerPlaceInstanceInfoAsync, TeleportService, player) 
              if success_toggleServerInfo and info_toggleServerInfo and info_toggleServerInfo.PlaceInstance and info_toggleServerInfo.PlaceInstance.Region then region_toggleServerInfo = info_toggleServerInfo.PlaceInstance.Region end
              serverInfoDisplay.Text = string.format("Place ID: %d\nJob ID: %s\nPlayers: %d/%d\nRegion: %s", placeId_toggleServerInfo, jobId_toggleServerInfo, players_toggleServerInfo, maxPlayers_toggleServerInfo, region_toggleServerInfo)
              serverInfoDisplay.Visible = true
         else serverInfoDisplay.Visible = false end
     end
     ShowNotification("notif_feature_state", getText("button_serverinfo"), getText(serverInfoVisible and "state_on" or "state_off"))
end

ApplyUiScale_Original = function(value) 
    uiScaleValue = value 
    ShowNotification("UI Scale (Placeholder): %s", string.format("%.2f", uiScaleValue))
end

ClearConsoleOutput_Original = function() 
    if consoleErrorList then
        for _, child in ipairs(consoleErrorList:GetChildren()) do if child:IsA("TextLabel") and child.Name == "ErrorEntry" then child:Destroy() end end
        layout_ClearConsole = consoleErrorList:FindFirstChildOfClass("UIListLayout") 
        if layout_ClearConsole then consoleErrorList.CanvasSize = UDim2.new(0,0,0,layout_ClearConsole.AbsoluteContentSize.Y+5) end
        ShowNotification("notif_console_cleared")
    else ShowNotification("notif_console_clear_error") end
end


ApplyShadowQuality_Original = function(value) 
    shadowQuality = math.floor(value+0.5) 
    ShowNotification("notif_shadow_quality_placeholder", shadowQuality) 
end

CenterGUI = function() 
    vpS_CenterGUI = workspace.CurrentCamera.ViewportSize 
    if not isMinimized then
        gW_CenterGUI, gH_CenterGUI = currentSize.X.Offset, currentSize.Y.Offset 
        cX_CenterGUI, cY_CenterGUI = (vpS_CenterGUI.X - gW_CenterGUI) / 2, (vpS_CenterGUI.Y - gH_CenterGUI) / 2 
        centerTween_CenterGUI = TweenService:Create(MainFrame, tweenInfo, {Position = UDim2.new(0, cX_CenterGUI, 0, cY_CenterGUI)}) 
        if centerTween_CenterGUI then centerTween_CenterGUI:Play() else warn("Failed to create center tween (main)") end
        currentPosition = UDim2.new(0, cX_CenterGUI, 0, cY_CenterGUI)
    else
        mW_CenterGUI, mH_CenterGUI = MinimizedButton.AbsoluteSize.X, MinimizedButton.AbsoluteSize.Y 
        cX_CenterGUI_min, cY_CenterGUI_min = (vpS_CenterGUI.X - mW_CenterGUI) / 2, (vpS_CenterGUI.Y - mH_CenterGUI) / 2 
        centerTweenMin_CenterGUI = TweenService:Create(MinimizedButton, tweenInfo, {Position = UDim2.new(0, cX_CenterGUI_min, 0, cY_CenterGUI_min)}) 
        if centerTweenMin_CenterGUI then centerTweenMin_CenterGUI:Play() else warn("Failed to create center tween (minimized)") end
        currentPosition = UDim2.new(0, cX_CenterGUI_min - (currentSize.X.Offset-mW_CenterGUI)/2, 0, cY_CenterGUI_min - (currentSize.Y.Offset-mH_CenterGUI)/2)
    end
    ShowNotification("notif_gui_centered")
end


createButton = function(parent, name, translationKey, order, onClick, emojiOn, emojiOff, state)
    -- On crée le bouton de base
    local btn_createButton = Instance.new("TextButton")
    btn_createButton.Name = name
    btn_createButton.LayoutOrder = order
    btn_createButton.Size = UDim2.new(0, 110, 0, 30)
    btn_createButton.BackgroundColor3 = currentButtonColor
    btn_createButton.TextColor3 = currentTextColor
    btn_createButton.Font = Enum.Font.GothamBlack
    btn_createButton.Parent = parent
    
    -- CONTRÔLE ABSOLU DU TEXTE (on garde ça, c'est la clé contre le débordement)
    btn_createButton.TextScaled = false
    btn_createButton.TextSize = 12
    btn_createButton.TextWrapped = true
    
    btn_createButton.Text = getText(translationKey, state, emojiOn, emojiOff)

    -- DESIGN FIABLE : ON REMPLACE L'OMBRE PAR UNE BORDURE NETTE
    -- C'est universellement supporté et ça donne un look propre.
    local stroke = Instance.new("UIStroke")
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border -- On veut une bordure, pas un contour de texte
    stroke.Thickness = 1
    stroke.Color = Color3.fromRGB(0, 0, 0) -- Noir, c'est sobre.
    stroke.Transparency = 0.6 -- Assez subtil.
    stroke.Parent = btn_createButton
    
    -- Des coins un peu plus nets.
    Instance.new("UICorner", btn_createButton).CornerRadius = UDim.new(0, 6)

    -- Le reste, on ne change pas.
    if onClick then btn_createButton.MouseButton1Click:Connect(onClick) end
    addHoverEffect(btn_createButton)
    return btn_createButton
end

createSection = function(parent, name, translationKey, height, order, emoji) 
    C3_fromRGB_local_createSection = cached_Color3_fromRGB 
    if typeof(C3_fromRGB_local_createSection) ~= "function" then warn("createSection: C3_fromRGB_local_createSection is nil!"); return nil end

    section_createSection = Instance.new("Frame") 
    section_createSection.Name = name; section_createSection.Size = UDim2.new(1, 0, 0, height); section_createSection.BackgroundColor3 = C3_fromRGB_local_createSection(25, 25, 40); section_createSection.BackgroundTransparency = 0.5; section_createSection.Parent = parent; Instance.new("UICorner", section_createSection).CornerRadius = UDim.new(0, 8); section_createSection.LayoutOrder = order
    title_createSection = Instance.new("TextLabel"); title_createSection.Name = name .. "Title"; title_createSection.Size = UDim2.new(1, -10, 0, 25); title_createSection.Position = UDim2.new(0, 5, 0, 2); title_createSection.BackgroundTransparency = 1; 
    title_createSection.Text = getText(translationKey) .. " " .. (emoji or "")
    title_createSection.TextColor3 = C3_fromRGB_local_createSection(0, 220, 255); title_createSection.Font = Enum.Font.GothamBlack; title_createSection.TextSize = 18; title_createSection.Parent = section_createSection; title_createSection.TextXAlignment = Enum.TextXAlignment.Left
    padding_createSection = Instance.new("UIPadding", section_createSection); padding_createSection.PaddingTop = UDim.new(0, 30); padding_createSection.PaddingLeft = UDim.new(0, 5); padding_createSection.PaddingRight = UDim.new(0, 5); padding_createSection.PaddingBottom = UDim.new(0, 5) 
    return section_createSection
end

createToggle = function(parent, name, labelTranslationKey, order, toggleFunc, stateVar, onEmoji, offEmoji) 
    C3_fromRGB_local_createToggle = cached_Color3_fromRGB 
    onEmoji = onEmoji or ""
    offEmoji = offEmoji or ""

    container_createToggle = Instance.new("Frame"); container_createToggle.Size = UDim2.new(1, -10, 0, 35); container_createToggle.BackgroundTransparency = 1; container_createToggle.LayoutOrder = order; container_createToggle.Parent = parent; 
    container_createToggle.Position = UDim2.new(0,5,0,30+(order-1)*40)

    label_createToggle = Instance.new("TextLabel"); label_createToggle.Name=name.."Label"; label_createToggle.Size = UDim2.new(0, 80, 1, 0); label_createToggle.Position = UDim2.new(0, 0, 0, 0); label_createToggle.BackgroundTransparency = 1; 
    label_createToggle.Text = getText(labelTranslationKey);
    label_createToggle.TextColor3 = currentTextColor; label_createToggle.Font = Enum.Font.GothamBlack; label_createToggle.TextSize = 16; label_createToggle.TextXAlignment = Enum.TextXAlignment.Left; label_createToggle.Parent = container_createToggle

    button_createToggle = Instance.new("TextButton"); button_createToggle.Name = name; button_createToggle.Size = UDim2.new(0, 100, 0, 25); button_createToggle.Position = UDim2.new(0, 95, 0, 5); button_createToggle.BackgroundColor3 = currentButtonColor; 
    button_createToggle.Text = getText(labelTranslationKey, stateVar, onEmoji, offEmoji) 
    button_createToggle.TextColor3=currentTextColor; button_createToggle.Font=Enum.Font.GothamBlack;
    button_createToggle.TextSize=13;
    button_createToggle.TextScaled = true;
        button_createToggle.Parent = container_createToggle; Instance.new("UICorner", button_createToggle).CornerRadius = UDim.new(0, 10)
    button_createToggle.MouseButton1Click:Connect(toggleFunc)
    addHoverEffect(button_createToggle)
    return container_createToggle, button_createToggle
end

createInputWithButton = function(parent, namePrefix, labelTranslationKey, order, buttonTranslationKey, placeholderTranslationKey, inputDefault, buttonClickFunc, buttonEmojiOn, buttonEmojiOff, buttonState) 
     container_createInputBtn = Instance.new("Frame"); container_createInputBtn.Size = UDim2.new(1, -10, 0, 35); container_createInputBtn.BackgroundTransparency = 1; container_createInputBtn.LayoutOrder = order; container_createInputBtn.Parent = parent; 
     container_createInputBtn.Position = UDim2.new(0,5,0,30+(order-1)*40)

     label_createInputBtn = Instance.new("TextLabel"); label_createInputBtn.Name=namePrefix.."Label"; label_createInputBtn.Size = UDim2.new(0, 80, 1, 0); label_createInputBtn.Position = UDim2.new(0, 5, 0, 5); label_createInputBtn.BackgroundTransparency = 1; 
     label_createInputBtn.Text = getText(labelTranslationKey);
     label_createInputBtn.TextColor3 = currentTextColor; label_createInputBtn.Font = Enum.Font.GothamBlack; label_createInputBtn.TextSize = 16; label_createInputBtn.TextXAlignment = Enum.TextXAlignment.Left; label_createInputBtn.Parent = container_createInputBtn

     input_createInputBtn = Instance.new("TextBox"); input_createInputBtn.Name = namePrefix .. "Input"; input_createInputBtn.Size = UDim2.new(0, 100, 0, 25); input_createInputBtn.Position = UDim2.new(0, 95, 0, 5); input_createInputBtn.BackgroundColor3 = currentSliderBgColor; input_createInputBtn.TextColor3 = currentTextColor; 
     input_createInputBtn.PlaceholderText = getText(placeholderTranslationKey);
     input_createInputBtn.PlaceholderColor3 = currentPlaceholderColor; input_createInputBtn.Text = inputDefault or ""; input_createInputBtn.Font = Enum.Font.GothamBlack;
     input_createInputBtn.TextSize = 14; input_createInputBtn.Parent = container_createInputBtn; Instance.new("UICorner", input_createInputBtn).CornerRadius = UDim.new(0, 6)

     button_createInputBtn = createButton(container_createInputBtn, namePrefix .. "Button", buttonTranslationKey, 1, buttonClickFunc, buttonEmojiOn, buttonEmojiOff, buttonState); 
     button_createInputBtn.Size = UDim2.new(0, 50, 0, 25); button_createInputBtn.Position = UDim2.new(0, 200, 0, 5); 
     button_createInputBtn.Name = namePrefix.."Button"
     return container_createInputBtn, input_createInputBtn, button_createInputBtn
end

createDropdown = function(parent, name, labelTranslationKey, order, options, onSelectionChange) 
    container_createDropdown = Instance.new("Frame"); container_createDropdown.Size = UDim2.new(1, -10, 0, 35); container_createDropdown.BackgroundTransparency = 1; container_createDropdown.LayoutOrder = order; container_createDropdown.Parent = parent; 
    container_createDropdown.Position = UDim2.new(0, 5, 0, 30 + (order - 1) * 40)

    label_createDropdown = Instance.new("TextLabel"); label_createDropdown.Name=name.."Label"; label_createDropdown.Size = UDim2.new(0, 100, 1, 0); label_createDropdown.Position = UDim2.new(0, 0, 0, 0); label_createDropdown.BackgroundTransparency = 1; 
    label_createDropdown.Text = getText(labelTranslationKey); label_createDropdown.TextColor3 = currentTextColor; label_createDropdown.Font = Enum.Font.GothamBlack; label_createDropdown.TextSize = 14; label_createDropdown.TextXAlignment = Enum.TextXAlignment.Left; label_createDropdown.Parent = container_createDropdown

    dropdownButton_createDropdown = Instance.new("TextButton") 
    dropdownButton_createDropdown.Name = name .. "Dropdown"
    dropdownButton_createDropdown.Size = UDim2.new(0, 120, 0, 25) 
    dropdownButton_createDropdown.Position = UDim2.new(0, 110, 0, 5) 
    dropdownButton_createDropdown.BackgroundColor3 = currentButtonColor
    dropdownButton_createDropdown.TextColor3 = currentTextColor
    dropdownButton_createDropdown.Font = Enum.Font.GothamBlack
    dropdownButton_createDropdown.TextSize = 13
    dropdownButton_createDropdown.TextScaled = true
    dropdownButton_createDropdown.Text = options[1] or "Select..." 
    dropdownButton_createDropdown.Parent = container_createDropdown
    Instance.new("UICorner", dropdownButton_createDropdown).CornerRadius = UDim.new(0, 6)
    addHoverEffect(dropdownButton_createDropdown)

    dropdownButton_createDropdown.MouseButton1Click:Connect(function()
        ShowNotification("Dropdown '%s' clicked (Placeholder)", label_createDropdown.Text)
        currentText_createDropdown = dropdownButton_createDropdown.Text 
        currentIndex_createDropdown = table.find(options, currentText_createDropdown) or 0 
        nextIndex_createDropdown = (currentIndex_createDropdown % #options) + 1 
        nextOption_createDropdown = options[nextIndex_createDropdown] 
        dropdownButton_createDropdown.Text = nextOption_createDropdown
        if onSelectionChange then
             onSelectionChange(nextOption_createDropdown)
        end
    end)

    return container_createDropdown, dropdownButton_createDropdown
end


CreerFramePrincipale = function() 
    C3_fromRGB_local_CreerFrame = cached_Color3_fromRGB 
    CSeq_new_local_CreerFrame = ColorSequence.new 
    CSeqKP_new_local_CreerFrame = ColorSequenceKeypoint.new 
    NumSeq_new_local_CreerFrame = NumberSequence.new 

    if typeof(C3_fromRGB_local_CreerFrame) ~= "function" then warn("CreerFramePrincipale: C3_fromRGB_local_CreerFrame is nil!"); return end 

    MainFrame = Instance.new("Frame"); MainFrame.Name = "MainFrame"; MainFrame.Size = UDim2.new(0, 400, 0, 300); MainFrame.Position = UDim2.new(0.5, -200, -0.5, -150); MainFrame.BackgroundColor3 = C3_fromRGB_local_CreerFrame(10, 10, 15); MainFrame.BorderSizePixel = 0; MainFrame.BackgroundTransparency = 0; MainFrame.Parent = ScreenGui; Instance.new("UICorner", MainFrame).CornerRadius = UDim.new(0, 12)
    TitleBar = Instance.new("Frame"); TitleBar.Name = "TitleBar"; TitleBar.Size = UDim2.new(1, 0, 0, 30); TitleBar.Position = UDim2.new(0, 0, 0, 0); TitleBar.BackgroundColor3 = C3_fromRGB_local_CreerFrame(10, 10, 15); TitleBar.BackgroundTransparency = 1; TitleBar.BorderSizePixel = 0; TitleBar.Parent = MainFrame; Instance.new("UICorner", TitleBar).CornerRadius = UDim.new(0, 12)
    TitleLabel = Instance.new("TextLabel"); TitleLabel.Name = "TitleLabel"; TitleLabel.Size = UDim2.new(1, -40, 1, 0); TitleLabel.Position = UDim2.new(0, 5, 0, 0); TitleLabel.BackgroundTransparency = 1;
    TitleLabel.Text = getText("gui_title") .. " ";
    TitleLabel.TextColor3 = C3_fromRGB_local_CreerFrame(0, 220, 255); TitleLabel.Font = Enum.Font.GothamBlack; TitleLabel.TextSize = 18; TitleLabel.TextXAlignment = Enum.TextXAlignment.Left; TitleLabel.Parent = TitleBar
    Gradient = Instance.new("UIGradient"); Gradient.Color = CSeq_new_local_CreerFrame{CSeqKP_new_local_CreerFrame(0, C3_fromRGB_local_CreerFrame(0, 200, 255)), CSeqKP_new_local_CreerFrame(0.5, C3_fromRGB_local_CreerFrame(0, 100, 200)), CSeqKP_new_local_CreerFrame(1, C3_fromRGB_local_CreerFrame(0, 50, 150))}; Gradient.Rotation = 45; Gradient.Transparency = NumSeq_new_local_CreerFrame(MainFrame.BackgroundTransparency); Gradient.Parent = MainFrame
    NeonBorder = Instance.new("Frame"); NeonBorder.Name = "NeonBorder"; NeonBorder.Size = UDim2.new(1, 4, 1, 4); NeonBorder.Position = UDim2.new(0, -2, 0, -2); NeonBorder.BackgroundColor3 = C3_fromRGB_local_CreerFrame(0, 255, 255); NeonBorder.BorderSizePixel = 0; NeonBorder.BackgroundTransparency = 0.6; NeonBorder.ZIndex = MainFrame.ZIndex - 1; NeonBorder.Parent = MainFrame; Instance.new("UICorner", NeonBorder).CornerRadius = UDim.new(0, 12);
    task.wait() 
    if NeonBorder then 
        neonTween_CreerFrame = TweenService:Create(NeonBorder, tweenGlow, {BackgroundTransparency = 0.8}) 
        if neonTween_CreerFrame then neonTween_CreerFrame:Play() else warn("Failed to create NeonBorder tween") end
    end
    TabBar = Instance.new("ScrollingFrame"); TabBar.Name = "TabBar"; TabBar.Size = UDim2.new(0, 120, 1, -30); TabBar.Position = UDim2.new(0, 0, 0, 30); TabBar.BackgroundColor3 = C3_fromRGB_local_CreerFrame(10, 10, 20); TabBar.BorderSizePixel = 0; TabBar.ScrollBarThickness = 6; TabBar.CanvasSize = UDim2.new(0, 0, 0, 0); TabBar.ClipsDescendants = true; TabBar.Visible = false; TabBar.BackgroundTransparency = MainFrame.BackgroundTransparency * 0.5; TabBar.Parent = MainFrame; Instance.new("UICorner", TabBar).CornerRadius = UDim.new(0, 12)
    TabListLayout = Instance.new("UIListLayout"); TabListLayout.Parent = TabBar; TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder; TabListLayout.Padding = UDim.new(0, 10); pad_CreerFrame=Instance.new("UIPadding", TabBar); pad_CreerFrame.PaddingTop=UDim.new(0,5); pad_CreerFrame.PaddingBottom=UDim.new(0,5); pad_CreerFrame.PaddingLeft=UDim.new(0,5); pad_CreerFrame.PaddingRight=UDim.new(0,5) 
    ContentFrame = Instance.new("Frame"); ContentFrame.Name = "ContentFrame"; ContentFrame.Size = UDim2.new(0, 270, 1, -40); ContentFrame.Position = UDim2.new(0, 130, 0, 35); ContentFrame.BackgroundTransparency = 1; ContentFrame.Visible = false; ContentFrame.Parent = MainFrame 
    mainFrameTween_CreerFrame = TweenService:Create(MainFrame, tweenBounce, {Position = UDim2.new(0.5, -200, 0.5, -150)}) 
    if mainFrameTween_CreerFrame then mainFrameTween_CreerFrame:Play() else warn("Failed to create MainFrame intro tween") end
end

CreerBoutonsMinimisation = function() 
    MinimizeButton = Instance.new("TextButton"); MinimizeButton.Name = "MinimizeButton"; MinimizeButton.Size = UDim2.new(0, 30, 0, 30); MinimizeButton.Position = UDim2.new(1, -40, 0, 0); MinimizeButton.BackgroundColor3 = currentButtonColor; MinimizeButton.Text = "-"; MinimizeButton.TextColor3 = currentTextColor; MinimizeButton.Font = Enum.Font.GothamBlack; MinimizeButton.TextSize = 18; MinimizeButton.Parent = TitleBar; Instance.new("UICorner", MinimizeButton).CornerRadius = UDim.new(0, 8)
    MinimizedButton = Instance.new("TextButton"); MinimizedButton.Name = "MinimizedButton"; MinimizedButton.Size = UDim2.new(0, 60, 0, 60); MinimizedButton.Position = UDim2.new(0, 200, 0, 200); MinimizedButton.BackgroundColor3 = currentButtonColor;
    MinimizedButton.Text = getText("gui_minimized") .. " ";
    MinimizedButton.TextColor3 = currentTextColor; MinimizedButton.Font = Enum.Font.GothamBlack; MinimizedButton.TextSize = 18; MinimizedButton.Visible = false; MinimizedButton.Parent = ScreenGui; Instance.new("UICorner", MinimizedButton).CornerRadius = UDim.new(0, 10)
    MinGradient = Instance.new("UIGradient"); MinGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, currentButtonColor), ColorSequenceKeypoint.new(1, currentTabColor)}; MinGradient.Rotation = -45; MinGradient.Parent = MinimizedButton
    Hitbox = Instance.new("Frame"); Hitbox.Name = "Hitbox"; Hitbox.Size = UDim2.new(0, 60, 0, 60); Hitbox.Position = UDim2.new(0, 0, 0, 0); Hitbox.BackgroundTransparency = 1; Hitbox.Parent = MinimizedButton
    addHoverEffect(MinimizeButton) 
    MinimizedButton.MouseEnter:Connect(function() MinimizedButton.BackgroundTransparency = 0.1 end)
    MinimizedButton.MouseLeave:Connect(function() MinimizedButton.BackgroundTransparency = 0 end)
end

CreerFenetreSelection = function() 
    C3_fromRGB_local_CreerFenetreSel = cached_Color3_fromRGB 
    if typeof(C3_fromRGB_local_CreerFenetreSel) ~= "function" then warn("CreerFenetreSelection: C3_fromRGB_local_CreerFenetreSel is nil!"); return nil, nil end

    SelectionFrame = Instance.new("Frame"); SelectionFrame.Name = "SelectionFrame"; SelectionFrame.Size = UDim2.new(0, 300, 0, 200); SelectionFrame.Position = UDim2.new(0.5, -150, -0.5, -100); SelectionFrame.BackgroundColor3 = C3_fromRGB_local_CreerFenetreSel(15, 15, 25); SelectionFrame.BorderSizePixel = 0; SelectionFrame.Parent = ScreenGui; Instance.new("UICorner", SelectionFrame).CornerRadius = UDim.new(0, 12)
    SelGradient_CreerFenetreSel = Instance.new("UIGradient"); SelGradient_CreerFenetreSel.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, C3_fromRGB_local_CreerFenetreSel(50, 50, 60)), ColorSequenceKeypoint.new(1, C3_fromRGB_local_CreerFenetreSel(20, 20, 30))}; SelGradient_CreerFenetreSel.Rotation = 45; SelGradient_CreerFenetreSel.Parent = SelectionFrame 
    SelNeon_CreerFenetreSel = Instance.new("Frame"); SelNeon_CreerFenetreSel.Name = "SelNeon"; SelNeon_CreerFenetreSel.Size = UDim2.new(1, 4, 1, 4); SelNeon_CreerFenetreSel.Position = UDim2.new(0, -2, 0, -2); SelNeon_CreerFenetreSel.BackgroundColor3 = C3_fromRGB_local_CreerFenetreSel(0, 255, 255); SelNeon_CreerFenetreSel.BorderSizePixel = 0; SelNeon_CreerFenetreSel.BackgroundTransparency = 0.6; SelNeon_CreerFenetreSel.Parent = SelectionFrame; Instance.new("UICorner", SelNeon_CreerFenetreSel).CornerRadius = UDim.new(0, 12); 
    task.wait() 
    if SelNeon_CreerFenetreSel then 
        selNeonTween_CreerFenetreSel = TweenService:Create(SelNeon_CreerFenetreSel, tweenGlow, {BackgroundTransparency = 0.8}) 
        if selNeonTween_CreerFenetreSel then selNeonTween_CreerFenetreSel:Play() else warn("Failed to create SelNeon_CreerFenetreSel tween") end
    end
    SelText_CreerFenetreSel = Instance.new("TextLabel"); SelText_CreerFenetreSel.Size = UDim2.new(1, 0, 0, 50); SelText_CreerFenetreSel.BackgroundTransparency = 1; SelText_CreerFenetreSel.Text = "Game Mode"; SelText_CreerFenetreSel.TextColor3 = C3_fromRGB_local_CreerFenetreSel(0, 220, 255); SelText_CreerFenetreSel.Font = Enum.Font.GothamBlack; SelText_CreerFenetreSel.TextSize = 24; SelText_CreerFenetreSel.Parent = SelectionFrame 
    MobileButton_CreerFenetreSel = Instance.new("TextButton"); MobileButton_CreerFenetreSel.Name = "MobileButton"; MobileButton_CreerFenetreSel.Size = UDim2.new(0, 120, 0, 50); MobileButton_CreerFenetreSel.Position = UDim2.new(0, 20, 0, 80); MobileButton_CreerFenetreSel.BackgroundColor3 = currentButtonColor; MobileButton_CreerFenetreSel.Text = "Mobile"; MobileButton_CreerFenetreSel.TextColor3 = currentTextColor; MobileButton_CreerFenetreSel.Font = Enum.Font.GothamBlack; MobileButton_CreerFenetreSel.TextSize = 20; MobileButton_CreerFenetreSel.Parent = SelectionFrame; Instance.new("UICorner", MobileButton_CreerFenetreSel).CornerRadius = UDim.new(0, 10) 
    PcButton_CreerFenetreSel = Instance.new("TextButton"); PcButton_CreerFenetreSel.Name = "PcButton"; PcButton_CreerFenetreSel.Size = UDim2.new(0, 120, 0, 50); PcButton_CreerFenetreSel.Position = UDim2.new(0, 160, 0, 80); PcButton_CreerFenetreSel.BackgroundColor3 = currentButtonColor; PcButton_CreerFenetreSel.Text = "PC"; PcButton_CreerFenetreSel.TextColor3 = currentTextColor; PcButton_CreerFenetreSel.Font = Enum.Font.GothamBlack; PcButton_CreerFenetreSel.TextSize = 20; PcButton_CreerFenetreSel.Parent = SelectionFrame; Instance.new("UICorner", PcButton_CreerFenetreSel).CornerRadius = UDim.new(0, 10) 
    selectionFrameTween_CreerFenetreSel = TweenService:Create(SelectionFrame, tweenBounce, {Position = UDim2.new(0.5, -150, 0.5, -100)}) 
    if selectionFrameTween_CreerFenetreSel then selectionFrameTween_CreerFenetreSel:Play() else warn("Failed to create SelectionFrame intro tween") end
    addHoverEffect(MobileButton_CreerFenetreSel); addHoverEffect(PcButton_CreerFenetreSel) 
    return MobileButton_CreerFenetreSel, PcButton_CreerFenetreSel
end

CreerPageAccueil = function() 
    C3_fromRGB_local_CreerPageAccueil = cached_Color3_fromRGB 
    if typeof(C3_fromRGB_local_CreerPageAccueil) ~= "function" then warn("CreerPageAccueil: C3_fromRGB_local_CreerPageAccueil is nil!"); return nil end

    HomePage_Creer = Instance.new("Frame"); HomePage_Creer.Name = "HomePage"; HomePage_Creer.Size = UDim2.new(1, 0, 1, 0); HomePage_Creer.BackgroundTransparency = 1; HomePage_Creer.Visible = false; HomePage_Creer.Parent = ContentFrame 
    HomeBackground_Creer = Instance.new("Frame"); HomeBackground_Creer.Name = "HomeBackground"; HomeBackground_Creer.Size = UDim2.new(1, -10, 1, -10); HomeBackground_Creer.Position = UDim2.new(0, 5, 0, 5); HomeBackground_Creer.BackgroundColor3 = C3_fromRGB_local_CreerPageAccueil(20, 20, 40); HomeBackground_Creer.BackgroundTransparency = 0.2; HomeBackground_Creer.Parent = HomePage_Creer; Instance.new("UICorner", HomeBackground_Creer).CornerRadius = UDim.new(0, 10) 
    HomeGradient_Creer = Instance.new("UIGradient"); HomeGradient_Creer.Name = "HomeGradient"; HomeGradient_Creer.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, C3_fromRGB_local_CreerPageAccueil(0, 200, 255)), ColorSequenceKeypoint.new(1, C3_fromRGB_local_CreerPageAccueil(0, 50, 150))}; HomeGradient_Creer.Rotation = 90; HomeGradient_Creer.Parent = HomeBackground_Creer 
    WelcomeFrame_Creer = Instance.new("Frame"); WelcomeFrame_Creer.Name = "WelcomeFrame"; WelcomeFrame_Creer.Size = UDim2.new(0, 200, 0, 180); WelcomeFrame_Creer.Position = UDim2.new(0.5, -100, 0.5, -90); WelcomeFrame_Creer.BackgroundColor3 = currentButtonColor; WelcomeFrame_Creer.BackgroundTransparency = 0.7; WelcomeFrame_Creer.Parent = HomeBackground_Creer; Instance.new("UICorner", WelcomeFrame_Creer).CornerRadius = UDim.new(0, 10) 
    WelcomeGlow_Creer = Instance.new("Frame"); WelcomeGlow_Creer.Name = "WelcomeGlow"; WelcomeGlow_Creer.Size = UDim2.new(1, 6, 1, 6); WelcomeGlow_Creer.Position = UDim2.new(0, -3, 0, -3); WelcomeGlow_Creer.BackgroundColor3 = C3_fromRGB_local_CreerPageAccueil(0, 255, 255); WelcomeGlow_Creer.BackgroundTransparency = 0.6; WelcomeGlow_Creer.BorderSizePixel = 0; WelcomeGlow_Creer.ZIndex = WelcomeFrame_Creer.ZIndex - 1; WelcomeGlow_Creer.Parent = WelcomeFrame_Creer; Instance.new("UICorner", WelcomeGlow_Creer).CornerRadius = UDim.new(0, 10); 
    task.wait() 
    if WelcomeGlow_Creer then 
        welcomeGlowTween_Creer = TweenService:Create(WelcomeGlow_Creer, tweenGlow, {BackgroundTransparency = 0.8}) 
        if welcomeGlowTween_Creer then welcomeGlowTween_Creer:Play() else warn("Failed to create WelcomeGlow_Creer tween") end
    end
    success_CreerPageAccueil, profilePicUrl_CreerPageAccueil = pcall(Players.GetUserThumbnailAsync, Players, player.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size150x150); if not success_CreerPageAccueil then profilePicUrl_CreerPageAccueil = "" end 
    ProfilePic_Creer = Instance.new("ImageLabel"); ProfilePic_Creer.Name = "ProfilePic"; ProfilePic_Creer.Size = UDim2.new(0, 70, 0, 70); ProfilePic_Creer.Position = UDim2.new(0.5, -35, 0, 10); ProfilePic_Creer.BackgroundTransparency = 1; ProfilePic_Creer.ImageTransparency = 1; ProfilePic_Creer.Image = profilePicUrl_CreerPageAccueil; ProfilePic_Creer.Parent = WelcomeFrame_Creer 
    WelcomeTitle_Creer = Instance.new("TextLabel"); WelcomeTitle_Creer.Name = "WelcomeTitle"; WelcomeTitle_Creer.Size = UDim2.new(1, 0, 0, 50); WelcomeTitle_Creer.Position = UDim2.new(0, 0, 0, 80); WelcomeTitle_Creer.BackgroundTransparency = 1; WelcomeTitle_Creer.Text = "HI " .. player.Name:upper(); WelcomeTitle_Creer.TextColor3 = currentTextColor; WelcomeTitle_Creer.Font = Enum.Font.GothamBlack; WelcomeTitle_Creer.TextSize = 22; WelcomeTitle_Creer.TextTransparency = 1; WelcomeTitle_Creer.TextWrapped = true; WelcomeTitle_Creer.Parent = WelcomeFrame_Creer 
    WelcomeSubtitle_Creer = Instance.new("TextLabel"); WelcomeSubtitle_Creer.Name = "WelcomeSubtitle"; WelcomeSubtitle_Creer.Size = UDim2.new(1, 0, 0, 40); WelcomeSubtitle_Creer.Position = UDim2.new(0, 0, 0, 130); WelcomeSubtitle_Creer.BackgroundTransparency = 1; WelcomeSubtitle_Creer.Text = "DMX GUI Prime v10.0.0"; WelcomeSubtitle_Creer.TextColor3 = C3_fromRGB_local_CreerPageAccueil(200, 200, 255); 
    WelcomeSubtitle_Creer.Font = Enum.Font.GothamBlack; 
    WelcomeSubtitle_Creer.TextSize = 16; WelcomeSubtitle_Creer.TextTransparency = 1; WelcomeSubtitle_Creer.TextWrapped = true; WelcomeSubtitle_Creer.Parent = WelcomeFrame_Creer 
    particleConnection_Creer = nil; HomePage_Creer:GetPropertyChangedSignal("Visible"):Connect(function() if HomePage_Creer.Visible then if not particleConnection_Creer then rand_Creer=math.random; particleConnection_Creer=RunService.RenderStepped:Connect(function() if HomePage_Creer.Visible and rand_Creer()<0.1 and particleCount<maxParticles and HomeBackground_Creer.Parent then particleCount=particleCount+1; createParticle_Creer = function() p_Creer=Instance.new("Frame"); p_Creer.Size=UDim2.new(0,4,0,4); p_Creer.BackgroundColor3=C3_fromRGB_local_CreerPageAccueil(0,255,255); p_Creer.BackgroundTransparency=0.5; p_Creer.BorderSizePixel=0; p_Creer.Parent=HomeBackground_Creer; Instance.new("UICorner",p_Creer).CornerRadius=UDim.new(0,4); aX_Creer,aY_Creer=math.max(1,HomeBackground_Creer.AbsoluteSize.X),math.max(1,HomeBackground_Creer.AbsoluteSize.Y); sX_Creer,sY_Creer=rand_Creer(0,aX_Creer),rand_Creer(0,aY_Creer); p_Creer.Position=UDim2.new(0,sX_Creer,0,sY_Creer); particleTween_Creer = TweenService:Create(p_Creer,TweenInfo.new(2,Enum.EasingStyle.Linear),{Position=UDim2.new(0,sX_Creer+rand_Creer(-40,40),0,sY_Creer-80),BackgroundTransparency=1}); if particleTween_Creer then particleTween_Creer:Play() else warn("Failed particle tween") end; task.delay(2,function() if p_Creer and p_Creer.Parent then p_Creer:Destroy() end; particleCount=math.max(0,particleCount-1) end) end; createParticle_Creer() end end) end; task.spawn(function() if WelcomeFrame_Creer and WelcomeFrame_Creer.Parent then wfTween_Creer = TweenService:Create(WelcomeFrame_Creer,tweenInfo,{BackgroundTransparency=0.3}); if wfTween_Creer then wfTween_Creer:Play() end end; if ProfilePic_Creer and ProfilePic_Creer.Parent then ppTween_Creer = TweenService:Create(ProfilePic_Creer,tweenInfo,{ImageTransparency=0}); if ppTween_Creer then ppTween_Creer:Play() end end; if WelcomeTitle_Creer and WelcomeTitle_Creer.Parent then WelcomeTitle_Creer.TextTransparency=1; wtTween_Creer=TweenService:Create(WelcomeTitle_Creer,tweenInfo,{TextTransparency=0}); if wtTween_Creer then wtTween_Creer:Play() end; typeText(WelcomeTitle_Creer,"HI "..player.Name:upper()) end; task.wait(0.5); if WelcomeSubtitle_Creer and WelcomeSubtitle_Creer.Parent then WelcomeSubtitle_Creer.TextTransparency=1; wstTween_Creer = TweenService:Create(WelcomeSubtitle_Creer,tweenInfo,{TextTransparency=0}); if wstTween_Creer then wstTween_Creer:Play() end; WelcomeSubtitle_Creer.Text = "DMX GUI Prime v10.0.0" end end) else if particleConnection_Creer then particleConnection_Creer:Disconnect(); particleConnection_Creer=nil end end end) 
    pageInstances.Home = HomePage_Creer; return HomePage_Creer
end


CreerPageCheats = function() 
    C3_fromRGB_local_CreerCheats = cached_Color3_fromRGB 
    if typeof(C3_fromRGB_local_CreerCheats) ~= "function" then warn("CreerPageCheats: C3_fromRGB_local_CreerCheats is nil!"); return nil end

    CheatsPage_Creer = Instance.new("Frame"); CheatsPage_Creer.Name = "CheatsPage"; CheatsPage_Creer.Size = UDim2.new(1, 0, 1, 0); CheatsPage_Creer.BackgroundTransparency = 1; CheatsPage_Creer.Visible = false; CheatsPage_Creer.Parent = ContentFrame 
    CheatsTitle_Creer = Instance.new("TextLabel"); CheatsTitle_Creer.Name="CheatsTitle"; CheatsTitle_Creer.Size = UDim2.new(1, 0, 0, 40); CheatsTitle_Creer.Position = UDim2.new(0, 0, 0, 0); CheatsTitle_Creer.BackgroundTransparency = 1; CheatsTitle_Creer.Font = Enum.Font.GothamBlack; CheatsTitle_Creer.TextColor3 = C3_fromRGB_local_CreerCheats(0, 220, 255); CheatsTitle_Creer.TextSize = 20; 
    CheatsTitle_Creer.Text = getText("tab_cheats") .. " "; 
    CheatsTitle_Creer.Parent = CheatsPage_Creer

    CheatsScroll_Creer = Instance.new("ScrollingFrame"); CheatsScroll_Creer.Name = "CheatsScroll"; CheatsScroll_Creer.Size = UDim2.new(1, -10, 1, -50); CheatsScroll_Creer.Position = UDim2.new(0, 5, 0, 45); CheatsScroll_Creer.BackgroundTransparency = 1; CheatsScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, 0); CheatsScroll_Creer.ScrollBarThickness = 6; CheatsScroll_Creer.Parent = CheatsPage_Creer 
    CheatsListLayout_Creer = Instance.new("UIListLayout"); CheatsListLayout_Creer.Parent = CheatsScroll_Creer; CheatsListLayout_Creer.SortOrder = Enum.SortOrder.LayoutOrder; CheatsListLayout_Creer.Padding = UDim.new(0, 8) 

    MovementSection_CreerCheats = createSection(CheatsScroll_Creer, "MovementSection", "section_movement", 680, 1, "") 
    SpeedContainer_CreerCheats = Instance.new("Frame"); SpeedContainer_CreerCheats.Size = UDim2.new(1, -10, 0, 35); SpeedContainer_CreerCheats.BackgroundTransparency = 1; SpeedContainer_CreerCheats.Position = UDim2.new(0, 5, 0, 30); SpeedContainer_CreerCheats.Parent = MovementSection_CreerCheats 
    SpeedLabel_CreerCheats = Instance.new("TextLabel"); SpeedLabel_CreerCheats.Name="SpeedLabel"; SpeedLabel_CreerCheats.Size = UDim2.new(0, 80, 1, 0); SpeedLabel_CreerCheats.Position = UDim2.new(0, 0, 0, 0); SpeedLabel_CreerCheats.BackgroundTransparency = 1; SpeedLabel_CreerCheats.Text = getText("label_speed"); SpeedLabel_CreerCheats.TextColor3 = currentTextColor; SpeedLabel_CreerCheats.Font = Enum.Font.GothamBlack; SpeedLabel_CreerCheats.TextSize = 16; SpeedLabel_CreerCheats.TextXAlignment = Enum.TextXAlignment.Left; SpeedLabel_CreerCheats.Parent = SpeedContainer_CreerCheats 
    SpeedSlider_CreerCheats = Instance.new("Frame"); SpeedSlider_CreerCheats.Name = "Slider_Speed"; SpeedSlider_CreerCheats.Size = UDim2.new(0, 100, 0, 25); SpeedSlider_CreerCheats.Position = UDim2.new(0, 95, 0, 5); SpeedSlider_CreerCheats.BackgroundColor3 = currentSliderBgColor; SpeedSlider_CreerCheats.Active = true; SpeedSlider_CreerCheats.Parent = SpeedContainer_CreerCheats; Instance.new("UICorner", SpeedSlider_CreerCheats).CornerRadius = UDim.new(0, 10) 
    SpeedBar_CreerCheats = Instance.new("Frame"); SpeedBar_CreerCheats.Name = "Bar"; SpeedBar_CreerCheats.Size = UDim2.new(16/500, 0, 1, 0); SpeedBar_CreerCheats.BackgroundColor3 = currentButtonColor; SpeedBar_CreerCheats.Parent = SpeedSlider_CreerCheats; Instance.new("UICorner", SpeedBar_CreerCheats).CornerRadius = UDim.new(0, 10) 
    SpeedValue_CreerCheats = Instance.new("TextButton"); SpeedValue_CreerCheats.Name = "SpeedValue"; SpeedValue_CreerCheats.Size = UDim2.new(0, 50, 0, 25); SpeedValue_CreerCheats.Position = UDim2.new(0, 200, 0, 5); SpeedValue_CreerCheats.BackgroundColor3 = currentSliderBgColor; SpeedValue_CreerCheats.Text = "16"; SpeedValue_CreerCheats.TextColor3 = currentTextColor; 
    SpeedValue_CreerCheats.Font = Enum.Font.GothamBlack; SpeedValue_CreerCheats.TextSize = 14; SpeedValue_CreerCheats.Parent = SpeedContainer_CreerCheats; Instance.new("UICorner", SpeedValue_CreerCheats).CornerRadius=UDim.new(0,6)

    JumpContainer_CreerCheats = Instance.new("Frame"); JumpContainer_CreerCheats.Size = UDim2.new(1, -10, 0, 35); JumpContainer_CreerCheats.BackgroundTransparency = 1; JumpContainer_CreerCheats.Position = UDim2.new(0, 5, 0, 70); JumpContainer_CreerCheats.Parent = MovementSection_CreerCheats 
    JumpLabel_CreerCheats = Instance.new("TextLabel"); JumpLabel_CreerCheats.Name="JumpLabel"; JumpLabel_CreerCheats.Size = UDim2.new(0, 80, 1, 0); JumpLabel_CreerCheats.Position = UDim2.new(0, 0, 0, 0); JumpLabel_CreerCheats.BackgroundTransparency = 1; JumpLabel_CreerCheats.Text = getText("label_jump"); JumpLabel_CreerCheats.TextColor3 = currentTextColor; JumpLabel_CreerCheats.Font = Enum.Font.GothamBlack; JumpLabel_CreerCheats.TextSize = 16; JumpLabel_CreerCheats.TextXAlignment = Enum.TextXAlignment.Left; JumpLabel_CreerCheats.Parent = JumpContainer_CreerCheats 
    JumpSlider_CreerCheats = Instance.new("Frame"); JumpSlider_CreerCheats.Name = "Slider_Jump"; JumpSlider_CreerCheats.Size = UDim2.new(0, 100, 0, 25); JumpSlider_CreerCheats.Position = UDim2.new(0, 95, 0, 5); JumpSlider_CreerCheats.BackgroundColor3 = currentSliderBgColor; JumpSlider_CreerCheats.Active = true; JumpSlider_CreerCheats.Parent = JumpContainer_CreerCheats; Instance.new("UICorner", JumpSlider_CreerCheats).CornerRadius = UDim.new(0, 10) 
    JumpBar_CreerCheats = Instance.new("Frame"); JumpBar_CreerCheats.Name = "Bar"; JumpBar_CreerCheats.Size = UDim2.new(50/500, 0, 1, 0); JumpBar_CreerCheats.BackgroundColor3 = currentButtonColor; JumpBar_CreerCheats.Parent = JumpSlider_CreerCheats; Instance.new("UICorner", JumpBar_CreerCheats).CornerRadius = UDim.new(0, 10) 
    JumpValue_CreerCheats = Instance.new("TextButton"); JumpValue_CreerCheats.Name = "JumpValue"; JumpValue_CreerCheats.Size = UDim2.new(0, 50, 0, 25); JumpValue_CreerCheats.Position = UDim2.new(0, 200, 0, 5); JumpValue_CreerCheats.BackgroundColor3 = currentSliderBgColor; JumpValue_CreerCheats.Text = "50"; JumpValue_CreerCheats.TextColor3 = currentTextColor; 
    JumpValue_CreerCheats.Font = Enum.Font.GothamBlack; JumpValue_CreerCheats.TextSize = 14; JumpValue_CreerCheats.Parent = JumpContainer_CreerCheats; Instance.new("UICorner", JumpValue_CreerCheats).CornerRadius=UDim.new(0,6)

    SpeedMultiContainer_CreerCheats = Instance.new("Frame"); SpeedMultiContainer_CreerCheats.Size = UDim2.new(1, -10, 0, 35); SpeedMultiContainer_CreerCheats.BackgroundTransparency = 1; SpeedMultiContainer_CreerCheats.LayoutOrder = 3; SpeedMultiContainer_CreerCheats.Parent = MovementSection_CreerCheats; SpeedMultiContainer_CreerCheats.Position = UDim2.new(0,5,0,110) 
    SpeedMultiLabel_CreerCheats = Instance.new("TextLabel"); SpeedMultiLabel_CreerCheats.Name="SpeedMultiLabel"; SpeedMultiLabel_CreerCheats.Size = UDim2.new(0, 80, 1, 0); SpeedMultiLabel_CreerCheats.Position = UDim2.new(0, 0, 0, 0); SpeedMultiLabel_CreerCheats.BackgroundTransparency = 1; SpeedMultiLabel_CreerCheats.Text = getText("label_speedmulti"); SpeedMultiLabel_CreerCheats.TextColor3 = currentTextColor; SpeedMultiLabel_CreerCheats.Font = Enum.Font.GothamBlack; SpeedMultiLabel_CreerCheats.TextSize = 16; SpeedMultiLabel_CreerCheats.TextXAlignment = Enum.TextXAlignment.Left; SpeedMultiLabel_CreerCheats.Parent = SpeedMultiContainer_CreerCheats 
    SpeedMultiSlider_CreerCheats = Instance.new("Frame"); SpeedMultiSlider_CreerCheats.Name = "Slider_SpeedMulti"; SpeedMultiSlider_CreerCheats.Size = UDim2.new(0, 100, 0, 25); SpeedMultiSlider_CreerCheats.Position = UDim2.new(0, 95, 0, 5); SpeedMultiSlider_CreerCheats.BackgroundColor3 = currentSliderBgColor; SpeedMultiSlider_CreerCheats.Active = true; SpeedMultiSlider_CreerCheats.Parent = SpeedMultiContainer_CreerCheats; Instance.new("UICorner", SpeedMultiSlider_CreerCheats).CornerRadius = UDim.new(0, 10) 
    SpeedMultiBar_CreerCheats = Instance.new("Frame"); SpeedMultiBar_CreerCheats.Name = "SpeedMultiBar"; SpeedMultiBar_CreerCheats.Size = UDim2.new((walkSpeedMultiplier - 0.1) / (5 - 0.1), 0, 1, 0); SpeedMultiBar_CreerCheats.BackgroundColor3 = currentButtonColor; SpeedMultiBar_CreerCheats.Parent = SpeedMultiSlider_CreerCheats; Instance.new("UICorner", SpeedMultiBar_CreerCheats).CornerRadius = UDim.new(0, 10) 
    SpeedMultiValue_CreerCheats = Instance.new("TextButton"); SpeedMultiValue_CreerCheats.Name = "SpeedMultiValue"; SpeedMultiValue_CreerCheats.Size = UDim2.new(0, 50, 0, 25); SpeedMultiValue_CreerCheats.Position = UDim2.new(0, 200, 0, 5); SpeedMultiValue_CreerCheats.BackgroundColor3 = currentSliderBgColor; SpeedMultiValue_CreerCheats.Text = tostring(walkSpeedMultiplier); SpeedMultiValue_CreerCheats.TextColor3 = currentTextColor; 
    SpeedMultiValue_CreerCheats.Font = Enum.Font.GothamBlack; SpeedMultiValue_CreerCheats.TextSize = 14; SpeedMultiValue_CreerCheats.Parent = SpeedMultiContainer_CreerCheats; Instance.new("UICorner", SpeedMultiValue_CreerCheats).CornerRadius=UDim.new(0,6)

    JumpMultiContainer_CreerCheats = Instance.new("Frame"); JumpMultiContainer_CreerCheats.Size = UDim2.new(1, -10, 0, 35); JumpMultiContainer_CreerCheats.BackgroundTransparency = 1; JumpMultiContainer_CreerCheats.LayoutOrder = 4; JumpMultiContainer_CreerCheats.Parent = MovementSection_CreerCheats; JumpMultiContainer_CreerCheats.Position = UDim2.new(0,5,0,150) 
    JumpMultiLabel_CreerCheats = Instance.new("TextLabel"); JumpMultiLabel_CreerCheats.Name="JumpMultiLabel"; JumpMultiLabel_CreerCheats.Size = UDim2.new(0, 80, 1, 0); JumpMultiLabel_CreerCheats.Position = UDim2.new(0, 0, 0, 0); JumpMultiLabel_CreerCheats.BackgroundTransparency = 1; JumpMultiLabel_CreerCheats.Text = getText("label_jumpmulti"); JumpMultiLabel_CreerCheats.TextColor3 = currentTextColor; JumpMultiLabel_CreerCheats.Font = Enum.Font.GothamBlack; JumpMultiLabel_CreerCheats.TextSize = 16; JumpMultiLabel_CreerCheats.TextXAlignment = Enum.TextXAlignment.Left; JumpMultiLabel_CreerCheats.Parent = JumpMultiContainer_CreerCheats 
    JumpMultiSlider_CreerCheats = Instance.new("Frame"); JumpMultiSlider_CreerCheats.Name = "Slider_JumpMulti"; JumpMultiSlider_CreerCheats.Size = UDim2.new(0, 100, 0, 25); JumpMultiSlider_CreerCheats.Position = UDim2.new(0, 95, 0, 5); JumpMultiSlider_CreerCheats.BackgroundColor3 = currentSliderBgColor; JumpMultiSlider_CreerCheats.Active = true; JumpMultiSlider_CreerCheats.Parent = JumpMultiContainer_CreerCheats; Instance.new("UICorner", JumpMultiSlider_CreerCheats).CornerRadius = UDim.new(0, 10) 
    JumpMultiBar_CreerCheats = Instance.new("Frame"); JumpMultiBar_CreerCheats.Name = "JumpMultiBar"; JumpMultiBar_CreerCheats.Size = UDim2.new((jumpPowerMultiplier - 0.1) / (5 - 0.1), 0, 1, 0); JumpMultiBar_CreerCheats.BackgroundColor3 = currentButtonColor; JumpMultiBar_CreerCheats.Parent = JumpMultiSlider_CreerCheats; Instance.new("UICorner", JumpMultiBar_CreerCheats).CornerRadius = UDim.new(0, 10) 
    JumpMultiValue_CreerCheats = Instance.new("TextButton"); JumpMultiValue_CreerCheats.Name = "JumpMultiValue"; JumpMultiValue_CreerCheats.Size = UDim2.new(0, 50, 0, 25); JumpMultiValue_CreerCheats.Position = UDim2.new(0, 200, 0, 5); JumpMultiValue_CreerCheats.BackgroundColor3 = currentSliderBgColor; JumpMultiValue_CreerCheats.Text = tostring(jumpPowerMultiplier); JumpMultiValue_CreerCheats.TextColor3 = currentTextColor; 
    JumpMultiValue_CreerCheats.Font = Enum.Font.GothamBlack; JumpMultiValue_CreerCheats.TextSize = 14; JumpMultiValue_CreerCheats.Parent = JumpMultiContainer_CreerCheats; Instance.new("UICorner", JumpMultiValue_CreerCheats).CornerRadius=UDim.new(0,6)

    _, FlyButton_CreerCheats = createToggle(MovementSection_CreerCheats, "FlyButton", "button_fly", 5, toggleFly, isFlying, "", "") 
    _, InfiniteJumpButton_CreerCheats = createToggle(MovementSection_CreerCheats, "InfiniteJumpButton", "button_infjump", 6, toggleInfiniteJump_Original, infiniteJumpEnabled, "", "") 
    _, WalkOnWaterButton_CreerCheats = createToggle(MovementSection_CreerCheats, "WalkOnWaterButton", "button_walkwater", 7, toggleWalkOnWater_Original, walkOnWaterEnabled, "", "") 
    _, InstantRespawnButton_CreerCheats = createToggle(MovementSection_CreerCheats, "InstantRespawnButton", "button_instaspawn", 8, toggleInstantRespawn_Original, instantRespawnEnabled, "", "") 
    _, GodModeButton_CreerCheats = createToggle(MovementSection_CreerCheats, "GodModeButton", "button_godmode", 9, toggleGodMode_Original, godModeEnabled, "", "") 
    _, InfiniteStaminaButton_CreerCheats = createToggle(MovementSection_CreerCheats, "InfiniteStaminaButton", "button_infstamina", 10, toggleInfiniteStamina_Original, infiniteStaminaEnabled, "", "") 
    _, PhaseButton_CreerCheats = createToggle(MovementSection_CreerCheats, "PhaseButton", "button_phase", 11, togglePhase_Original, phaseEnabled, "", "") 
    _, AntiVoidButton_CreerCheats = createToggle(MovementSection_CreerCheats, "AntiVoidButton", "button_antivoid", 12, toggleAntiVoid_Original, antiVoidEnabled, "", "") 
    _, PlatformStandButton_CreerCheats = createToggle(MovementSection_CreerCheats, "PlatformStandButton", "button_platformstand", 13, togglePlatformStand_Original, platformStandEnabled, "", ""); FlingToolsOtherButtons["PlatformStand"] = PlatformStandButton_CreerCheats 

    AdvMovementSection_CreerCheats = createSection(CheatsScroll_Creer, "AdvMovementSection", "section_advanced_movement", 80, 2, "") 
    AdvMovGrid_CreerCheats = Instance.new("UIGridLayout"); AdvMovGrid_CreerCheats.CellSize=UDim2.new(0,110,0,30); AdvMovGrid_CreerCheats.CellPadding=UDim2.new(0,5,0,8); AdvMovGrid_CreerCheats.StartCorner=Enum.StartCorner.TopLeft; AdvMovGrid_CreerCheats.HorizontalAlignment=Enum.HorizontalAlignment.Center; AdvMovGrid_CreerCheats.VerticalAlignment=Enum.VerticalAlignment.Top; AdvMovGrid_CreerCheats.SortOrder=Enum.SortOrder.LayoutOrder; AdvMovGrid_CreerCheats.Parent=AdvMovementSection_CreerCheats 
    SpiderButton_CreerCheats = createButton(AdvMovementSection_CreerCheats, "SpiderButton", "button_spider", 1, toggleSpider_Original, "", "", spiderEnabled) 
    JesusFlyButton_CreerCheats = createButton(AdvMovementSection_CreerCheats, "JesusFlyButton", "button_jesusfly", 2, toggleJesusFly_Original, "", "", jesusFlyEnabled) 
    HighJumpButton_CreerCheats = createButton(AdvMovementSection_CreerCheats, "HighJumpButton", "button_highjump", 3, HighJump_Original, "") 

    FunMovementSection_CreerCheats = createSection(CheatsScroll_Creer, "FunMovementSection", "section_fun_movement", 280, 3, "") 
    FunMovGrid_CreerCheats = Instance.new("UIGridLayout"); FunMovGrid_CreerCheats.CellSize=UDim2.new(0,110,0,30); FunMovGrid_CreerCheats.CellPadding=UDim2.new(0,5,0,8); FunMovGrid_CreerCheats.StartCorner=Enum.StartCorner.TopLeft; FunMovGrid_CreerCheats.HorizontalAlignment=Enum.HorizontalAlignment.Center; FunMovGrid_CreerCheats.VerticalAlignment=Enum.VerticalAlignment.Top; FunMovGrid_CreerCheats.SortOrder=Enum.SortOrder.LayoutOrder; FunMovGrid_CreerCheats.Parent=FunMovementSection_CreerCheats 
    WallWalkButton_CreerCheats = createButton(FunMovementSection_CreerCheats, "WallWalkButton", "button_wallwalk", 1, toggleWallWalk_Original, "", "", wallWalkEnabled) 
    TeleportToolButton_CreerCheats = createButton(FunMovementSection_CreerCheats, "TeleportToolButton", "button_tptool", 2, toggleTeleportTool_Original, "", "", teleportToolEnabled) 
    LowGravityButton_CreerCheats = createButton(FunMovementSection_CreerCheats, "LowGravityButton", "button_lowgravity", 3, toggleLowGravity_Original, "", "", lowGravityEnabled) 
    BunnyHopButton_CreerCheats = createButton(FunMovementSection_CreerCheats, "BunnyHopButton", "button_bhop", 4, toggleBunnyHop_Original, "", "", bhopEnabled) 
    WalkOnAirButton_CreerCheats = createButton(FunMovementSection_CreerCheats, "WalkOnAirButton", "button_walkonair", 5, toggleWalkOnAir_Original, "", "", walkOnAirEnabled); FlingToolsOtherButtons["WalkOnAir"] = WalkOnAirButton_CreerCheats 
    SpinPlayerButton_CreerCheats = createButton(FunMovementSection_CreerCheats, "SpinPlayerButton", "button_spinplayer", 6, toggleSpinPlayer_Original, "", "", spinPlayerEnabled) 
    RagdollButton_CreerCheats = createButton(FunMovementSection_CreerCheats, "RagdollButton", "button_ragdoll", 7, toggleRagdoll_Original, "", "", ragdollEnabled) 
    FloatUpButton_CreerCheats = createButton(FunMovementSection_CreerCheats, "FloatUpButton", "button_floatup", 8, toggleFloatUp_Original, "", "", floatUpEnabled) 

    VisualSection_CreerCheats = createSection(CheatsScroll_Creer, "VisualSection", "section_visual", 230, 4, "") 
    FOVContainer_CreerCheats = Instance.new("Frame"); FOVContainer_CreerCheats.Size = UDim2.new(1, -10, 0, 35); FOVContainer_CreerCheats.BackgroundTransparency = 1; FOVContainer_CreerCheats.Position = UDim2.new(0, 5, 0, 30); FOVContainer_CreerCheats.Parent = VisualSection_CreerCheats 
    FOVLabel_CreerCheats = Instance.new("TextLabel"); FOVLabel_CreerCheats.Name="FOVLabel"; FOVLabel_CreerCheats.Size = UDim2.new(0, 80, 1, 0); FOVLabel_CreerCheats.Position = UDim2.new(0, 0, 0, 0); FOVLabel_CreerCheats.BackgroundTransparency = 1; FOVLabel_CreerCheats.Text = getText("label_fov"); FOVLabel_CreerCheats.TextColor3 = currentTextColor; FOVLabel_CreerCheats.Font = Enum.Font.GothamBlack; FOVLabel_CreerCheats.TextSize = 16; FOVLabel_CreerCheats.TextXAlignment = Enum.TextXAlignment.Left; FOVLabel_CreerCheats.Parent = FOVContainer_CreerCheats 
    FOVSlider_CreerCheats = Instance.new("Frame"); FOVSlider_CreerCheats.Name = "Slider_FOV"; FOVSlider_CreerCheats.Size = UDim2.new(0, 100, 0, 25); FOVSlider_CreerCheats.Position = UDim2.new(0, 95, 0, 5); FOVSlider_CreerCheats.BackgroundColor3 = currentSliderBgColor; FOVSlider_CreerCheats.Active = true; FOVSlider_CreerCheats.Parent = FOVContainer_CreerCheats; Instance.new("UICorner", FOVSlider_CreerCheats).CornerRadius = UDim.new(0, 10) 
    FOVBar_CreerCheats = Instance.new("Frame"); FOVBar_CreerCheats.Name = "Bar"; FOVBar_CreerCheats.Size = UDim2.new((fovValue - 30) / (120 - 30), 0, 1, 0); FOVBar_CreerCheats.BackgroundColor3 = currentButtonColor; FOVBar_CreerCheats.Parent = FOVSlider_CreerCheats; Instance.new("UICorner", FOVBar_CreerCheats).CornerRadius = UDim.new(0, 10) 
    FOVValue_CreerCheats = Instance.new("TextButton"); FOVValue_CreerCheats.Name = "FOVValue"; FOVValue_CreerCheats.Size = UDim2.new(0, 50, 0, 25); FOVValue_CreerCheats.Position = UDim2.new(0, 200, 0, 5); FOVValue_CreerCheats.BackgroundColor3 = currentSliderBgColor; FOVValue_CreerCheats.Text = tostring(math.floor(fovValue)); FOVValue_CreerCheats.TextColor3 = currentTextColor; 
    FOVValue_CreerCheats.Font = Enum.Font.GothamBlack; FOVValue_CreerCheats.TextSize = 14; FOVValue_CreerCheats.Parent = FOVContainer_CreerCheats; Instance.new("UICorner", FOVValue_CreerCheats).CornerRadius=UDim.new(0,6)

    _, RemoveFogButton_CreerCheats = createToggle(VisualSection_CreerCheats, "RemoveFogButton", "button_remfog", 2, toggleRemoveFog_Original, removeFogEnabled, "", "") 
    _, RemoveFogV2Button_CreerCheats = createToggle(VisualSection_CreerCheats, "RemoveFogV2Button", "button_remfogv2", 3, toggleRemoveFogV2_Original, removeFogV2Enabled, "", "") 
    CycleSkyboxButton_CreerCheats = createButton(VisualSection_CreerCheats, "CycleSkyboxButton", "button_cycleskybox", 4, CycleSkybox_Original, ""); 
    CycleSkyboxButton_CreerCheats.Position = UDim2.new(0, 5, 0, 30+(3*35)+5) 

    CharScaleContainer_CreerCheats = Instance.new("Frame"); CharScaleContainer_CreerCheats.Size = UDim2.new(1, -10, 0, 35); CharScaleContainer_CreerCheats.BackgroundTransparency = 1; CharScaleContainer_CreerCheats.LayoutOrder = 5; CharScaleContainer_CreerCheats.Parent = VisualSection_CreerCheats; CharScaleContainer_CreerCheats.Position = UDim2.new(0,5,0,30+(4*35)+5) 
    CharScaleLabel_CreerCheats = Instance.new("TextLabel"); CharScaleLabel_CreerCheats.Name="CharScaleLabel"; CharScaleLabel_CreerCheats.Size = UDim2.new(0, 80, 1, 0); CharScaleLabel_CreerCheats.Position = UDim2.new(0, 0, 0, 0); CharScaleLabel_CreerCheats.BackgroundTransparency = 1; CharScaleLabel_CreerCheats.Text = getText("label_charscale"); CharScaleLabel_CreerCheats.TextColor3 = currentTextColor; CharScaleLabel_CreerCheats.Font = Enum.Font.GothamBlack; CharScaleLabel_CreerCheats.TextSize = 16; CharScaleLabel_CreerCheats.TextXAlignment = Enum.TextXAlignment.Left; CharScaleLabel_CreerCheats.Parent = CharScaleContainer_CreerCheats 
    CharScaleSlider_CreerCheats = Instance.new("Frame"); CharScaleSlider_CreerCheats.Name = "Slider_CharScale"; CharScaleSlider_CreerCheats.Size = UDim2.new(0, 100, 0, 25); CharScaleSlider_CreerCheats.Position = UDim2.new(0, 95, 0, 5); CharScaleSlider_CreerCheats.BackgroundColor3 = currentSliderBgColor; CharScaleSlider_CreerCheats.Active = true; CharScaleSlider_CreerCheats.Parent = CharScaleContainer_CreerCheats; Instance.new("UICorner", CharScaleSlider_CreerCheats).CornerRadius = UDim.new(0, 10) 
    CharScaleBar_CreerCheats = Instance.new("Frame"); CharScaleBar_CreerCheats.Name = "CharScaleBar"; CharScaleBar_CreerCheats.Size = UDim2.new((characterScaleValue-0.1)/(3-0.1), 0, 1, 0); CharScaleBar_CreerCheats.BackgroundColor3 = currentButtonColor; CharScaleBar_CreerCheats.Parent = CharScaleSlider_CreerCheats; Instance.new("UICorner", CharScaleBar_CreerCheats).CornerRadius = UDim.new(0, 10) 
    charScaleValueLabel = Instance.new("TextButton"); charScaleValueLabel.Name = "CharScaleValue"; charScaleValueLabel.Size = UDim2.new(0, 50, 0, 25); charScaleValueLabel.Position = UDim2.new(0, 200, 0, 5); charScaleValueLabel.BackgroundColor3 = currentSliderBgColor; charScaleValueLabel.Text = string.format("%.2f", characterScaleValue); charScaleValueLabel.TextColor3 = currentTextColor; 
    charScaleValueLabel.Font = Enum.Font.GothamBlack; charScaleValueLabel.TextSize = 14; charScaleValueLabel.Parent = CharScaleContainer_CreerCheats; Instance.new("UICorner", charScaleValueLabel).CornerRadius=UDim.new(0,6)

    FunVisualsSection_CreerCheats = createSection(CheatsScroll_Creer, "FunVisualsSection", "section_fun_visuals", 280, 5, "") 
    FunVisGrid_CreerCheats = Instance.new("UIGridLayout"); FunVisGrid_CreerCheats.CellSize=UDim2.new(0,110,0,30); FunVisGrid_CreerCheats.CellPadding=UDim2.new(0,5,0,8); FunVisGrid_CreerCheats.StartCorner=Enum.StartCorner.TopLeft; FunVisGrid_CreerCheats.HorizontalAlignment=Enum.HorizontalAlignment.Center; FunVisGrid_CreerCheats.VerticalAlignment=Enum.VerticalAlignment.Top; FunVisGrid_CreerCheats.SortOrder=Enum.SortOrder.LayoutOrder; FunVisGrid_CreerCheats.Parent=FunVisualsSection_CreerCheats 
    TracersButton_CreerCheats = createButton(FunVisualsSection_CreerCheats, "TracersButton", "button_tracers", 1, toggleTracers_Original, "", "", tracersEnabled) 
    NoArmsButton_CreerCheats = createButton(FunVisualsSection_CreerCheats, "NoArmsButton", "button_noarms", 2, toggleNoArms_Original, "", "", noArmsEnabled) 
    NoLegsButton_CreerCheats = createButton(FunVisualsSection_CreerCheats, "NoLegsButton", "button_nolegs", 3, toggleNoLegs_Original, "", "", noLegsEnabled) 
    RainbowCharButton_CreerCheats = createButton(FunVisualsSection_CreerCheats, "RainbowCharButton", "button_rainbowchar", 4, toggleRainbowChar_Original, "", "", rainbowCharEnabled) 
    ThirdPersonButton_CreerCheats = createButton(FunVisualsSection_CreerCheats, "ThirdPersonButton", "button_thirdperson", 5, ForceThirdPerson_Original, "") 
    FirstPersonButton_CreerCheats = createButton(FunVisualsSection_CreerCheats, "FirstPersonButton", "button_firstperson", 6, ForceFirstPerson_Original, "") 
    HeadlessButton_CreerCheats = createButton(FunVisualsSection_CreerCheats, "HeadlessButton", "button_headless", 7, toggleHeadless_Original, "", "", headlessEnabled) 
    FreezeCamButton_CreerCheats = createButton(FunVisualsSection_CreerCheats, "FreezeCamButton", "button_freezecam", 8, toggleFreezeCam_Original, "", "", freezeCamEnabled) 
    UpsideDownButton_CreerCheats = createButton(FunVisualsSection_CreerCheats, "UpsideDownButton", "button_upsidedown", 9, toggleUpsideDown_Original, "", "", upsideDownEnabled) 
    NoFaceButton_CreerCheats = createButton(FunVisualsSection_CreerCheats, "NoFaceButton", "button_noface", 10, toggleNoFace_Original, "", "", noFaceEnabled) 
    ForceFieldButton_CreerCheats = createButton(FunVisualsSection_CreerCheats, "ForceFieldButton", "button_forcefield", 11, toggleForceField_Original, "", "", forceFieldEnabled) 

    CombatVisualsSection_CreerCheats = createSection(CheatsScroll_Creer, "CombatVisualsSection", "section_combat_visuals", 80, 6, "") 
    CombatGrid_CreerCheats = Instance.new("UIGridLayout"); CombatGrid_CreerCheats.CellSize=UDim2.new(0,110,0,30); CombatGrid_CreerCheats.CellPadding=UDim2.new(0,5,0,8); CombatGrid_CreerCheats.StartCorner=Enum.StartCorner.TopLeft; CombatGrid_CreerCheats.HorizontalAlignment=Enum.HorizontalAlignment.Center; CombatGrid_CreerCheats.VerticalAlignment=Enum.VerticalAlignment.Top; CombatGrid_CreerCheats.SortOrder=Enum.SortOrder.LayoutOrder; CombatGrid_CreerCheats.Parent=CombatVisualsSection_CreerCheats 
    ChamsV2Button_CreerCheats = createButton(CombatVisualsSection_CreerCheats, "ChamsV2Button", "button_chamsv2", 1, function() CycleChamsStyle_Original(false) end, ""); FlingToolsOtherButtons["ChamsV2"] = ChamsV2Button_CreerCheats 

    GravitySection_CreerCheats = createSection(CheatsScroll_Creer, "GravitySection", "section_gravity", 80, 7, "") 
    GravityContainer_CreerCheats = Instance.new("Frame"); GravityContainer_CreerCheats.Size = UDim2.new(1, -10, 0, 35); GravityContainer_CreerCheats.BackgroundTransparency = 1; GravityContainer_CreerCheats.LayoutOrder = 1; GravityContainer_CreerCheats.Parent = GravitySection_CreerCheats; GravityContainer_CreerCheats.Position = UDim2.new(0,5,0,30) 
    GravityLabel_CreerCheats = Instance.new("TextLabel"); GravityLabel_CreerCheats.Name="GravityLabel"; GravityLabel_CreerCheats.Size = UDim2.new(0, 80, 1, 0); GravityLabel_CreerCheats.Position = UDim2.new(0, 0, 0, 0); GravityLabel_CreerCheats.BackgroundTransparency = 1; GravityLabel_CreerCheats.Text = getText("label_gravity"); GravityLabel_CreerCheats.TextColor3 = currentTextColor; GravityLabel_CreerCheats.Font = Enum.Font.GothamBlack; GravityLabel_CreerCheats.TextSize = 16; GravityLabel_CreerCheats.TextXAlignment = Enum.TextXAlignment.Left; GravityLabel_CreerCheats.Parent = GravityContainer_CreerCheats 
    GravitySlider_CreerCheats = Instance.new("Frame"); GravitySlider_CreerCheats.Name = "Slider_Gravity"; GravitySlider_CreerCheats.Size = UDim2.new(0, 100, 0, 25); GravitySlider_CreerCheats.Position = UDim2.new(0, 95, 0, 5); GravitySlider_CreerCheats.BackgroundColor3 = currentSliderBgColor; GravitySlider_CreerCheats.Active = true; GravitySlider_CreerCheats.Parent = GravityContainer_CreerCheats; Instance.new("UICorner", GravitySlider_CreerCheats).CornerRadius = UDim.new(0, 10) 
    GravityBar_CreerCheats = Instance.new("Frame"); GravityBar_CreerCheats.Name = "Bar"; GravityBar_CreerCheats.Size = UDim2.new(196.2/1000, 0, 1, 0); GravityBar_CreerCheats.BackgroundColor3 = currentButtonColor; GravityBar_CreerCheats.Parent = GravitySlider_CreerCheats; Instance.new("UICorner", GravityBar_CreerCheats).CornerRadius = UDim.new(0, 10) 
    GravityValue_CreerCheats = Instance.new("TextButton"); GravityValue_CreerCheats.Name = "GravityValue"; GravityValue_CreerCheats.Size = UDim2.new(0, 50, 0, 25); GravityValue_CreerCheats.Position = UDim2.new(0, 200, 0, 5); GravityValue_CreerCheats.BackgroundColor3 = currentSliderBgColor; GravityValue_CreerCheats.Text = "196.2"; GravityValue_CreerCheats.TextColor3 = currentTextColor; 
    GravityValue_CreerCheats.Font = Enum.Font.GothamBlack; GravityValue_CreerCheats.TextSize = 14; GravityValue_CreerCheats.Parent = GravityContainer_CreerCheats; Instance.new("UICorner", GravityValue_CreerCheats).CornerRadius=UDim.new(0,6)

    ResetAllContainer_CreerCheats = Instance.new("Frame"); ResetAllContainer_CreerCheats.Size = UDim2.new(1, 0, 0, 35); ResetAllContainer_CreerCheats.BackgroundTransparency = 1; ResetAllContainer_CreerCheats.Parent = CheatsScroll_Creer; ResetAllContainer_CreerCheats.LayoutOrder = 8 
    ResetPanicGrid_CreerCheats = Instance.new("UIGridLayout"); ResetPanicGrid_CreerCheats.CellSize=UDim2.new(0,110,0,30); ResetPanicGrid_CreerCheats.CellPadding=UDim2.new(0,5,0,8); ResetPanicGrid_CreerCheats.StartCorner=Enum.StartCorner.TopLeft; ResetPanicGrid_CreerCheats.HorizontalAlignment=Enum.HorizontalAlignment.Center; ResetPanicGrid_CreerCheats.VerticalAlignment=Enum.VerticalAlignment.Top; ResetPanicGrid_CreerCheats.SortOrder=Enum.SortOrder.LayoutOrder; ResetPanicGrid_CreerCheats.Parent=ResetAllContainer_CreerCheats 
    ResetAllButton_CreerCheats = createButton(ResetPanicGrid_CreerCheats, "ResetAllButton", "button_resetall", 1, function() 
        pcall(function() workspace.Gravity = 196.2 end); if GravityBar_CreerCheats then ratio_ResetAll = 196.2/1000; if typeof(ratio_ResetAll)=="number" then GravityBar_CreerCheats.Size = UDim2.new(ratio_ResetAll, 0, 1, 0) end end; if GravityValue_CreerCheats then GravityValue_CreerCheats.Text = "196.2" end
        hum_ResetAll=player.Character and player.Character:FindFirstChildWhichIsA("Humanoid") 
        if hum_ResetAll then
            pcall(function() hum_ResetAll.WalkSpeed=16 end); if SpeedBar_CreerCheats then ratio_ResetAll=16/500; if typeof(ratio_ResetAll)=="number" then SpeedBar_CreerCheats.Size = UDim2.new(ratio_ResetAll, 0, 1, 0) end end; if SpeedValue_CreerCheats then SpeedValue_CreerCheats.Text="16" end
            pcall(function() hum_ResetAll.JumpPower=50 end); if JumpBar_CreerCheats then ratio_ResetAll=50/500; if typeof(ratio_ResetAll)=="number" then JumpBar_CreerCheats.Size = UDim2.new(ratio_ResetAll, 0, 1, 0) end end; if JumpValue_CreerCheats then JumpValue_CreerCheats.Text="50" end
        end
        flySpeed=50; FlySpeedValue_ResetAll=MainFrame:FindFirstChild("FlySpeedValue",true); FlySpeedBar_ResetAll=MainFrame:FindFirstChild("FlySpeedBar",true); if FlySpeedBar_ResetAll then ratio_ResetAll=(50-1)/(200-1); if typeof(ratio_ResetAll)=="number" then FlySpeedBar_ResetAll.Size = UDim2.new(ratio_ResetAll, 0, 1, 0) end end; if FlySpeedValue_ResetAll then FlySpeedValue_ResetAll.Text="50" end
        fovValue=70; Camera.FieldOfView = fovValue; if FOVBar_CreerCheats then ratio_ResetAll=(fovValue-30)/(120-30); if typeof(ratio_ResetAll)=="number" then FOVBar_CreerCheats.Size=UDim2.new(ratio_ResetAll,0,1,0) end end; if FOVValue_CreerCheats then FOVValue_CreerCheats.Text=tostring(math.floor(fovValue)) end 
        walkSpeedMultiplier=1; if MainFrame:FindFirstChild("SpeedMultiValue",true) then MainFrame:FindFirstChild("SpeedMultiValue",true).Text="1" end; if MainFrame:FindFirstChild("SpeedMultiBar",true) then MainFrame:FindFirstChild("SpeedMultiBar",true).Size=UDim2.new((1-0.1)/(5-0.1),0,1,0) end; ApplyWalkSpeedMultiplier_Original(1)
        jumpPowerMultiplier=1; if MainFrame:FindFirstChild("JumpMultiValue",true) then MainFrame:FindFirstChild("JumpMultiValue",true).Text="1" end; if MainFrame:FindFirstChild("JumpMultiBar",true) then MainFrame:FindFirstChild("JumpMultiBar",true).Size=UDim2.new((1-0.1)/(5-0.1),0,1,0) end; ApplyJumpPowerMultiplier_Original(1)
        ApplyFullBrightnessSlider_Original(2) 
        ApplyCharacterScale_Original(1) 
        if charScaleValueLabel then charScaleValueLabel.Text = "1.00" end; charScaleBar_ResetAll = MainFrame and MainFrame:FindFirstChild("CharScaleBar", true); if charScaleBar_ResetAll then charScaleBar_ResetAll.Size = UDim2.new((1-0.1)/(3-0.1),0,1,0) end 

        chatSpamText = "DMX GUI ON TOP!"; chatSpamDelay = 1; ChatSpamInput_ResetAll=MainFrame:FindFirstChild("ChatSpamInput",true); ChatSpamDelayBar_ResetAll=MainFrame:FindFirstChild("ChatSpamDelayBar",true); ChatSpamDelayValue_ResetAll=MainFrame:FindFirstChild("ChatSpamDelayValue",true); if ChatSpamInput_ResetAll then ChatSpamInput_ResetAll.Text = chatSpamText end; if ChatSpamDelayBar_ResetAll then ratio_ResetAll=(chatSpamDelay-0.1)/(5-0.1); if typeof(ratio_ResetAll)=="number" then ChatSpamDelayBar_ResetAll.Size=UDim2.new(ratio_ResetAll,0,1,0) end end; if ChatSpamDelayValue_ResetAll then ChatSpamDelayValue_ResetAll.Text=tostring(chatSpamDelay) end 

        if isFlying then toggleFly() end
        if isNoclip then toggleNoclip() end
        if infiniteJumpEnabled then toggleInfiniteJump_Original() end
        if walkOnAirEnabled then toggleWalkOnAir_Original() end
        if platformStandEnabled then togglePlatformStand_Original() end
        if spinPlayerEnabled then toggleSpinPlayer_Original() end 
        if headlessEnabled then toggleHeadless_Original() end 
        if freezeCamEnabled then toggleFreezeCam_Original() end 
        if ragdollEnabled then toggleRagdoll_Original() end 
        if floatUpEnabled then toggleFloatUp_Original() end 
        if upsideDownEnabled then toggleUpsideDown_Original() end 
        if noFaceEnabled then toggleNoFace_Original() end 
        if forceFieldEnabled then toggleForceField_Original() end 
        if walkOnWaterEnabled then toggleWalkOnWater_Original() end
        if instantRespawnEnabled then toggleInstantRespawn_Original() end
        if godModeEnabled then toggleGodMode_Original() end
        if infiniteStaminaEnabled then toggleInfiniteStamina_Original() end
        if phaseEnabled then togglePhase_Original() end
        if fullBrightEnabled then toggleFullBright_Original() end
        if removeFogEnabled then toggleRemoveFog_Original() end
        if chatSpamEnabled then toggleChatSpam_Original() end
        if spiderEnabled then toggleSpider_Original() end
        if jesusFlyEnabled then toggleJesusFly_Original() end
        if tracersEnabled then toggleTracers_Original() end
        if noArmsEnabled then toggleNoArms_Original() end
        if noLegsEnabled then toggleNoLegs_Original() end
        if rainbowCharEnabled then toggleRainbowChar_Original() end
        if wallWalkEnabled then toggleWallWalk_Original() end
        if teleportToolEnabled then toggleTeleportTool_Original() end
        if lowGravityEnabled then toggleLowGravity_Original() end
        if bhopEnabled then toggleBunnyHop_Original() end
        if autoClickerEnabled then toggleAutoClicker_Original() end
        if antiVoidEnabled then toggleAntiVoid_Original() end 
        if removeFogV2Enabled then toggleRemoveFogV2_Original() end 
        if autoRespawnEnabled then toggleAutoRespawn_Original() end 
        settings_tbl.Chams_Style = 1; CycleChamsStyle_Original(true) 
        if cartoonOutlineEnabled then toggleCartoonOutline_Original() end 
        if invertColorsEnabled then toggleInvertColors_Original() end 
        if bloomEnabled then toggleBloom_Original() end 
        if depthOfFieldEnabled then toggleDepthOfField_Original() end 
        if sunRaysEnabled then toggleSunRays_Original() end 
        if blurEnabled then toggleBlur_Original() end 
        if neonWorldEnabled then toggleNeonWorld_Original() end 
        if coloredFogEnabled then toggleColoredFog_Original() end 

        ShowNotification("notif_states_reset_core")
    end, "");
    PanicButton_CreerCheats = createButton(ResetPanicGrid_CreerCheats, "PanicButton", "button_panic", 2, PanicMode_Original, ""); PanicButton_CreerCheats.Name = "PanicButton" 
    PanicButton_CreerCheats.BackgroundColor3 = Color3.fromRGB(255, 0, 0); addHoverEffect(PanicButton_CreerCheats); 

    createSliderLogic(SpeedSlider_CreerCheats, SpeedBar_CreerCheats, SpeedValue_CreerCheats, 500, function(value) hum_SpeedSlider=player.Character and player.Character:FindFirstChildWhichIsA("Humanoid"); if hum_SpeedSlider then pcall(function() hum_SpeedSlider.WalkSpeed = value * walkSpeedMultiplier end) end end, SpeedContainer_CreerCheats, 16, 0) 
    createSliderLogic(JumpSlider_CreerCheats, JumpBar_CreerCheats, JumpValue_CreerCheats, 500, function(value) hum_JumpSlider=player.Character and player.Character:FindFirstChildWhichIsA("Humanoid"); if hum_JumpSlider then pcall(function() hum_JumpSlider.JumpPower = value * jumpPowerMultiplier end) end end, JumpContainer_CreerCheats, 50, 0) 
    createSliderLogic(SpeedMultiSlider_CreerCheats, SpeedMultiBar_CreerCheats, SpeedMultiValue_CreerCheats, 5, ApplyWalkSpeedMultiplier_Original, SpeedMultiContainer_CreerCheats, walkSpeedMultiplier, 0.1) 
    createSliderLogic(JumpMultiSlider_CreerCheats, JumpMultiBar_CreerCheats, JumpMultiValue_CreerCheats, 5, ApplyJumpPowerMultiplier_Original, JumpMultiContainer_CreerCheats, jumpPowerMultiplier, 0.1) 
    createSliderLogic(FOVSlider_CreerCheats, FOVBar_CreerCheats, FOVValue_CreerCheats, 120, function(value) fovValue = value; Camera.FieldOfView = value end, FOVContainer_CreerCheats, fovValue, 30)
    createSliderLogic(GravitySlider_CreerCheats, GravityBar_CreerCheats, GravityValue_CreerCheats, 1000, function(value) pcall(function() workspace.Gravity = value end); if lowGravityEnabled then toggleLowGravity_Original(); task.wait(); toggleLowGravity_Original() end end, GravityContainer_CreerCheats, 196.2, 0) 
    createSliderLogic(CharScaleSlider_CreerCheats, CharScaleBar_CreerCheats, charScaleValueLabel, 3, ApplyCharacterScale_Original, CharScaleContainer_CreerCheats, characterScaleValue, 0.1) 

    CheatsListLayout_Creer:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function() CheatsScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, CheatsListLayout_Creer.AbsoluteContentSize.Y + 10) end)
    task.wait(0.1)
    CheatsScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, CheatsListLayout_Creer.AbsoluteContentSize.Y + 10)

    pageInstances.Cheats = CheatsPage_Creer; return CheatsPage_Creer
end

CreerPageConsole = function() 
    C3_fromRGB_local_CreerConsole = cached_Color3_fromRGB 
    if typeof(C3_fromRGB_local_CreerConsole) ~= "function" then warn("CreerPageConsole: C3_fromRGB_local_CreerConsole is nil!"); return nil end

    ConsolePage_Creer = Instance.new("Frame"); ConsolePage_Creer.Name = "ConsolePage"; ConsolePage_Creer.Size = UDim2.new(1, 0, 1, 0); ConsolePage_Creer.BackgroundTransparency = 1; ConsolePage_Creer.Visible = false; ConsolePage_Creer.Parent = ContentFrame 
    ConsoleTitle_Creer = Instance.new("TextLabel"); ConsoleTitle_Creer.Name="ConsoleTitle"; ConsoleTitle_Creer.Size = UDim2.new(1, 0, 0, 40); ConsoleTitle_Creer.Position = UDim2.new(0, 0, 0, 0); ConsoleTitle_Creer.BackgroundTransparency = 1; ConsoleTitle_Creer.Font = Enum.Font.GothamBlack; ConsoleTitle_Creer.TextColor3 = C3_fromRGB_local_CreerConsole(0, 220, 255); ConsoleTitle_Creer.TextSize = 20; 
    ConsoleTitle_Creer.Text = getText("tab_console") .. " "; 
    ConsoleTitle_Creer.Parent = ConsolePage_Creer
    ErrorList_CreerConsole = Instance.new("ScrollingFrame"); ErrorList_CreerConsole.Name = "ErrorList"; ErrorList_CreerConsole.Size = UDim2.new(1, -10, 1, -55); ErrorList_CreerConsole.Position = UDim2.new(0, 5, 0, 45); ErrorList_CreerConsole.BackgroundTransparency = 0.8; ErrorList_CreerConsole.BackgroundColor3 = currentSliderBgColor; ErrorList_CreerConsole.CanvasSize = UDim2.new(0, 0, 0, 0); ErrorList_CreerConsole.ScrollBarThickness = 6; ErrorList_CreerConsole.Parent = ConsolePage_Creer; Instance.new("UICorner", ErrorList_CreerConsole).CornerRadius = UDim.new(0, 6) 
    consoleErrorList = ErrorList_CreerConsole 
    UIListLayout_CreerConsole = Instance.new("UIListLayout"); UIListLayout_CreerConsole.Name = "ErrorListLayout"; UIListLayout_CreerConsole.Parent = ErrorList_CreerConsole; UIListLayout_CreerConsole.SortOrder = Enum.SortOrder.LayoutOrder; UIListLayout_CreerConsole.Padding = UDim.new(0, 5) 
    bottomButtonContainer_CreerConsole = Instance.new("Frame"); bottomButtonContainer_CreerConsole.Size=UDim2.new(1,-10,0,40); bottomButtonContainer_CreerConsole.Position=UDim2.new(0,5,1,-45); bottomButtonContainer_CreerConsole.BackgroundTransparency=1; bottomButtonContainer_CreerConsole.Parent=ConsolePage_Creer 
    bottomGrid_CreerConsole = Instance.new("UIGridLayout"); bottomGrid_CreerConsole.CellSize=UDim2.new(0,110,0,30); bottomGrid_CreerConsole.CellPadding=UDim2.new(0,5,0,8); bottomGrid_CreerConsole.StartCorner=Enum.StartCorner.TopLeft; bottomGrid_CreerConsole.HorizontalAlignment=Enum.HorizontalAlignment.Center; bottomGrid_CreerConsole.VerticalAlignment=Enum.VerticalAlignment.Top; bottomGrid_CreerConsole.SortOrder=Enum.SortOrder.LayoutOrder; bottomGrid_CreerConsole.Parent=bottomButtonContainer_CreerConsole 
    CopyAllButton_CreerConsole = createButton(bottomButtonContainer_CreerConsole, "CopyAllButton", "button_copyall", 1, function() aL_CopyAll=""; for _,c in ipairs(ErrorList_CreerConsole:GetChildren()) do if c:IsA("TextLabel") and c.Name=="ErrorEntry" then aL_CopyAll=aL_CopyAll..c.Text.."\n" end end; success_CopyAll, err_CopyAll = pcall(function() if typeof(setclipboard) == "function" then setclipboard(aL_CopyAll); ShowNotification("notif_logs_copied") elseif HttpService then HttpService:PostAsync("YOUR_WEBHOOK", HttpService:JSONEncode({content="--- ALL LOGS ---\n"..aL_CopyAll}), Enum.HttpContentType.ApplicationJson); ShowNotification("notif_logs_sent") else ShowNotification("notif_copy_unavailable") end end); if not success_CopyAll then ShowNotification("notif_copy_failed", tostring(err_CopyAll)) end end, ""); CopyAllButton_CreerConsole.Name = "CopyAllButton"; 

    ClearConsoleBtn_CreerConsole = createButton(bottomButtonContainer_CreerConsole, "ClearConsoleButton", "button_clearconsole", 2, ClearConsoleOutput_Original, ""); ClearConsoleBtn_CreerConsole.Name = "ClearConsoleButton"; 

    AddErrorMessage_CreerConsole = function(message) EL_AddError=Instance.new("TextLabel"); EL_AddError.Name="ErrorEntry"; EL_AddError.Size=UDim2.new(1,-30,0,0); EL_AddError.BackgroundColor3=Color3.fromRGB(currentSliderBgColor.R*255*0.8, currentSliderBgColor.G*255*0.8, currentSliderBgColor.B*255*0.8); EL_AddError.TextColor3=currentTextColor; EL_AddError.TextSize=12; EL_AddError.TextWrapped=true; EL_AddError.Text=message; 
        EL_AddError.Font=Enum.Font.GothamBlack; 
        EL_AddError.TextXAlignment=Enum.TextXAlignment.Left; EL_AddError.Parent=ErrorList_CreerConsole; EL_AddError.AutomaticSize=Enum.AutomaticSize.Y; Instance.new("UICorner",EL_AddError).CornerRadius=UDim.new(0,5); CB_AddError=Instance.new("TextButton"); CB_AddError.Size=UDim2.new(0,25,0,25); CB_AddError.AnchorPoint=Vector2.new(1,0.5); CB_AddError.Position=UDim2.new(1,-5,0.5,0); CB_AddError.Text=""; CB_AddError.TextSize=16; CB_AddError.BackgroundColor3=currentButtonColor; CB_AddError.TextColor3=currentTextColor;
        CB_AddError.Font=Enum.Font.GothamBlack; 
        CB_AddError.Parent=EL_AddError; Instance.new("UICorner",CB_AddError).CornerRadius=UDim.new(0,5); CB_AddError.MouseButton1Click:Connect(function() success_AddError, err_AddError = pcall(function() if typeof(setclipboard) == "function" then setclipboard(message); ShowNotification("notif_error_copied") elseif HttpService then HttpService:PostAsync("YOUR_WEBHOOK", HttpService:JSONEncode({content=message}), Enum.HttpContentType.ApplicationJson); ShowNotification("notif_error_sent") else ShowNotification("notif_copy_unavailable") end end); if not success_AddError then ShowNotification("notif_copy_failed", tostring(err_AddError)) end end); addHoverEffect(CB_AddError); task.wait(); ErrorList_CreerConsole.CanvasSize=UDim2.new(0,0,0,UIListLayout_CreerConsole.AbsoluteContentSize.Y+5) end
    LogService.MessageOut:Connect(function(m,mT) if mT==Enum.MessageType.MessageError or mT==Enum.MessageType.MessageWarning then AddErrorMessage_CreerConsole(tostring(m)) end end)

    pageInstances.Console = ConsolePage_Creer; return ConsolePage_Creer
end

CreerPageExecutor = function() 
    C3_fromRGB_local_CreerExecutor = cached_Color3_fromRGB 
    if typeof(C3_fromRGB_local_CreerExecutor) ~= "function" then warn("CreerPageExecutor: C3_fromRGB_local_CreerExecutor is nil!"); return nil end

    ExecutorPage_Creer = Instance.new("Frame"); ExecutorPage_Creer.Name = "ExecutorPage"; ExecutorPage_Creer.Size = UDim2.new(1, 0, 1, 0); ExecutorPage_Creer.BackgroundTransparency = 1; ExecutorPage_Creer.Visible = false; ExecutorPage_Creer.Parent = ContentFrame 
    ExecutorTitle_Creer = Instance.new("TextLabel"); ExecutorTitle_Creer.Name="ExecutorTitle"; ExecutorTitle_Creer.Size = UDim2.new(1, 0, 0, 40); ExecutorTitle_Creer.Position = UDim2.new(0, 0, 0, 0); ExecutorTitle_Creer.BackgroundTransparency = 1; ExecutorTitle_Creer.Font = Enum.Font.GothamBlack; ExecutorTitle_Creer.TextColor3 = C3_fromRGB_local_CreerExecutor(0, 220, 255); ExecutorTitle_Creer.TextSize = 20; 
    ExecutorTitle_Creer.Text = getText("tab_executor") .. " "; 
    ExecutorTitle_Creer.Parent = ExecutorPage_Creer

    scriptExecutorInput = Instance.new("TextBox") 
    scriptExecutorInput.Name = "ScriptExecutorInput"; scriptExecutorInput.Size = UDim2.new(1, -10, 1, -95); scriptExecutorInput.Position = UDim2.new(0, 5, 0, 40); scriptExecutorInput.BackgroundColor3 = currentSliderBgColor; scriptExecutorInput.TextColor3 = currentTextColor;
    scriptExecutorInput.PlaceholderText = getText("placeholder_executor"); 
    scriptExecutorInput.PlaceholderColor3 = currentPlaceholderColor;
    scriptExecutorInput.Font = Enum.Font.Code; 
    scriptExecutorInput.TextSize = 12; scriptExecutorInput.MultiLine = true; scriptExecutorInput.TextWrapped = true; scriptExecutorInput.TextXAlignment = Enum.TextXAlignment.Left; scriptExecutorInput.TextYAlignment = Enum.TextYAlignment.Top; scriptExecutorInput.ClearTextOnFocus = false; scriptExecutorInput.Parent = ExecutorPage_Creer; Instance.new("UICorner", scriptExecutorInput).CornerRadius = UDim.new(0, 8)

    ButtonContainer_CreerExecutor = Instance.new("Frame"); ButtonContainer_CreerExecutor.Name = "ButtonContainer"; ButtonContainer_CreerExecutor.Size = UDim2.new(1, -10, 0, 40); ButtonContainer_CreerExecutor.Position = UDim2.new(0, 5, 1, -45); ButtonContainer_CreerExecutor.BackgroundTransparency = 1; ButtonContainer_CreerExecutor.Parent = ExecutorPage_Creer 
    ButtonLayout_CreerExecutor = Instance.new("UIListLayout"); ButtonLayout_CreerExecutor.FillDirection = Enum.FillDirection.Horizontal; ButtonLayout_CreerExecutor.HorizontalAlignment = Enum.HorizontalAlignment.Center; ButtonLayout_CreerExecutor.VerticalAlignment = Enum.VerticalAlignment.Center; ButtonLayout_CreerExecutor.SortOrder = Enum.SortOrder.LayoutOrder; ButtonLayout_CreerExecutor.Padding = UDim.new(0, 10); ButtonLayout_CreerExecutor.Parent = ButtonContainer_CreerExecutor 

    ExecuteButton_CreerExecutor = createButton(ButtonContainer_CreerExecutor, "ExecuteScriptButton", "button_execute", 1, ExecuteScript_Original, ""); ExecuteButton_CreerExecutor.Name = "ExecuteScriptButton"; ExecuteButton_CreerExecutor.Size = UDim2.new(0, 80, 0, 30) 
    PasteButton_CreerExecutor = createButton(ButtonContainer_CreerExecutor, "PasteScriptButton", "button_paste", 2, PasteScript_Original, ""); PasteButton_CreerExecutor.Name = "PasteScriptButton"; PasteButton_CreerExecutor.Size = UDim2.new(0, 80, 0, 30) 
    ClearButton_CreerExecutor = createButton(ButtonContainer_CreerExecutor, "ClearScriptButton", "button_clear", 3, ClearScript_Original, ""); ClearButton_CreerExecutor.Name = "ClearScriptButton"; ClearButton_CreerExecutor.Size = UDim2.new(0, 80, 0, 30) 

    pageInstances.Executor = ExecutorPage_Creer; return ExecutorPage_Creer
end

CreerPageClavier = function() 
    C3_fromRGB_local_CreerClavier = cached_Color3_fromRGB 
    C3_new_local_CreerClavier = cached_Color3_new 
    if typeof(C3_fromRGB_local_CreerClavier) ~= "function" then warn("CreerPageClavier: C3_fromRGB_local_CreerClavier is nil!"); return nil end

    KeyboardPage_Creer = Instance.new("Frame"); KeyboardPage_Creer.Name = "KeyboardPage"; KeyboardPage_Creer.Size = UDim2.new(1, 0, 1, 0); KeyboardPage_Creer.BackgroundTransparency = 1; KeyboardPage_Creer.Visible = false; KeyboardPage_Creer.Parent = ContentFrame 
    KeyboardTitle_Creer = Instance.new("TextLabel"); KeyboardTitle_Creer.Name="KeyboardTitle"; KeyboardTitle_Creer.Size = UDim2.new(1, 0, 0, 40); KeyboardTitle_Creer.Position = UDim2.new(0, 0, 0, 0); KeyboardTitle_Creer.BackgroundTransparency = 1; KeyboardTitle_Creer.Font = Enum.Font.GothamBlack; KeyboardTitle_Creer.TextColor3 = C3_fromRGB_local_CreerClavier(0, 220, 255); KeyboardTitle_Creer.TextSize = 20; 
    KeyboardTitle_Creer.Text = getText("tab_keyboard") .. " "; 
    KeyboardTitle_Creer.Parent = KeyboardPage_Creer
    KeyboardFrame_Creer = Instance.new("Frame"); KeyboardFrame_Creer.Name = "KeyboardFrame"; KeyboardFrame_Creer.Size = UDim2.new(1, -10, 1, -55); KeyboardFrame_Creer.Position = UDim2.new(0, 5, 0, 45); KeyboardFrame_Creer.BackgroundColor3 = C3_fromRGB_local_CreerClavier(50, 50, 50); KeyboardFrame_Creer.Parent = KeyboardPage_Creer; Instance.new("UICorner", KeyboardFrame_Creer).CornerRadius = UDim.new(0, 12) 
    KeyboardGradient_Creer = Instance.new("UIGradient"); KeyboardGradient_Creer.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, C3_fromRGB_local_CreerClavier(50, 50, 60)), ColorSequenceKeypoint.new(1, C3_fromRGB_local_CreerClavier(20, 20, 30))}; KeyboardGradient_Creer.Rotation = 45; KeyboardGradient_Creer.Parent = KeyboardFrame_Creer 
    KeyboardNeon_Creer = Instance.new("Frame"); KeyboardNeon_Creer.Name = "KeyboardNeon"; KeyboardNeon_Creer.Size = UDim2.new(1, 4, 1, 4); KeyboardNeon_Creer.Position = UDim2.new(0, -2, 0, -2); KeyboardNeon_Creer.BackgroundColor3 = C3_fromRGB_local_CreerClavier(0, 255, 255); KeyboardNeon_Creer.BorderSizePixel = 0; KeyboardNeon_Creer.BackgroundTransparency = 0.6; KeyboardNeon_Creer.ZIndex = KeyboardFrame_Creer.ZIndex - 1; KeyboardNeon_Creer.Parent = KeyboardFrame_Creer; Instance.new("UICorner", KeyboardNeon_Creer).CornerRadius = UDim.new(0, 12); 
    task.wait() 
    if KeyboardNeon_Creer then 
        kbdNeonTween_Creer = TweenService:Create(KeyboardNeon_Creer, tweenGlow, {BackgroundTransparency = 0.8}) 
        if kbdNeonTween_Creer then kbdNeonTween_Creer:Play() else warn("Failed to create KeyboardNeon_Creer tween") end
    end
    SwitchButton_CreerClavier = Instance.new("TextButton"); SwitchButton_CreerClavier.Name = "Switch"; SwitchButton_CreerClavier.Size = UDim2.new(0, 60, 0, 30); SwitchButton_CreerClavier.Position = UDim2.new(1, -75, 0, 5); SwitchButton_CreerClavier.Text = "AZERTY"; SwitchButton_CreerClavier.TextColor3 = currentTextColor; SwitchButton_CreerClavier.BackgroundColor3 = currentButtonColor; 
    SwitchButton_CreerClavier.Font = Enum.Font.GothamBlack; 
    SwitchButton_CreerClavier.TextSize = 16; SwitchButton_CreerClavier.Parent = KeyboardPage_Creer; Instance.new("UICorner", SwitchButton_CreerClavier).CornerRadius = UDim.new(0, 10)

    qwertyLayout_CreerClavier = {{"`","1","2","3","4","5","6","7","8","9","0","-","=","Backspace"},{"Tab","Q","W","E","R","T","Y","U","I","O","P","[","]","\\"},{"CapsLock","A","S","D","F","G","H","J","K","L",";","'","Return"},{"Shift","Z","X","C","V","B","N","M",",",".","/","Shift"},{"Ctrl","Alt","Space","Alt","Ctrl"}} 
    azertyLayout_CreerClavier = {{"²","&","é","\"","'","(","-","è","_","ç","à",")","=","Backspace"},{"Tab","A","Z","E","R","T","Y","U","I","O","P","^","$","*"},{"CapsLock","Q","S","D","F","G","H","J","K","L","M","ù","%","Return"},{"Shift","<","W","X","C","V","B","N","?",".","/","§","Shift"},{"Ctrl","Alt","Space","AltGr","Ctrl"}} 
    currentLayout = qwertyLayout_CreerClavier 

    createKey_CreerClavier = function(letter, xPosScale, yPosScale, widthScale, heightScale) 
        keyButton_createKey = Instance.new("TextButton"); keyButton_createKey.Size = UDim2.new(widthScale, 0, heightScale, 0); keyButton_createKey.Position = UDim2.new(xPosScale, 0, yPosScale, 0); keyButton_createKey.Text = letter; keyButton_createKey.TextScaled = true; keyButton_createKey.BackgroundColor3 = currentButtonColor; keyButton_createKey.TextColor3 = currentTextColor; 
        keyButton_createKey.Font = Enum.Font.GothamBlack; 
        keyButton_createKey.TextSize = 14; keyButton_createKey.Parent = KeyboardFrame_Creer; Instance.new("UICorner", keyButton_createKey).CornerRadius = UDim.new(0, 6)
        pressTime_createKey = 0; holding_createKey = false 
        keyButton_createKey.MouseButton1Down:Connect(function()
            pressTime_createKey = tick(); holding_createKey = true; keyButton_createKey.BackgroundTransparency = 0.3
            task.spawn(function()
                while holding_createKey and keyButton_createKey.Parent do
                    if tick() - pressTime_createKey >= 0.7 then
                        keyCode_createKey = Enum.KeyCode[letter:upper()] or Enum.KeyCode[letter] 
                        if keyCode_createKey then pcall(function() if typeof(keypress)=="function" then keypress(keyCode_createKey.Value) elseif typeof(keytap)=="function" then keytap(keyCode_createKey.Value) elseif typeof(sendkey)=="function" then sendkey(keyCode_createKey.Value) elseif UserInputService then UserInputService:SendKeyEvent(true, keyCode_createKey, false, game) end end) end
                        task.wait(0.1)
                    end
                    task.wait()
                end
                if holding_createKey == false and tick() - pressTime_createKey >= 0.7 then
                     keyCode_createKey_up = Enum.KeyCode[letter:upper()] or Enum.KeyCode[letter] 
                     if keyCode_createKey_up and typeof(keypress)~="function" and typeof(keytap)~="function" and typeof(sendkey)~="function" and UserInputService then pcall(UserInputService.SendKeyEvent, UserInputService, false, keyCode_createKey_up, false, game) end
                end
            end)
        end)
        keyButton_createKey.MouseButton1Up:Connect(function()
            wasHoldingLong_createKey = (tick() - pressTime_createKey >= 0.7) 
            holding_createKey = false; keyButton_createKey.BackgroundTransparency = 0
            if not wasHoldingLong_createKey then
                 ShowNotification("notif_key_pressed", letter)
                keyCode_createKey_click = Enum.KeyCode[letter:upper()] or Enum.KeyCode[letter] 
                if keyCode_createKey_click then
                    success_createKey_click, err_createKey_click = pcall(function() if typeof(keypress)=="function" then keypress(keyCode_createKey_click.Value) elseif typeof(keytap)=="function" then keytap(keyCode_createKey_click.Value) elseif typeof(sendkey)=="function" then sendkey(keyCode_createKey_click.Value) elseif UserInputService then UserInputService:SendKeyEvent(true, keyCode_createKey_click, false, game); task.wait(0.05); UserInputService:SendKeyEvent(false, keyCode_createKey_click, false, game) else ShowNotification("notif_no_key_method") end end) 
                    if not success_createKey_click then ShowNotification("notif_key_error", tostring(err_createKey_click)); warn("Error pressing key ".. letter .. ": " .. tostring(err_createKey_click)) end
                else ShowNotification("notif_key_invalid", letter) end
            end
        end)
        addHoverEffect(keyButton_createKey)
        return keyButton_createKey
    end

    updateKeyboard_CreerClavier = function() 
        for _, button in pairs(keyButtons) do button:Destroy() end; keyButtons = {} 
        children_updateKeyboard = KeyboardFrame_Creer:GetChildren(); for i = #children_updateKeyboard, 1, -1 do child_updateKeyboard = children_updateKeyboard[i]; if child_updateKeyboard:IsA("TextButton") and child_updateKeyboard ~= SwitchButton_CreerClavier then child_updateKeyboard:Destroy() elseif child_updateKeyboard:IsA("UICorner") or child_updateKeyboard:IsA("UIGradient") or child_updateKeyboard.Name == "KeyboardNeon" then else end end 
        keyW_updateKeyboard, keyH_updateKeyboard, hSp_updateKeyboard, vSp_updateKeyboard, stX_updateKeyboard, stY_updateKeyboard = 0.065, 0.18, 0.01, 0.03, 0.02, 0.05 
        for r, rowKeys in ipairs(currentLayout) do cX_updateKeyboard = stX_updateKeyboard; for c, letter in ipairs(rowKeys) do sW_updateKeyboard=keyW_updateKeyboard; if letter=="Backspace" or letter=="Return" then sW_updateKeyboard=0.15 elseif letter=="Tab" then sW_updateKeyboard=0.1 elseif letter=="CapsLock" then sW_updateKeyboard=0.12 elseif letter=="Shift" then sW_updateKeyboard=0.17 elseif letter=="Space" then sW_updateKeyboard=0.4 elseif letter=="Ctrl" or letter=="Alt" or letter=="AltGr" then sW_updateKeyboard=0.08 end; key_updateKeyboard=createKey_CreerClavier(letter,cX_updateKeyboard,stY_updateKeyboard+(r-1)*(keyH_updateKeyboard+vSp_updateKeyboard),sW_updateKeyboard,keyH_updateKeyboard); keyButtons[#keyButtons+1]=key_updateKeyboard; cX_updateKeyboard=cX_updateKeyboard+sW_updateKeyboard+hSp_updateKeyboard end end 
    end

    SwitchButton_CreerClavier.MouseButton1Click:Connect(function() if currentLayout==qwertyLayout_CreerClavier then currentLayout=azertyLayout_CreerClavier;SwitchButton_CreerClavier.Text="QWERTY" else currentLayout=qwertyLayout_CreerClavier;SwitchButton_CreerClavier.Text="AZERTY" end; updateKeyboard_CreerClavier(); ShowNotification("notif_layout_switched", (currentLayout==qwertyLayout_CreerClavier and "QWERTY" or "AZERTY")) end)
    addHoverEffect(SwitchButton_CreerClavier); updateKeyboard_CreerClavier()

    pageInstances.Keyboard = KeyboardPage_Creer; return KeyboardPage_Creer
end

CreerPageSettings = function() 
    C3_fromRGB_local_CreerSettings = cached_Color3_fromRGB 
    if typeof(C3_fromRGB_local_CreerSettings) ~= "function" then warn("CreerPageSettings: C3_fromRGB_local_CreerSettings is nil!"); return nil end

    SettingsPage_Creer = Instance.new("Frame"); SettingsPage_Creer.Name = "SettingsPage"; SettingsPage_Creer.Size = UDim2.new(1, 0, 1, 0); SettingsPage_Creer.BackgroundTransparency = 1; SettingsPage_Creer.Visible = false; SettingsPage_Creer.Parent = ContentFrame 
    SettingsTitle_Creer = Instance.new("TextLabel"); SettingsTitle_Creer.Name="SettingsTitle"; SettingsTitle_Creer.Size = UDim2.new(1, 0, 0, 40); SettingsTitle_Creer.Position = UDim2.new(0, 0, 0, 0); SettingsTitle_Creer.BackgroundTransparency = 1; SettingsTitle_Creer.Font = Enum.Font.GothamBlack; SettingsTitle_Creer.TextColor3 = C3_fromRGB_local_CreerSettings(0, 220, 255); SettingsTitle_Creer.TextSize = 20; 
    SettingsTitle_Creer.Text = getText("tab_settings") .. " "; 
    SettingsTitle_Creer.Parent = SettingsPage_Creer
    SettingsScroll_Creer = Instance.new("ScrollingFrame"); SettingsScroll_Creer.Name = "SettingsScroll"; SettingsScroll_Creer.Size = UDim2.new(1, -10, 1, -50); SettingsScroll_Creer.Position = UDim2.new(0, 5, 0, 45); SettingsScroll_Creer.BackgroundTransparency = 1; SettingsScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, 0); SettingsScroll_Creer.ScrollBarThickness = 6; SettingsScroll_Creer.Parent = SettingsPage_Creer 
    SettingsListLayout_Creer = Instance.new("UIListLayout"); SettingsListLayout_Creer.Parent = SettingsScroll_Creer; SettingsListLayout_Creer.SortOrder = Enum.SortOrder.LayoutOrder; SettingsListLayout_Creer.Padding = UDim.new(0, 10) 

    ThemeSection_CreerSettings = createSection(SettingsScroll_Creer, "ThemeSection", "section_themes", 220, 1, "") 
    themeGrid_CreerSettings = Instance.new("UIGridLayout"); themeGrid_CreerSettings.CellSize=UDim2.new(0,110,0,30); themeGrid_CreerSettings.CellPadding=UDim2.new(0,5,0,8); themeGrid_CreerSettings.StartCorner=Enum.StartCorner.TopLeft; themeGrid_CreerSettings.HorizontalAlignment=Enum.HorizontalAlignment.Center; themeGrid_CreerSettings.VerticalAlignment=Enum.VerticalAlignment.Top; themeGrid_CreerSettings.SortOrder=Enum.SortOrder.LayoutOrder; themeGrid_CreerSettings.Parent=ThemeSection_CreerSettings 
    RedButton_CreerSettings = createButton(ThemeSection_CreerSettings, "ThemeButtonRed", "button_red", 1, nil, ""); 
    BlueButton_CreerSettings = createButton(ThemeSection_CreerSettings, "ThemeButtonBlue", "button_blue", 2, nil, ""); 
    GreenButton_CreerSettings = createButton(ThemeSection_CreerSettings, "ThemeButtonGreen", "button_green", 3, nil, ""); 
    PurpleButton_CreerSettings = createButton(ThemeSection_CreerSettings, "ThemeButtonPurple", "button_purple", 4, nil, ""); 
    BlackButton_CreerSettings = createButton(ThemeSection_CreerSettings, "ThemeButtonBlack", "button_black", 5, nil, ""); 
    PrimeButton_CreerSettings = createButton(ThemeSection_CreerSettings, "ThemeButtonPrime", "button_prime", 6, nil, ""); 
    CyberButton_CreerSettings = createButton(ThemeSection_CreerSettings, "ThemeButtonCyber", "button_cyberpunk", 7, nil, ""); 
    ToxicButton_CreerSettings = createButton(ThemeSection_CreerSettings, "ThemeButtonToxic", "button_toxic", 8, nil, ""); 
    OceanButton_CreerSettings = createButton(ThemeSection_CreerSettings, "ThemeButtonOcean", "button_ocean", 9, nil, ""); 


    AppearanceSection_CreerSettings = createSection(SettingsScroll_Creer, "AppearanceSection", "section_appearance", 320, 2, "") 
    TransparencyContainer_CreerSettings = Instance.new("Frame"); TransparencyContainer_CreerSettings.Size=UDim2.new(1, -10, 0, 35); TransparencyContainer_CreerSettings.BackgroundTransparency=1; TransparencyContainer_CreerSettings.LayoutOrder=1; TransparencyContainer_CreerSettings.Parent=AppearanceSection_CreerSettings; TransparencyContainer_CreerSettings.Position = UDim2.new(0,5,0,30) 
    TransparencyLabel_CreerSettings = Instance.new("TextLabel"); TransparencyLabel_CreerSettings.Name="TransparencyLabel"; TransparencyLabel_CreerSettings.Size=UDim2.new(0,100,1,0); TransparencyLabel_CreerSettings.Position=UDim2.new(0,10,0,0); TransparencyLabel_CreerSettings.BackgroundTransparency=1; TransparencyLabel_CreerSettings.Text=getText("label_transparency"); TransparencyLabel_CreerSettings.TextColor3=currentTextColor; TransparencyLabel_CreerSettings.Font=Enum.Font.GothamBlack; TransparencyLabel_CreerSettings.TextSize=16; TransparencyLabel_CreerSettings.TextXAlignment=Enum.TextXAlignment.Left; TransparencyLabel_CreerSettings.Parent=TransparencyContainer_CreerSettings 
    TransparencySlider_CreerSettings = Instance.new("Frame"); TransparencySlider_CreerSettings.Name = "Slider_Transparency"; TransparencySlider_CreerSettings.Size=UDim2.new(0,100,0,25); TransparencySlider_CreerSettings.Position=UDim2.new(0,115,0,5); TransparencySlider_CreerSettings.BackgroundColor3=currentSliderBgColor; TransparencySlider_CreerSettings.Active=true; TransparencySlider_CreerSettings.Parent=TransparencyContainer_CreerSettings; Instance.new("UICorner",TransparencySlider_CreerSettings).CornerRadius=UDim.new(0,10) 
    TransparencyBar_CreerSettings = Instance.new("Frame"); TransparencyBar_CreerSettings.Name = "Bar"; TransparencyBar_CreerSettings.Size=UDim2.new(MainFrame.BackgroundTransparency,0,1,0); TransparencyBar_CreerSettings.BackgroundColor3=currentButtonColor; TransparencyBar_CreerSettings.Parent=TransparencySlider_CreerSettings; Instance.new("UICorner",TransparencyBar_CreerSettings).CornerRadius=UDim.new(0,10) 

    _, NeonToggleButtonRef_CreerSettings = createToggle(AppearanceSection_CreerSettings, "NeonToggleButton", "label_neon", 2, nil, isNeonActive, "", "") 
    NeonToggleButton = NeonToggleButtonRef_CreerSettings 

    _, ShowEmojisButtonRef_CreerSettings = createToggle(AppearanceSection_CreerSettings, "ShowEmojisButton", "label_showemojis", 3, toggleShowTextEmojis_Original, guiShowTextEmojis, "", "") 
    ShowEmojisButton = ShowEmojisButtonRef_CreerSettings 

    _, TranslateButtonRef_CreerSettings = createToggle(AppearanceSection_CreerSettings, "TranslateButton", "label_translate", 4, toggleTranslate_Original, (currentLanguage=="FR"), "", "") 
    TranslateButton = TranslateButtonRef_CreerSettings 
    if TranslateButton then TranslateButton.Text = getText("label_translate", nil, (currentLanguage == "EN" and "" or "")) end

    bottomButtonContainer_CreerSettings = Instance.new("Frame"); bottomButtonContainer_CreerSettings.Size = UDim2.new(1, -10, 0, 75); bottomButtonContainer_CreerSettings.BackgroundTransparency = 1; bottomButtonContainer_CreerSettings.LayoutOrder = 5; bottomButtonContainer_CreerSettings.Parent = AppearanceSection_CreerSettings; bottomButtonContainer_CreerSettings.Position = UDim2.new(0,5,0,30+(4*35)+5) 
    bottomGrid_CreerSettings = Instance.new("UIGridLayout"); bottomGrid_CreerSettings.CellSize=UDim2.new(0,110,0,30); bottomGrid_CreerSettings.CellPadding=UDim2.new(0,5,0,8); bottomGrid_CreerSettings.StartCorner=Enum.StartCorner.TopLeft; bottomGrid_CreerSettings.HorizontalAlignment=Enum.HorizontalAlignment.Center; bottomGrid_CreerSettings.VerticalAlignment=Enum.VerticalAlignment.Top; bottomGrid_CreerSettings.SortOrder=Enum.SortOrder.LayoutOrder; bottomGrid_CreerSettings.Parent=bottomButtonContainer_CreerSettings 
    CenterGUIButton_CreerSettings = createButton(bottomButtonContainer_CreerSettings, "CenterGUIButton", "button_centergui", 1, CenterGUI, ""); CenterGUIButton_CreerSettings.Name = "CenterGUIButton"; 
    DestroyButton_CreerSettings = createButton(bottomButtonContainer_CreerSettings, "DestroyGUIButton", "button_destroygui", 2, DestroyGUI_Original, ""); DestroyButton_CreerSettings.Name = "DestroyGUIButton"; 
    destroyColor_CreerSettings = Color3.fromRGB(255, 60, 60); DestroyButton_CreerSettings.BackgroundColor3 = destroyColor_CreerSettings; addHoverEffect(DestroyButton_CreerSettings); 
    PanicButton_CreerSettings = createButton(bottomButtonContainer_CreerSettings, "PanicButton", "button_panic", 3, PanicMode_Original, ""); PanicButton_CreerSettings.Name = "PanicButton" 
    PanicButton_CreerSettings.BackgroundColor3 = Color3.fromRGB(255, 0, 0); addHoverEffect(PanicButton_CreerSettings); 

    ConfigSection_CreerSettings = createSection(SettingsScroll_Creer, "ConfigSection", "section_config", 200, 3, "") 
    configGrid_CreerSettings = Instance.new("UIGridLayout"); configGrid_CreerSettings.CellSize=UDim2.new(0,110,0,30); configGrid_CreerSettings.CellPadding=UDim2.new(0,5,0,8); configGrid_CreerSettings.StartCorner=Enum.StartCorner.TopLeft; configGrid_CreerSettings.HorizontalAlignment=Enum.HorizontalAlignment.Center; configGrid_CreerSettings.VerticalAlignment=Enum.VerticalAlignment.Top; configGrid_CreerSettings.SortOrder=Enum.SortOrder.LayoutOrder; configGrid_CreerSettings.Parent=ConfigSection_CreerSettings 
    SaveConfigButton_CreerSettings = createButton(ConfigSection_CreerSettings, "SaveConfigButton", "button_saveclip", 1, SaveConfig_Original, ""); SaveConfigButton_CreerSettings.Name = "SaveConfigButton" 
    LoadConfigButton_CreerSettings = createButton(ConfigSection_CreerSettings, "LoadConfigButton", "button_loadclip", 2, LoadConfig_Original, ""); LoadConfigButton_CreerSettings.Name = "LoadConfigButton" 
    SaveConfigToFileButton_CreerSettings = createButton(ConfigSection_CreerSettings, "SaveConfigToFileButton", "button_savefile", 3, SaveConfigToFile_Original, ""); SaveConfigToFileButton_CreerSettings.Name = "SaveConfigToFileButton" 
    LoadConfigFromFileButton_CreerSettings = createButton(ConfigSection_CreerSettings, "LoadConfigFromFileButton", "button_loadfile", 4, LoadConfigFromFile_Original, ""); LoadConfigFromFileButton_CreerSettings.Name = "LoadConfigFromFileButton" 
    _, ResetOnDeathBtnRef_CreerSettings = createToggle(ConfigSection_CreerSettings, "ResetOnDeathButton", "label_resetondeath", 5, toggleResetCheatsOnDeath, resetCheatsOnDeathEnabled, "", "") 
    ResetOnDeathButton = ResetOnDeathBtnRef_CreerSettings 

    if typeof(THEME_C3_RedBtn) == "Color3" then 
        RedButton_CreerSettings.MouseButton1Click:Connect(function() applyColorTheme(THEME_C3_Red, THEME_C3_RedMid, THEME_C3_RedEnd, THEME_C3_RedBtn, THEME_C3_RedNeon, THEME_C3_RedText, THEME_C3_RedSlider, THEME_C3_RedPlaceholder); ShowNotification("notif_theme_applied", getText("button_red")) end)
        BlueButton_CreerSettings.MouseButton1Click:Connect(function() applyColorTheme(THEME_C3_Blue, THEME_C3_BlueMid, THEME_C3_BlueEnd, THEME_C3_BlueBtn, THEME_C3_BlueNeon, THEME_C3_BlueText, THEME_C3_BlueSlider, THEME_C3_BluePlaceholder); ShowNotification("notif_theme_applied", getText("button_blue")) end)
        GreenButton_CreerSettings.MouseButton1Click:Connect(function() applyColorTheme(THEME_C3_Green, THEME_C3_GreenMid, THEME_C3_GreenEnd, THEME_C3_GreenBtn, THEME_C3_GreenNeon, THEME_C3_GreenText, THEME_C3_GreenSlider, THEME_C3_GreenPlaceholder); ShowNotification("notif_theme_applied", getText("button_green")) end)
        PurpleButton_CreerSettings.MouseButton1Click:Connect(function() applyColorTheme(THEME_C3_Purple, THEME_C3_PurpleMid, THEME_C3_PurpleEnd, THEME_C3_PurpleBtn, THEME_C3_PurpleNeon, THEME_C3_PurpleText, THEME_C3_PurpleSlider, THEME_C3_PurplePlaceholder); ShowNotification("notif_theme_applied", getText("button_purple")) end)
        BlackButton_CreerSettings.MouseButton1Click:Connect(function() applyColorTheme(THEME_C3_Black, THEME_C3_BlackMid, THEME_C3_BlackEnd, THEME_C3_BlackBtn, THEME_C3_BlackNeon, THEME_C3_BlackText, THEME_C3_BlackSlider, THEME_C3_BlackPlaceholder); ShowNotification("notif_theme_applied", getText("button_black")) end)
        PrimeButton_CreerSettings.MouseButton1Click:Connect(function() applyColorTheme(THEME_C3_PrimeStart, THEME_C3_PrimeMid, THEME_C3_PrimeEnd, THEME_C3_PrimeBtn, THEME_C3_PrimeNeon, THEME_C3_PrimeText, THEME_C3_PrimeSlider, THEME_C3_PrimePlaceholder); ShowNotification("notif_theme_applied", getText("button_prime")) end)
        CyberButton_CreerSettings.MouseButton1Click:Connect(function() applyColorTheme(THEME_C3_CyberStart, THEME_C3_CyberMid, THEME_C3_CyberEnd, THEME_C3_CyberBtn, THEME_C3_CyberNeon, THEME_C3_CyberText, THEME_C3_CyberSlider, THEME_C3_CyberPlaceholder); ShowNotification("notif_theme_applied", getText("button_cyberpunk")) end)
        ToxicButton_CreerSettings.MouseButton1Click:Connect(function() applyColorTheme(THEME_C3_ToxicStart, THEME_C3_ToxicMid, THEME_C3_ToxicEnd, THEME_C3_ToxicBtn, THEME_C3_ToxicNeon, THEME_C3_ToxicText, THEME_C3_ToxicSlider, THEME_C3_ToxicPlaceholder); ShowNotification("notif_theme_applied", getText("button_toxic")) end)
        OceanButton_CreerSettings.MouseButton1Click:Connect(function() applyColorTheme(THEME_C3_OceanStart, THEME_C3_OceanMid, THEME_C3_OceanEnd, THEME_C3_OceanBtn, THEME_C3_OceanNeon, THEME_C3_OceanText, THEME_C3_OceanSlider, THEME_C3_OceanPlaceholder); ShowNotification("notif_theme_applied", getText("button_ocean")) end)
    else
        warn("Theme button connections skipped: Global theme colors not defined.")
    end

    createSliderLogic(TransparencySlider_CreerSettings, TransparencyBar_CreerSettings, nil, 1, function(value) MainFrame.BackgroundTransparency = value; Gradient.Transparency = NumberSequence.new(value); TabBar.BackgroundTransparency = value*0.5; if NeonBorder then NeonBorder.BackgroundTransparency = 0.6+(value*0.4) end; ShowNotification("notif_value_set", string.format("%.2f", value)) end, TransparencyContainer_CreerSettings, MainFrame.BackgroundTransparency, 0)

    NeonToggleButton.MouseButton1Click:Connect(function()
        isNeonActive = not isNeonActive
        NeonToggleButton.Text = getText("label_neon", isNeonActive, "", "") 
        t_NeonToggle = 0.6 + (MainFrame.BackgroundTransparency * 0.4) 
        gT_NeonToggle = 0.8 
        if NeonBorder then NeonBorder.Visible = isNeonActive end
        sN_NeonToggle = SelectionFrame and SelectionFrame:FindFirstChild("SelNeon") 
        if sN_NeonToggle then sN_NeonToggle.Visible = isNeonActive end
        kbdFrame_NeonToggle = pageInstances.Keyboard and pageInstances.Keyboard:FindFirstChild("KeyboardFrame", true) 
        kN_NeonToggle = kbdFrame_NeonToggle and kbdFrame_NeonToggle:FindFirstChild("KeyboardNeon") 
        if kN_NeonToggle then kN_NeonToggle.Visible = isNeonActive end
        welcomeFrame_NeonToggle = pageInstances.Home and pageInstances.Home:FindFirstChild("WelcomeFrame", true) 
        wGlow_NeonToggle = welcomeFrame_NeonToggle and welcomeFrame_NeonToggle:FindFirstChild("WelcomeGlow") 
        if wGlow_NeonToggle then wGlow_NeonToggle.Visible = isNeonActive end

        pcall(function() if NeonBorder then TweenService:Create(NeonBorder, tweenGlow, {}):Cancel() end end)
        pcall(function() if sN_NeonToggle then TweenService:Create(sN_NeonToggle, tweenGlow, {}):Cancel() end end)
        pcall(function() if kN_NeonToggle then TweenService:Create(kN_NeonToggle, tweenGlow, {}):Cancel() end end)
        pcall(function() if wGlow_NeonToggle then TweenService:Create(wGlow_NeonToggle, tweenGlow, {}):Cancel() end end)

        if isNeonActive then
            if NeonBorder then
                neonTween_NeonToggle = TweenService:Create(NeonBorder, tweenGlow, { BackgroundTransparency = gT_NeonToggle }) 
                if neonTween_NeonToggle then neonTween_NeonToggle:Play() else warn("Failed to create NeonBorder tween") end
            end
            if sN_NeonToggle then
                selNeonTween_NeonToggle = TweenService:Create(sN_NeonToggle, tweenGlow, { BackgroundTransparency = 0.8 }) 
                if selNeonTween_NeonToggle then selNeonTween_NeonToggle:Play() else warn("Failed to create SelNeon_NeonToggle tween") end
            end
            if kN_NeonToggle then
                kbdNeonTween_NeonToggle = TweenService:Create(kN_NeonToggle, tweenGlow, { BackgroundTransparency = 0.8 }) 
                if kbdNeonTween_NeonToggle then kbdNeonTween_NeonToggle:Play() else warn("Failed to create KeyboardNeon_NeonToggle tween") end
            end
             if wGlow_NeonToggle then
                welcomeGlowTween_NeonToggle = TweenService:Create(wGlow_NeonToggle, tweenGlow, { BackgroundTransparency = 0.8 }) 
                if welcomeGlowTween_NeonToggle then welcomeGlowTween_NeonToggle:Play() else warn("Failed to create WelcomeGlow_NeonToggle tween") end
            end
        else
            if NeonBorder then NeonBorder.BackgroundTransparency = t_NeonToggle end
            if sN_NeonToggle then sN_NeonToggle.BackgroundTransparency = 0.6 end
            if kN_NeonToggle then kN_NeonToggle.BackgroundTransparency = 0.6 end
            if wGlow_NeonToggle then wGlow_NeonToggle.BackgroundTransparency = 0.6 end
        end
        ShowNotification("notif_feature_state", getText("label_neon"), getText(isNeonActive and "state_on" or "state_off"))
    end)

    addHoverEffect(RedButton_CreerSettings); addHoverEffect(BlueButton_CreerSettings); addHoverEffect(GreenButton_CreerSettings); addHoverEffect(PurpleButton_CreerSettings); addHoverEffect(BlackButton_CreerSettings); addHoverEffect(PrimeButton_CreerSettings); addHoverEffect(CyberButton_CreerSettings); addHoverEffect(ToxicButton_CreerSettings); addHoverEffect(OceanButton_CreerSettings); addHoverEffect(NeonToggleButton); addHoverEffect(SaveConfigButton_CreerSettings); addHoverEffect(LoadConfigButton_CreerSettings); addHoverEffect(ResetOnDeathButton); addHoverEffect(SaveConfigToFileButton_CreerSettings); addHoverEffect(LoadConfigFromFileButton_CreerSettings); addHoverEffect(CenterGUIButton_CreerSettings); addHoverEffect(ShowEmojisButton); addHoverEffect(TranslateButton); addHoverEffect(DestroyButton_CreerSettings); addHoverEffect(PanicButton_CreerSettings) 
    SettingsListLayout_Creer:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function() SettingsScroll_Creer.CanvasSize = UDim2.new(0,0,0,SettingsListLayout_Creer.AbsoluteContentSize.Y+10) end)
    task.wait(0.1)
    SettingsScroll_Creer.CanvasSize = UDim2.new(0,0,0,SettingsListLayout_Creer.AbsoluteContentSize.Y+10)

    pageInstances.Settings = SettingsPage_Creer; return SettingsPage_Creer
end

CreerPageFlingTools = function() 
    C3_fromRGB_local_CreerFling = cached_Color3_fromRGB 
    C3_new_local_CreerFling = cached_Color3_new 
    if typeof(C3_fromRGB_local_CreerFling) ~= "function" then warn("CreerPageFlingTools: C3_fromRGB_local_CreerFling is nil!"); return nil end

    FlingToolsPage_Creer = Instance.new("Frame") 
    FlingToolsPage_Creer.Name = "FlingToolsPage"; FlingToolsPage_Creer.Size = UDim2.new(1, 0, 1, 0); FlingToolsPage_Creer.BackgroundTransparency = 1; FlingToolsPage_Creer.Visible = false; FlingToolsPage_Creer.Parent = ContentFrame
    FlingToolsTitle_Creer = Instance.new("TextLabel"); FlingToolsTitle_Creer.Name="FlingToolsTitle"; FlingToolsTitle_Creer.Size = UDim2.new(1, 0, 0, 40); FlingToolsTitle_Creer.Position = UDim2.new(0, 0, 0, 0); FlingToolsTitle_Creer.BackgroundTransparency = 1; FlingToolsTitle_Creer.Font = Enum.Font.GothamBlack; FlingToolsTitle_Creer.TextColor3 = C3_fromRGB_local_CreerFling(0, 220, 255); FlingToolsTitle_Creer.TextSize = 20; 
    FlingToolsTitle_Creer.Text = getText("tab_flingtools") .. " "; 
    FlingToolsTitle_Creer.Parent = FlingToolsPage_Creer

    FlingScroll_Creer = Instance.new("ScrollingFrame") 
    FlingScroll_Creer.Name = "FlingScroll"; FlingScroll_Creer.Size = UDim2.new(1, -10, 1, -50); FlingScroll_Creer.Position = UDim2.new(0, 5, 0, 45); FlingScroll_Creer.BackgroundTransparency = 1; FlingScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, 0); FlingScroll_Creer.ScrollBarThickness = 6; FlingScroll_Creer.Parent = FlingToolsPage_Creer

    FlingListLayout_Creer = Instance.new("UIListLayout") 
    FlingListLayout_Creer.Parent = FlingScroll_Creer; FlingListLayout_Creer.SortOrder = Enum.SortOrder.LayoutOrder; FlingListLayout_Creer.Padding = UDim.new(0, 8)

    PlayerTargetSection_CreerFling = createSection(FlingScroll_Creer, "PlayerTargetSection", "section_target_player", 280, 1, "") 
    FlingToolsPlayerInputBox = Instance.new("TextBox") 
    FlingToolsPlayerInputBox.Name = "FlingTools_PlayerInput"; FlingToolsPlayerInputBox.Size = UDim2.new(1, -10, 0, 25); FlingToolsPlayerInputBox.Position = UDim2.new(0, 5, 0, 25); FlingToolsPlayerInputBox.BackgroundColor3 = currentSliderBgColor; FlingToolsPlayerInputBox.TextColor3 = currentTextColor;
    FlingToolsPlayerInputBox.PlaceholderText = getText("label_target_placeholder");
    FlingToolsPlayerInputBox.PlaceholderColor3 = currentPlaceholderColor; FlingToolsPlayerInputBox.Font = Enum.Font.GothamBlack;
    FlingToolsPlayerInputBox.TextSize = 14; FlingToolsPlayerInputBox.ClearTextOnFocus = false; FlingToolsPlayerInputBox.Parent = PlayerTargetSection_CreerFling; Instance.new("UICorner", FlingToolsPlayerInputBox).CornerRadius = UDim.new(0, 6)
    FlingToolsPlayerInfoLabel = Instance.new("TextLabel") 
    FlingToolsPlayerInfoLabel.Name = "FlingTools_PlayerInfo"; FlingToolsPlayerInfoLabel.Size = UDim2.new(1, -10, 0, 20); FlingToolsPlayerInfoLabel.Position = UDim2.new(0, 5, 0, 55); FlingToolsPlayerInfoLabel.BackgroundTransparency = 1; FlingToolsPlayerInfoLabel.Text = ""; FlingToolsPlayerInfoLabel.TextColor3 = C3_fromRGB_local_CreerFling(200, 200, 220);
    FlingToolsPlayerInfoLabel.Font = Enum.Font.GothamBlack;
    FlingToolsPlayerInfoLabel.TextSize = 12; FlingToolsPlayerInfoLabel.TextXAlignment = Enum.TextXAlignment.Left; FlingToolsPlayerInfoLabel.Parent = PlayerTargetSection_CreerFling
    FlingToolsDebugLabel = Instance.new("TextLabel") 
    FlingToolsDebugLabel.Name = "FlingTools_DebugLabel"; FlingToolsDebugLabel.Size = UDim2.new(1, -10, 0, 20); FlingToolsDebugLabel.Position = UDim2.new(0, 5, 0, 78); FlingToolsDebugLabel.BackgroundTransparency = 1;
    FlingToolsDebugLabel.Text = getText("label_target_info");
    FlingToolsDebugLabel.TextColor3 = C3_fromRGB_local_CreerFling(180, 180, 180); FlingToolsDebugLabel.Font = Enum.Font.GothamBlack; FlingToolsDebugLabel.TextSize = 13; FlingToolsDebugLabel.TextXAlignment = Enum.TextXAlignment.Left; FlingToolsDebugLabel.Parent = PlayerTargetSection_CreerFling
    flingPlayerListFrame = Instance.new("ScrollingFrame"); flingPlayerListFrame.Name = "PlayerListFrame"; flingPlayerListFrame.Size = UDim2.new(1, -10, 0, 140); flingPlayerListFrame.Position = UDim2.new(0, 5, 0, 105); flingPlayerListFrame.BackgroundColor3 = currentSliderBgColor; flingPlayerListFrame.BackgroundTransparency = 0.7; flingPlayerListFrame.CanvasSize = UDim2.new(0, 0, 0, 0); flingPlayerListFrame.ScrollBarThickness = 4; flingPlayerListFrame.Parent = PlayerTargetSection_CreerFling; Instance.new("UICorner", flingPlayerListFrame).CornerRadius = UDim.new(0,6) 
    FlingPlayerListLayout_CreerFling = Instance.new("UIListLayout"); FlingPlayerListLayout_CreerFling.Parent = flingPlayerListFrame; FlingPlayerListLayout_CreerFling.SortOrder = Enum.SortOrder.LayoutOrder; FlingPlayerListLayout_CreerFling.Padding = UDim.new(0, 3) 


    ActionSection1_CreerFling = createSection(FlingScroll_Creer, "ActionSection1", "section_tp_fling", 210, 2, "") 
    buttonLayout1_CreerFling = Instance.new("UIGridLayout"); buttonLayout1_CreerFling.CellSize = UDim2.new(0, 110, 0, 30); buttonLayout1_CreerFling.CellPadding = UDim2.new(0, 5, 0, 8); buttonLayout1_CreerFling.StartCorner = Enum.StartCorner.TopLeft; buttonLayout1_CreerFling.HorizontalAlignment = Enum.HorizontalAlignment.Center; buttonLayout1_CreerFling.VerticalAlignment = Enum.VerticalAlignment.Top; buttonLayout1_CreerFling.SortOrder = Enum.SortOrder.LayoutOrder; buttonLayout1_CreerFling.Parent = ActionSection1_CreerFling 

    FlingToolsBringButton = createButton(ActionSection1_CreerFling, "FlingTools_BringButton", "button_bring", 1, nil); FlingToolsOtherButtons["Bring"] = FlingToolsBringButton 
    BringAllButton_CreerFling = createButton(ActionSection1_CreerFling, "FlingTools_BringAllButton", "button_bringall", 2, BringAll_Original, ""); FlingToolsOtherButtons["BringAll"] = BringAllButton_CreerFling 
    TeleportButton_CreerFling = createButton(ActionSection1_CreerFling, "FlingTools_TeleportButton", "button_teleport", 3, nil, ""); FlingToolsOtherButtons["Teleport"] = TeleportButton_CreerFling 
    FlingButton_CreerFling = createButton(ActionSection1_CreerFling, "FlingTools_FlingButton", "button_fling", 4, nil, ""); FlingToolsOtherButtons["Fling"] = FlingButton_CreerFling 
    FlingAllButton_CreerFling = createButton(ActionSection1_CreerFling, "FlingTools_FlingAllButton", "button_flingall", 5, nil, ""); FlingToolsOtherButtons["FlingAll"] = FlingAllButton_CreerFling 
    SpamTpButton_CreerFling = createButton(ActionSection1_CreerFling, "FlingTools_SpamTpButton", "button_spamtp", 6, toggleSpamTp_Original, "", "", isToggleActive); FlingToolsOtherButtons["SpamTP"] = SpamTpButton_CreerFling 
    TpAllButton_CreerFling = createButton(ActionSection1_CreerFling, "FlingTools_TpAllButton", "button_tpall", 7, toggleTeleportAll_Original, "", "", teleportAllEnabled); FlingToolsOtherButtons["TpAll"] = TpAllButton_CreerFling 
    TpToMouseButton_CreerFling = createButton(ActionSection1_CreerFling, "FlingTools_TpToMouseButton", "button_tpmouse", 8, toggleTpToMouse_Original, "", "", tpToMouseEnabled); FlingToolsOtherButtons["TPToMouse"] = TpToMouseButton_CreerFling 

    ActionSectionPlayer_CreerFling = createSection(FlingScroll_Creer, "ActionSectionPlayer", "section_player_actions", 210, 3, "") 
    buttonLayoutPlayer_CreerFling = Instance.new("UIGridLayout"); buttonLayoutPlayer_CreerFling.CellSize = UDim2.new(0, 110, 0, 30); buttonLayoutPlayer_CreerFling.CellPadding = UDim2.new(0, 5, 0, 8); buttonLayoutPlayer_CreerFling.StartCorner = Enum.StartCorner.TopLeft; buttonLayoutPlayer_CreerFling.HorizontalAlignment = Enum.HorizontalAlignment.Center; buttonLayoutPlayer_CreerFling.VerticalAlignment = Enum.VerticalAlignment.Top; buttonLayoutPlayer_CreerFling.SortOrder = Enum.SortOrder.LayoutOrder; buttonLayoutPlayer_CreerFling.Parent = ActionSectionPlayer_CreerFling 

    OrbitButton_CreerFling = createButton(ActionSectionPlayer_CreerFling, "FlingTools_OrbitButton", "button_orbit", 1, toggleOrbit_Original, "", "", orbitEnabled); FlingToolsOtherButtons["Orbit"] = OrbitButton_CreerFling 
    AttachButton_CreerFling = createButton(ActionSectionPlayer_CreerFling, "FlingTools_AttachButton", "button_attach", 2, toggleAttach_Original, "", "", attachEnabled); FlingToolsOtherButtons["Attach"] = AttachButton_CreerFling 
    TripButton_CreerFling = createButton(ActionSectionPlayer_CreerFling, "FlingTools_TripButton", "button_tripplayer", 3, TripPlayer_Original, ""); FlingToolsOtherButtons["Trip"] = TripButton_CreerFling 
    SitButton_CreerFling = createButton(ActionSectionPlayer_CreerFling, "FlingTools_SitButton", "button_sitplayer", 4, SitPlayer_Original, ""); FlingToolsOtherButtons["Sit"] = SitButton_CreerFling 
    AnnoyButton_CreerFling = createButton(ActionSectionPlayer_CreerFling, "FlingTools_AnnoyButton", "button_annoyplayer", 5, AnnoyPlayer_Original, ""); FlingToolsOtherButtons["Annoy"] = AnnoyButton_CreerFling 
    HeadSitButton_CreerFling = createButton(ActionSectionPlayer_CreerFling, "FlingTools_HeadSitButton", "button_headsit", 6, HeadSit_Original, ""); FlingToolsOtherButtons["HeadSit"] = HeadSitButton_CreerFling 
    TPBehindButton_CreerFling = createButton(ActionSectionPlayer_CreerFling, "TPBehindButton", "button_tpbehind", 7, TeleportBehindTarget_Original, "") 

    ActionSection2_CreerFling = createSection(FlingScroll_Creer, "ActionSection2", "section_combat_visuals", 170, 4, "") 
    buttonLayout2_CreerFling = Instance.new("UIGridLayout"); buttonLayout2_CreerFling.CellSize = UDim2.new(0, 110, 0, 30); buttonLayout2_CreerFling.CellPadding = UDim2.new(0, 5, 0, 8); buttonLayout2_CreerFling.StartCorner = Enum.StartCorner.TopLeft; buttonLayout2_CreerFling.HorizontalAlignment = Enum.HorizontalAlignment.Center; buttonLayout2_CreerFling.VerticalAlignment = Enum.VerticalAlignment.Top; buttonLayout2_CreerFling.SortOrder = Enum.SortOrder.LayoutOrder; buttonLayout2_CreerFling.Parent = ActionSection2_CreerFling 

    LaserGunButton_CreerFling = createButton(ActionSection2_CreerFling, "FlingTools_LaserGunButton", "button_lasergun", 1, createLaserGun_Original, ""); FlingToolsOtherButtons["LaserGun"] = LaserGunButton_CreerFling 
    EspButton_CreerFling = createButton(ActionSection2_CreerFling, "FlingTools_EspButton", "button_esp", 2, toggleESP_Original, "", "", espScriptEnabled); FlingToolsOtherButtons["ESP"] = EspButton_CreerFling 
    TrackButton_CreerFling = createButton(ActionSection2_CreerFling, "FlingTools_TrackButton", "button_track", 3, toggleAimbotTrack_Original, "", "", aimbotActive); FlingToolsOtherButtons["Track"] = TrackButton_CreerFling 
    AimbotCameraButton_CreerFling = createButton(ActionSection2_CreerFling, "FlingTools_AimbotCameraButton", "button_aimbot", 4, toggleAimbotCamera_Original, "", "", aimbotEnabled); FlingToolsOtherButtons["Aimbot"] = AimbotCameraButton_CreerFling 
    SpectateButton_CreerFling = createButton(ActionSection2_CreerFling, "FlingTools_SpectateButton", "button_spectate", 5, toggleSpectate_Original, "", "", isSpectating); FlingToolsOtherButtons["Spectate"] = SpectateButton_CreerFling 

    ActionSection3_CreerFling = createSection(FlingScroll_Creer, "ActionSection3", "section_misc_actions", 250, 5, "") 
    buttonLayout3_CreerFling = Instance.new("UIGridLayout"); buttonLayout3_CreerFling.CellSize = UDim2.new(0, 110, 0, 30); buttonLayout3_CreerFling.CellPadding = UDim2.new(0, 5, 0, 8); buttonLayout3_CreerFling.StartCorner = Enum.StartCorner.TopLeft; buttonLayout3_CreerFling.HorizontalAlignment = Enum.HorizontalAlignment.Center; buttonLayout3_CreerFling.VerticalAlignment = Enum.VerticalAlignment.Top; buttonLayout3_CreerFling.SortOrder = Enum.SortOrder.LayoutOrder; buttonLayout3_CreerFling.Parent = ActionSection3_CreerFling 

    FreezeButton_CreerFling = createButton(ActionSection3_CreerFling, "FlingTools_FreezeButton", "button_freeze", 1, toggleFreeze_Original, "", "", isFrozen); FlingToolsOtherButtons["Freeze"] = FreezeButton_CreerFling 
    PlayerLiftButton_CreerFling = createButton(ActionSection3_CreerFling, "FlingTools_PlayerLiftButton", "button_playerlift", 2, nil, ""); FlingToolsOtherButtons["PlayerLift"] = PlayerLiftButton_CreerFling 
    StopLiftButton_CreerFling = createButton(ActionSection3_CreerFling, "FlingTools_StopLiftButton", "button_stoplift", 3, nil, ""); FlingToolsOtherButtons["StopLift"] = StopLiftButton_CreerFling 
    CarButton_CreerFling = createButton(ActionSection3_CreerFling, "FlingTools_CarButton", "button_car", 4, toggleCarMode_Original, "", "", carToggleActivated); FlingToolsOtherButtons["Car"] = CarButton_CreerFling 
    KillBrickButton_CreerFling = createButton(ActionSection3_CreerFling, "FlingTools_KillBrickButton", "button_killbrick", 5, toggleKillBrick_Original, "", "", not killBrickNega); FlingToolsOtherButtons["KillBrick"] = KillBrickButton_CreerFling 
    NoclipSimpleButton_CreerFling = createButton(ActionSection3_CreerFling, "FlingTools_NoclipSimpleButton", "button_noclip", 6, toggleNoclipSimple_Original, "", "", not noclipClipon); FlingToolsOtherButtons["Noclip"] = NoclipSimpleButton_CreerFling 
    FlingToolsNoclipStatusLabel = Instance.new("TextLabel"); FlingToolsNoclipStatusLabel.Name = "FlingTools_NoclipSimpleStatus"; FlingToolsNoclipStatusLabel.Text = "OFF"; FlingToolsNoclipStatusLabel.TextColor3 = C3_fromRGB_local_CreerFling(170, 0, 0); FlingToolsNoclipStatusLabel.LayoutOrder = 7; FlingToolsNoclipStatusLabel.Parent = ActionSection3_CreerFling; FlingToolsNoclipStatusLabel.TextScaled = false; 
    FlingToolsNoclipStatusLabel.Font = Enum.Font.GothamBlack;
    FlingToolsNoclipStatusLabel.BackgroundTransparency = 1; FlingToolsNoclipStatusLabel.TextSize = 14;
    InvisibleButton_CreerFling = createButton(ActionSection3_CreerFling, "FlingTools_InvisibleButton", "button_invisible", 8, toggleInvisible_Original, "", "", invis_on); FlingToolsOtherButtons["Invisible"] = InvisibleButton_CreerFling 
    ShiftLockButton_CreerFling = createButton(ActionSection3_CreerFling, "FlingTools_ShiftLockButton", "button_shiftlock", 9, toggleShiftLock_Original, "", "", (ShiftLockActive and ShiftLockActive.Connected)); FlingToolsOtherButtons["ShiftLock"] = ShiftLockButton_CreerFling 
    RotateButton_CreerFling = createButton(ActionSection3_CreerFling, "FlingTools_RotateButton", "button_rotate", 10, toggleRotatePlayer_Original, "", "", rotating); FlingToolsOtherButtons["Rotate"] = RotateButton_CreerFling 
    PlatformStandButton_CreerFling_Misc = createButton(ActionSection3_CreerFling, "PlatformStandButton", "button_platformstand", 11, togglePlatformStand_Original, "", "", platformStandEnabled); FlingToolsOtherButtons["PlatformStand"] = PlatformStandButton_CreerFling_Misc 

    FlingToolsNoclipStatusLabel.Size = UDim2.new(0, 110, 0, 30);
    FlingToolsNoclipStatusLabel.BackgroundColor3 = currentButtonColor
    FlingToolsNoclipStatusLabel.TextXAlignment = Enum.TextXAlignment.Center
    FlingToolsNoclipStatusLabel.BackgroundTransparency = 0
    Instance.new("UICorner", FlingToolsNoclipStatusLabel).CornerRadius = UDim.new(0, 10);

    FlingToolsPlayerInputBox:GetPropertyChangedSignal("Text"):Connect(function()
        txt_FlingInput = FlingToolsPlayerInputBox.Text 
        target = findplr(txt_FlingInput) 
        if target then
            if (target.DisplayName) and (target.DisplayName ~= "") and (target.DisplayName ~= target.Name) then
                FlingToolsPlayerInfoLabel.Text = target.DisplayName .. " @" .. target.Name
            else
                FlingToolsPlayerInfoLabel.Text = "@" .. target.Name
            end
             if FlingToolsBringButton and typeof(C3_fromRGB_local_CreerFling) == "function" then FlingToolsBringButton.BackgroundColor3 = C3_fromRGB_local_CreerFling(0, 200, 0); FlingToolsBringButton.TextColor3 = C3_fromRGB_local_CreerFling(255, 255, 255) end
        else
            FlingToolsPlayerInfoLabel.Text = ""
            if FlingToolsBringButton and not bringing then
                 FlingToolsBringButton.BackgroundColor3 = currentButtonColor;
                 FlingToolsBringButton.TextColor3 = currentTextColor
            end
        end

        if #txt_FlingInput > 0 then
            found_FlingInput = false 
            for _, p in ipairs(Players:GetPlayers()) do
                if p ~= player then
                     if not slower then warn("InputBox Text Changed: 'slower' unavailable!"); break end 
                    if slower(p.Name):find(slower(txt_FlingInput), 1, true) or (p.DisplayName and slower(p.DisplayName):find(slower(txt_FlingInput), 1, true)) then
                        FlingToolsDebugLabel.Text = "Display: " .. p.DisplayName .. " | User: " .. p.Name 
                        found_FlingInput = true
                        break
                    end
                end
            end
            if not found_FlingInput then
                FlingToolsDebugLabel.Text = getText("label_target_notfound") 
            end
        else
            FlingToolsDebugLabel.Text = getText("label_target_info") 
        end
    end)

    FlingToolsBringButton.MouseButton1Click:Connect(function()
        if typeof(C3_fromRGB_local_CreerFling) ~= "function" then warn("Bring Button Click: C3_fromRGB_local_CreerFling unavailable!"); return end
        bringTextKey_BringBtn = "button_bring" 
        bringingTextKey_BringBtn = "button_bringing" 
        if bringing then
            bringing=false; FlingToolsBringButton.Text=getText(bringTextKey_BringBtn); FlingToolsBringButton.BackgroundColor3 = target and target.Parent and C3_fromRGB_local_CreerFling(0, 200, 0) or currentButtonColor; FlingToolsBringButton.TextColor3 = currentTextColor; ShowNotification("notif_bring_cancelled"); return end
        if not target then ShowNotification("notif_error_bring_notarget"); return end
        c_BringBtn=lp.Character; c1_BringBtn=target.Character; if not (c_BringBtn and c1_BringBtn) then ShowNotification("notif_error_bring_nochar"); return end 
        if not (c_BringBtn:IsDescendantOf(ws) and c1_BringBtn:IsDescendantOf(ws)) then ShowNotification("notif_error_bring_noworkspace"); return end
        hrp_BringBtn=gp(c_BringBtn,"HumanoidRootPart","BasePart"); hrp1_BringBtn=gp(c1_BringBtn,"HumanoidRootPart","BasePart"); if not (hrp_BringBtn and hrp1_BringBtn) then ShowNotification("notif_error_bring_noroot"); return end 
        bringing=true; FlingToolsBringButton.Text=getText(bringingTextKey_BringBtn); FlingToolsBringButton.BackgroundColor3 = C3_fromRGB_local_CreerFling(255, 150, 0); FlingToolsBringButton.TextColor3 = C3_fromRGB_local_CreerFling(0, 0, 0); ShowNotification("notif_bring_starting", target.Name)
        from_BringBtn=hrp1_BringBtn.CFrame; fromP_BringBtn=from_BringBtn.Position; to_BringBtn=hrp_BringBtn.CFrame; toP_BringBtn=to_BringBtn.Position; mag_BringBtn=(fromP_BringBtn-toP_BringBtn).Magnitude-3; lv_BringBtn=cf(fromP_BringBtn,toP_BringBtn).LookVector; vel_BringBtn=0; pos_BringBtn=from_BringBtn.Position-v3_010*2; toP_BringBtn=toP_BringBtn-v3_010*2; sine_BringBtn=osclock(); lastsine_BringBtn=sine_BringBtn; way_BringBtn=0; reachedmaxspeed_BringBtn=false 
        while bringing and c_BringBtn:IsDescendantOf(ws) and c1_BringBtn:IsDescendantOf(ws) do sine_BringBtn=osclock(); deltaTime_BringBtn=sine_BringBtn-lastsine_BringBtn; lastsine_BringBtn=sine_BringBtn; if reachedmaxspeed_BringBtn then if mag_BringBtn-way_BringBtn<reachedmaxspeed_BringBtn then vel_BringBtn=vel_BringBtn-deltaTime_BringBtn*speeding; if vel_BringBtn<0 then break end end else if way_BringBtn>mag_BringBtn/2 then vel_BringBtn=vel_BringBtn-deltaTime_BringBtn*speeding; if vel_BringBtn<0 then break end else vel_BringBtn=vel_BringBtn+deltaTime_BringBtn*speeding; if vel_BringBtn>maxspeed then reachedmaxspeed_BringBtn=way_BringBtn; vel_BringBtn=maxspeed end end end; way_BringBtn=way_BringBtn+vel_BringBtn*deltaTime_BringBtn; if hrp_BringBtn and hrp_BringBtn.Parent and not hrp_BringBtn:IsGrounded() then hrp_BringBtn.CFrame=cf(pos_BringBtn+lv_BringBtn*way_BringBtn,toP_BringBtn)*off; hrp_BringBtn.Velocity=lv_BringBtn*(vel_BringBtn+1); hrp_BringBtn.RotVelocity=v3_0 end; twait() end
        if c_BringBtn and c_BringBtn:IsDescendantOf(ws) and hrp_BringBtn and hrp_BringBtn:IsDescendantOf(c_BringBtn) then hrp_BringBtn.CFrame=to_BringBtn; hrp_BringBtn.Velocity=v3_0; hrp_BringBtn.RotVelocity=v3_0 end
        bringing=false; FlingToolsBringButton.Text=getText(bringTextKey_BringBtn); FlingToolsBringButton.BackgroundColor3 = target and target.Parent and C3_fromRGB_local_CreerFling(0, 200, 0) or currentButtonColor; FlingToolsBringButton.TextColor3 = currentTextColor; ShowNotification("notif_bring_finished")
    end)

    TeleportButton_CreerFling.MouseButton1Click:Connect(function()
        targetPlayerInstance_TeleportBtn = target; myCharacter_TeleportBtn = player.Character 
        if targetPlayerInstance_TeleportBtn and targetPlayerInstance_TeleportBtn.Character and targetPlayerInstance_TeleportBtn.Character:FindFirstChild("HumanoidRootPart") and myCharacter_TeleportBtn and myCharacter_TeleportBtn:FindFirstChild("HumanoidRootPart") then
            pcall(myCharacter_TeleportBtn.SetPrimaryPartCFrame, myCharacter_TeleportBtn, targetPlayerInstance_TeleportBtn.Character.HumanoidRootPart.CFrame * CFrame.new(0,3,0))
            ShowNotification("notif_teleport_success", targetPlayerInstance_TeleportBtn.Name)
        else ShowNotification("notif_teleport_fail") end
    end)

    FlingButton_CreerFling.MouseButton1Click:Connect(function()
        targetPlayerInstance_FlingBtn = target 
        if targetPlayerInstance_FlingBtn then
             if targetPlayerInstance_FlingBtn.UserId ~= 1414978355 then ShowNotification("notif_fling_attempt", targetPlayerInstance_FlingBtn.Name); SkidFling(targetPlayerInstance_FlingBtn)
             else ShowNotification("notif_fling_error_whitelist") end
        else ShowNotification("notif_fling_error_notarget") end
    end)

    FlingAllButton_CreerFling.MouseButton1Click:Connect(function()
        ShowNotification("notif_fling_all_start"); count_FlingAll = 0; getgenv().AllBool = false; GetPlayer("all"); AllBool_FlingAll = getgenv().AllBool 
        if AllBool_FlingAll then for _, p_target in ipairs(Players:GetPlayers()) do if p_target ~= player then if p_target.UserId ~= 1414978355 then SkidFling(p_target); count_FlingAll = count_FlingAll + 1; task.wait(0.1) end end end end
        getgenv().AllBool = false; ShowNotification("notif_fling_all_finished", count_FlingAll)
    end)

    originalToggleSpamTp_Wrapped = toggleSpamTp_Original; toggleSpamTp_Original = function() originalToggleSpamTp_Wrapped(); btn_SpamTpWrap = FlingToolsOtherButtons["SpamTP"]; if btn_SpamTpWrap then btn_SpamTpWrap.Text = getText("button_spamtp", isToggleActive, "", "") end end
    originalToggleTpAll_Wrapped = toggleTeleportAll_Original; toggleTeleportAll_Original = function() originalToggleTpAll_Wrapped(); btn_TpAllWrap = FlingToolsOtherButtons["TpAll"]; if btn_TpAllWrap then btn_TpAllWrap.Text = getText("button_tpall", teleportAllEnabled, "", "") end end
    originalToggleEsp_Wrapped = toggleESP_Original; toggleESP_Original = function() originalToggleEsp_Wrapped(); btn_EspWrap = FlingToolsOtherButtons["ESP"]; if btn_EspWrap then btn_EspWrap.Text = getText("button_esp", espScriptEnabled, "", "") end end
    originalToggleAimbotTrack_Wrapped = toggleAimbotTrack_Original; toggleAimbotTrack_Original = function() originalToggleAimbotTrack_Wrapped(); btn_TrackWrap = FlingToolsOtherButtons["Track"]; if btn_TrackWrap then btn_TrackWrap.Text = getText("button_track", aimbotActive, "", "") end end
    originalToggleAimbotCam_Wrapped = toggleAimbotCamera_Original; toggleAimbotCamera_Original = function() originalToggleAimbotCam_Wrapped(); btn_AimbotCamWrap = FlingToolsOtherButtons["Aimbot"]; if btn_AimbotCamWrap then btn_AimbotCamWrap.Text = getText("button_aimbot", aimbotEnabled, "", "") end end
    originalToggleSpectate_Wrapped = toggleSpectate_Original; toggleSpectate_Original = function() originalToggleSpectate_Wrapped(); btn_SpectateWrap = FlingToolsOtherButtons["Spectate"]; if btn_SpectateWrap then btn_SpectateWrap.Text = getText("button_spectate", isSpectating, "", "") end end
    originalToggleFreeze_Wrapped = toggleFreeze_Original; toggleFreeze_Original = function() originalToggleFreeze_Wrapped(); btn_FreezeWrap = FlingToolsOtherButtons["Freeze"]; if btn_FreezeWrap then btn_FreezeWrap.Text = getText("button_freeze", isFrozen, "", "") end end
    originalToggleTpToMouse_Wrapped = toggleTpToMouse_Original; toggleTpToMouse_Original = function() originalToggleTpToMouse_Wrapped(); btn_TpMouseWrap = FlingToolsOtherButtons["TPToMouse"]; if btn_TpMouseWrap then btn_TpMouseWrap.Text = getText("button_tpmouse", tpToMouseEnabled, "", "") end end
    originalToggleOrbit_Wrapped = toggleOrbit_Original; toggleOrbit_Original = function() originalToggleOrbit_Wrapped(); btn_OrbitWrap = FlingToolsOtherButtons["Orbit"]; if btn_OrbitWrap then btn_OrbitWrap.Text = getText("button_orbit", orbitEnabled, "", "") end end
    originalToggleAttach_Wrapped = toggleAttach_Original; toggleAttach_Original = function() originalToggleAttach_Wrapped(); btn_AttachWrap = FlingToolsOtherButtons["Attach"]; if btn_AttachWrap then btn_AttachWrap.Text = getText("button_attach", attachEnabled, "", "") end end
    originalToggleCar_Wrapped = toggleCarMode_Original; toggleCarMode_Original = function() originalToggleCar_Wrapped(); btn_CarWrap = FlingToolsOtherButtons["Car"]; if btn_CarWrap then btn_CarWrap.Text = getText("button_car", carToggleActivated, "", "") end end
    originalToggleKillBrick_Wrapped = toggleKillBrick_Original; toggleKillBrick_Original = function() originalToggleKillBrick_Wrapped(); btn_KillBrickWrap = FlingToolsOtherButtons["KillBrick"]; if btn_KillBrickWrap then btn_KillBrickWrap.Text = getText("button_killbrick", not killBrickNega, "", "") end end
    originalToggleNoclipSimple_Wrapped = toggleNoclipSimple_Original; toggleNoclipSimple_Original = function() originalToggleNoclipSimple_Wrapped(); statusLabel_NoclipWrap = FlingToolsNoclipStatusLabel; btn_NoclipWrap = FlingToolsOtherButtons["Noclip"]; if statusLabel_NoclipWrap then statusLabel_NoclipWrap.Text = noclipClipon and "OFF" or "ON"; if typeof(C3_fromRGB_local_CreerFling) == "function" then statusLabel_NoclipWrap.TextColor3 = noclipClipon and C3_fromRGB_local_CreerFling(170, 0, 0) or C3_fromRGB_local_CreerFling(0, 185, 0); statusLabel_NoclipWrap.BackgroundColor3 = currentButtonColor end end; if btn_NoclipWrap then btn_NoclipWrap.Text = getText("button_noclip", not noclipClipon, "", "") end end 
    originalToggleInvisible_Wrapped = toggleInvisible_Original; toggleInvisible_Original = function() originalToggleInvisible_Wrapped(); btn_InvisWrap = FlingToolsOtherButtons["Invisible"]; if btn_InvisWrap then btn_InvisWrap.Text = getText("button_invisible", invis_on, "", "") end end
    originalToggleShiftLock_Wrapped = toggleShiftLock_Original; toggleShiftLock_Original = function() originalToggleShiftLock_Wrapped(); btn_ShiftLockWrap = FlingToolsOtherButtons["ShiftLock"]; if btn_ShiftLockWrap then btn_ShiftLockWrap.Text = getText("button_shiftlock", (ShiftLockActive and ShiftLockActive.Connected), "", "") end end
    originalToggleRotate_Wrapped = toggleRotatePlayer_Original; toggleRotatePlayer_Original = function() originalToggleRotate_Wrapped(); btn_RotateWrap = FlingToolsOtherButtons["Rotate"]; if btn_RotateWrap then btn_RotateWrap.Text = getText("button_rotate", rotating, "", "") end end
    originalToggleAntiAfk_Wrapped = toggleAntiAfk_Original; toggleAntiAfk_Original = function() originalToggleAntiAfk_Wrapped(); btn_AntiAfkWrap = FlingToolsOtherButtons["AntiAfk"]; if btn_AntiAfkWrap then btn_AntiAfkWrap.Text = getText("button_antiafk", antiAfkEnabled, "", "") end end
    originalToggleCrosshair_Wrapped = toggleCrosshair_Original; toggleCrosshair_Original = function() originalToggleCrosshair_Wrapped(); btn_CrosshairWrap = FlingToolsOtherButtons["Crosshair"]; if btn_CrosshairWrap then btn_CrosshairWrap.Text = getText("button_crosshair", crosshairEnabled, "", " ") end end
    originalToggleAutoClicker_Wrapped = toggleAutoClicker_Original; toggleAutoClicker_Original = function() originalToggleAutoClicker_Wrapped(); btn_AutoClickWrap = FlingToolsOtherButtons["AutoClicker"]; if btn_AutoClickWrap then btn_AutoClickWrap.Text = getText("button_autoclicker", autoClickerEnabled, "", "") end end
    originalToggleAutoRespawn_Wrapped = toggleAutoRespawn_Original; toggleAutoRespawn_Original = function() originalToggleAutoRespawn_Wrapped(); btn_AutoRespawnWrap = FlingToolsOtherButtons["AutoRespawn"]; if btn_AutoRespawnWrap then btn_AutoRespawnWrap.Text = getText("button_autorespawn", autoRespawnEnabled, "", "") end end
    originalToggleFullBright_Wrapped = toggleFullBright_Original; toggleFullBright_Original = function() originalToggleFullBright_Wrapped(); btn_FullBrightWrap = FlingToolsOtherButtons["FullBrightGraphics"]; if btn_FullBrightWrap then btn_FullBrightWrap.Text = getText("button_fullbright", fullBrightEnabled, "", "") end end
    originalTogglePlatformStand_Wrapped = togglePlatformStand_Original; togglePlatformStand_Original = function() originalTogglePlatformStand_Wrapped(); btn_PlatStandWrap = FlingToolsOtherButtons["PlatformStand"]; if btn_PlatStandWrap then btn_PlatStandWrap.Text = getText("button_platformstand", platformStandEnabled, "", "") end end
    originalToggleWalkOnAir_Wrapped = toggleWalkOnAir_Original; toggleWalkOnAir_Original = function() originalToggleWalkOnAir_Wrapped(); btn_WoAWrap = FlingToolsOtherButtons["WalkOnAir"]; if btn_WoAWrap then btn_WoAWrap.Text = getText("button_walkonair", walkOnAirEnabled, "", "") end end
    originalToggleSpinPlayer_Wrapped = toggleSpinPlayer_Original; toggleSpinPlayer_Original = function() originalToggleSpinPlayer_Wrapped(); btn_SpinWrap = MainFrame:FindFirstChild("SpinPlayerButton", true); if btn_SpinWrap then btn_SpinWrap.Text = getText("button_spinplayer", spinPlayerEnabled, "", "") end end
    originalToggleHeadless_Wrapped = toggleHeadless_Original; toggleHeadless_Original = function() originalToggleHeadless_Wrapped(); btn_HeadlessWrap = MainFrame:FindFirstChild("HeadlessButton", true); if btn_HeadlessWrap then btn_HeadlessWrap.Text = getText("button_headless", headlessEnabled, "", "") end end
    originalToggleFreezeCam_Wrapped = toggleFreezeCam_Original; toggleFreezeCam_Original = function() originalToggleFreezeCam_Wrapped(); btn_FreezeCamWrap = MainFrame:FindFirstChild("FreezeCamButton", true); if btn_FreezeCamWrap then btn_FreezeCamWrap.Text = getText("button_freezecam", freezeCamEnabled, "", "") end end
    originalToggleCartoonOutline_Wrapped = toggleCartoonOutline_Original; toggleCartoonOutline_Original = function() originalToggleCartoonOutline_Wrapped(); btn_CartoonWrap = FlingToolsOtherButtons["CartoonOutline"]; if btn_CartoonWrap then btn_CartoonWrap.Text = getText("button_cartoonoutline", cartoonOutlineEnabled, "", "") end end
    originalToggleInvertColors_Wrapped = toggleInvertColors_Original; toggleInvertColors_Original = function() originalToggleInvertColors_Wrapped(); btn_InvertWrap = FlingToolsOtherButtons["InvertColors"]; if btn_InvertWrap then btn_InvertWrap.Text = getText("button_invertcolors", invertColorsEnabled, "", "") end end
    originalToggleBloom_Wrapped = toggleBloom_Original; toggleBloom_Original = function() originalToggleBloom_Wrapped(); btn_BloomWrap = FlingToolsOtherButtons["Bloom"]; if btn_BloomWrap then btn_BloomWrap.Text = getText("button_bloom", bloomEnabled, "", "") end end
    originalToggleRagdoll_Wrapped = toggleRagdoll_Original; toggleRagdoll_Original = function() originalToggleRagdoll_Wrapped(); btn_RagdollWrap = MainFrame:FindFirstChild("RagdollButton", true); if btn_RagdollWrap then btn_RagdollWrap.Text = getText("button_ragdoll", ragdollEnabled, "", "") end end 
    originalToggleFloatUp_Wrapped = toggleFloatUp_Original; toggleFloatUp_Original = function() originalToggleFloatUp_Wrapped(); btn_FloatUpWrap = MainFrame:FindFirstChild("FloatUpButton", true); if btn_FloatUpWrap then btn_FloatUpWrap.Text = getText("button_floatup", floatUpEnabled, "", "") end end 
    originalToggleUpsideDown_Wrapped = toggleUpsideDown_Original; toggleUpsideDown_Original = function() originalToggleUpsideDown_Wrapped(); btn_UpsideDownWrap = MainFrame:FindFirstChild("UpsideDownButton", true); if btn_UpsideDownWrap then btn_UpsideDownWrap.Text = getText("button_upsidedown", upsideDownEnabled, "", "") end end 
    originalToggleNoFace_Wrapped = toggleNoFace_Original; toggleNoFace_Original = function() originalToggleNoFace_Wrapped(); btn_NoFaceWrap = MainFrame:FindFirstChild("NoFaceButton", true); if btn_NoFaceWrap then btn_NoFaceWrap.Text = getText("button_noface", noFaceEnabled, "", "") end end 
    originalToggleForceField_Wrapped = toggleForceField_Original; toggleForceField_Original = function() originalToggleForceField_Wrapped(); btn_ForceFieldWrap = MainFrame:FindFirstChild("ForceFieldButton", true); if btn_ForceFieldWrap then btn_ForceFieldWrap.Text = getText("button_forcefield", forceFieldEnabled, "", "") end end 
    originalToggleDepthOfField_Wrapped = toggleDepthOfField_Original; toggleDepthOfField_Original = function() originalToggleDepthOfField_Wrapped(); btn_DOFWrap = FlingToolsOtherButtons["DepthOfField"]; if btn_DOFWrap then btn_DOFWrap.Text = getText("button_depthoffield", depthOfFieldEnabled, "", "") end end 
    originalToggleSunRays_Wrapped = toggleSunRays_Original; toggleSunRays_Original = function() originalToggleSunRays_Wrapped(); btn_SunRaysWrap = FlingToolsOtherButtons["SunRays"]; if btn_SunRaysWrap then btn_SunRaysWrap.Text = getText("button_sunrays", sunRaysEnabled, "", "") end end 
    originalToggleBlur_Wrapped = toggleBlur_Original; toggleBlur_Original = function() originalToggleBlur_Wrapped(); btn_BlurWrap = FlingToolsOtherButtons["Blur"]; if btn_BlurWrap then btn_BlurWrap.Text = getText("button_blur", blurEnabled, "", "") end end 
    originalToggleNeonWorld_Wrapped = toggleNeonWorld_Original; toggleNeonWorld_Original = function() originalToggleNeonWorld_Wrapped(); btn_NeonWorldWrap = FlingToolsOtherButtons["NeonWorld"]; if btn_NeonWorldWrap then btn_NeonWorldWrap.Text = getText("button_neonworld", neonWorldEnabled, "", "") end end 
    originalToggleColoredFog_Wrapped = toggleColoredFog_Original; toggleColoredFog_Original = function() originalToggleColoredFog_Wrapped(); btn_ColoredFogWrap = FlingToolsOtherButtons["ColoredFog"]; if btn_ColoredFogWrap then btn_ColoredFogWrap.Text = getText("button_coloredfog", coloredFogEnabled, "", "") end end 

    originalToggleSpider_Wrapped = toggleSpider_Original; toggleSpider_Original = function() originalToggleSpider_Wrapped(); btn_SpiderWrap=MainFrame:FindFirstChild("SpiderButton",true); if btn_SpiderWrap then btn_SpiderWrap.Text=getText("button_spider", spiderEnabled, "", "") end end
    originalToggleJesusFly_Wrapped = toggleJesusFly_Original; toggleJesusFly_Original = function() originalToggleJesusFly_Wrapped(); btn_JesusFlyWrap=MainFrame:FindFirstChild("JesusFlyButton",true); if btn_JesusFlyWrap then btn_JesusFlyWrap.Text=getText("button_jesusfly", jesusFlyEnabled, "", "") end end
    originalToggleTracers_Wrapped = toggleTracers_Original; toggleTracers_Original = function() originalToggleTracers_Wrapped(); btn_TracersWrap=MainFrame:FindFirstChild("TracersButton",true); if btn_TracersWrap then btn_TracersWrap.Text=getText("button_tracers", tracersEnabled, "", "") end end
    originalToggleNoArms_Wrapped = toggleNoArms_Original; toggleNoArms_Original = function() originalToggleNoArms_Wrapped(); btn_NoArmsWrap=MainFrame:FindFirstChild("NoArmsButton",true); if btn_NoArmsWrap then btn_NoArmsWrap.Text=getText("button_noarms", noArmsEnabled, "", "") end end
    originalToggleNoLegs_Wrapped = toggleNoLegs_Original; toggleNoLegs_Original = function() originalToggleNoLegs_Wrapped(); btn_NoLegsWrap=MainFrame:FindFirstChild("NoLegsButton",true); if btn_NoLegsWrap then btn_NoLegsWrap.Text=getText("button_nolegs", noLegsEnabled, "", "") end end
    originalToggleRainbowChar_Wrapped = toggleRainbowChar_Original; toggleRainbowChar_Original = function() originalToggleRainbowChar_Wrapped(); btn_RainbowCharWrap=MainFrame:FindFirstChild("RainbowCharButton",true); if btn_RainbowCharWrap then btn_RainbowCharWrap.Text=getText("button_rainbowchar", rainbowCharEnabled, "", "") end end
    originalToggleWallWalk_Wrapped = toggleWallWalk_Original; toggleWallWalk_Original = function() originalToggleWallWalk_Wrapped(); btn_WallWalkWrap=MainFrame:FindFirstChild("WallWalkButton",true); if btn_WallWalkWrap then btn_WallWalkWrap.Text=getText("button_wallwalk", wallWalkEnabled, "", "") end end
    originalToggleTPTool_Wrapped = toggleTeleportTool_Original; toggleTeleportTool_Original = function() originalToggleTPTool_Wrapped(); btn_TPToolWrap=MainFrame:FindFirstChild("TeleportToolButton",true); if btn_TPToolWrap then btn_TPToolWrap.Text=getText("button_tptool", teleportToolEnabled, "", "") end end
    originalToggleLowGrav_Wrapped = toggleLowGravity_Original; toggleLowGravity_Original = function() originalToggleLowGrav_Wrapped(); btn_LowGravWrap=MainFrame:FindFirstChild("LowGravityButton",true); if btn_LowGravWrap then btn_LowGravWrap.Text=getText("button_lowgravity", lowGravityEnabled, "", "") end end
    originalToggleBHop_Wrapped = toggleBunnyHop_Original; toggleBunnyHop_Original = function() originalToggleBHop_Wrapped(); btn_BHopWrap=MainFrame:FindFirstChild("BunnyHopButton",true); if btn_BHopWrap then btn_BHopWrap.Text=getText("button_bhop", bhopEnabled, "", "") end end


    PlayerLiftButton_CreerFling.MouseButton1Click:Connect(function()
        C3_new_local_PlayerLift = cached_Color3_new; rad_PlayerLift = math.rad; player_PlayerLift = game:GetService("Players").LocalPlayer; mouse_PlayerLift = player_PlayerLift:GetMouse(); camera_PlayerLift = workspace.CurrentCamera; ts_PlayerLift = game:GetService("TweenService") 
        createtween_PlayerLift = function(part, cframe, ttime) tweeninfo_PlayerLift = TweenInfo.new(ttime); lift_tween = ts_PlayerLift:Create(part, tweeninfo_PlayerLift, {CFrame = cframe}); if lift_tween then lift_tween:Play(); lift_tween.Completed:Wait() else warn("Player Lift: Failed to create tween") end end 
        if lift_outline and lift_outline.Parent then lift_outline:Destroy() end; lift_outline = Instance.new("Highlight"); if typeof(C3_new_local_PlayerLift)=="function" then lift_outline.FillColor=C3_new_local_PlayerLift(1,1,0); lift_outline.OutlineColor=C3_new_local_PlayerLift(1,0,0) else warn("PlayerLift: C3_new_local_PlayerLift is nil! Using fallback colors."); lift_outline.FillColor=Color3.new(1,1,0); lift_outline.OutlineColor=Color3.new(1,0,0) end; lift_outline.Parent = workspace
        lift_gravityActive = true; lift_scriptDisabled = false
        if lift_mouseUpConn and lift_mouseUpConn.Connected then lift_mouseUpConn:Disconnect() end; if lift_renderSteppedConn and lift_renderSteppedConn.Connected then lift_renderSteppedConn:Disconnect() end; if lift_loopThread then task.cancel(lift_loopThread); lift_loopThread = nil end
        resetCharacter_PlayerLift = function() lift_scriptDisabled = true; if lift_outline and lift_outline.Parent then lift_outline:Destroy(); lift_outline = nil end; if lift_tween then lift_tween:Cancel(); lift_tween = nil end; if lift_renderSteppedConn and lift_renderSteppedConn.Connected then lift_renderSteppedConn:Disconnect(); lift_renderSteppedConn = nil end; if lift_mouseUpConn and lift_mouseUpConn.Connected then lift_mouseUpConn:Disconnect(); lift_mouseUpConn = nil end; if lift_loopThread then task.cancel(lift_loopThread); lift_loopThread = nil end; pcall(function() player_PlayerLift.Character:BreakJoints() end); pcall(function() if player_PlayerLift.Character and player_PlayerLift.Character:FindFirstChild("HumanoidRootPart") then player_PlayerLift.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0) end end); target = nil; camera_PlayerLift.CameraSubject = player_PlayerLift.Character and player_PlayerLift.Character:FindFirstChild("Humanoid"); ShowNotification("notif_playerlift_reset") end 
        lift_mouseUpConn = mouse_PlayerLift.Button1Up:Connect(function() if lift_scriptDisabled then return end; if mouse_PlayerLift.Target then model_PlayerLiftMouseUp = mouse_PlayerLift.Target:FindFirstAncestorOfClass("Model"); if model_PlayerLiftMouseUp and model_PlayerLiftMouseUp:FindFirstChild("Humanoid") then if model_PlayerLiftMouseUp==player_PlayerLift.Character then resetCharacter_PlayerLift(); return end; camera_PlayerLift.CameraSubject=model_PlayerLiftMouseUp.Humanoid; target=model_PlayerLiftMouseUp; if lift_outline then lift_outline.Parent=model_PlayerLiftMouseUp end; ShowNotification("notif_playerlift_target_set", (model_PlayerLiftMouseUp.Name or "Unknown")) else if lift_outline then lift_outline.Parent=nil end; if target then target = nil; ShowNotification("notif_playerlift_target_cleared") end end end end) 
        lift_renderSteppedConn = game:GetService("RunService").RenderStepped:Connect(function() if lift_scriptDisabled then return end; if player_PlayerLift.Character and player_PlayerLift.Character:FindFirstChild("HumanoidRootPart") then if target and target:FindFirstChild("HumanoidRootPart") then player_PlayerLift.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0); if lift_gravityActive then if target.HumanoidRootPart.CFrame.Y + 20 < player_PlayerLift.Character.HumanoidRootPart.CFrame.Y then if lift_tween then lift_tween:Cancel() end end end else player_PlayerLift.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0) end end; if mouse_PlayerLift.Target then model_PlayerLiftRender = mouse_PlayerLift.Target:FindFirstAncestorOfClass("Model"); if model_PlayerLiftRender and model_PlayerLiftRender:FindFirstChild("Humanoid") then if lift_outline then lift_outline.Parent = model_PlayerLiftRender end else if lift_outline then lift_outline.Parent = nil end end end end) 
        lift_loopThread = task.spawn(function() while task.wait() do if lift_scriptDisabled then pcall(function() if player_PlayerLift.Character and player_PlayerLift.Character:FindFirstChild("HumanoidRootPart") then player_PlayerLift.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0) end; if player_PlayerLift.Character and player_PlayerLift.Character:FindFirstChild("Humanoid") then player_PlayerLift.Character.Humanoid.PlatformStand = false end end); break end; humanoid_PlayerLiftLoop=player_PlayerLift.Character and player_PlayerLift.Character:FindFirstChild("Humanoid"); if humanoid_PlayerLiftLoop and humanoid_PlayerLiftLoop.Health <= 0 then resetCharacter_PlayerLift(); break end; if lift_gravityActive then if target~=nil and target:FindFirstAncestorOfClass("Workspace") and target~=player_PlayerLift.Character and player_PlayerLift.Character and player_PlayerLift.Character:FindFirstChild("HumanoidRootPart") and target:FindFirstChild("HumanoidRootPart") then character_PlayerLiftLoop = player_PlayerLift.Character; hrp_PlayerLiftLoop = character_PlayerLiftLoop.HumanoidRootPart; thrp_PlayerLiftLoop = target.HumanoidRootPart; backwardOffset_PlayerLiftLoop = -0.5; hrp_PlayerLiftLoop.CFrame = thrp_PlayerLiftLoop.CFrame * CFrame.Angles(rad_PlayerLift(90),0,0) + thrp_PlayerLiftLoop.CFrame.UpVector * -8 + thrp_PlayerLiftLoop.CFrame.LookVector * backwardOffset_PlayerLiftLoop end; if target~=nil and target:FindFirstAncestorOfClass("Workspace") and target~=player_PlayerLift.Character and player_PlayerLift.Character and player_PlayerLift.Character:FindFirstChild("HumanoidRootPart") and target:FindFirstChild("HumanoidRootPart") then character_PlayerLiftLoop2=player_PlayerLift.Character; hrp_PlayerLiftLoop2=character_PlayerLiftLoop2.HumanoidRootPart; thrp_PlayerLiftLoop2=target.HumanoidRootPart; rot_PlayerLiftLoop = thrp_PlayerLiftLoop2.CFrame*CFrame.Angles(rad_PlayerLift(25),rad_PlayerLift(25),rad_PlayerLift(25)); if lift_tween then lift_tween:Cancel() end; createtween_PlayerLift(hrp_PlayerLiftLoop2, thrp_PlayerLiftLoop2.CFrame * CFrame.Angles(rad_PlayerLift(90),0,0) + thrp_PlayerLiftLoop2.CFrame.UpVector * 1000000, 100000) end end end end) 
        ShowNotification("notif_playerlift_activated")
    end)

    StopLiftButton_CreerFling.MouseButton1Click:Connect(function() onButtonClick_StopLift = function() pcall(function() if lift_renderSteppedConn or lift_mouseUpConn or lift_loopThread then lift_scriptDisabled = true; if lift_renderSteppedConn and lift_renderSteppedConn.Connected then lift_renderSteppedConn:Disconnect() end; if lift_mouseUpConn and lift_mouseUpConn.Connected then lift_mouseUpConn:Disconnect() end; if lift_tween then lift_tween:Cancel() end; if lift_outline and lift_outline.Parent then lift_outline:Destroy() end; if lift_loopThread then task.cancel(lift_loopThread) end; char_StopLift = player.Character; primaryPart_StopLift = char_StopLift and (char_StopLift:FindFirstChild("HumanoidRootPart") or char_StopLift.PrimaryPart); if primaryPart_StopLift then stopLiftCheckpoint_Source = primaryPart_StopLift.Position end; if char_StopLift and char_StopLift:FindFirstChild("Humanoid") then pcall(function() char_StopLift.Humanoid.PlatformStand = false end) end; lift_renderSteppedConn, lift_mouseUpConn, lift_tween, lift_outline, lift_loopThread = nil, nil, nil, nil, nil; target = nil; lift_gravityActive = true; lift_scriptDisabled = false; camera.CameraSubject = player.Character and player.Character:FindFirstChild("Humanoid"); print("Lift state cleaned up by Stop button.") end; if player.Character then player.Character:BreakJoints() end end) end; onButtonClick_StopLift(); ShowNotification("notif_playerlift_stopped") end) 


updatePlayerList = function()
     if not flingPlayerListFrame or not flingPlayerListFrame.Parent then return end
     listLayout_updatePlayerList = flingPlayerListFrame:FindFirstChildOfClass("UIListLayout")
     if not listLayout_updatePlayerList then return end
     CSeq_new_local_updatePlayerList = ColorSequence.new; CSKP_new_local_updatePlayerList = ColorSequenceKeypoint.new

     for _, child in ipairs(flingPlayerListFrame:GetChildren()) do if child:IsA("Frame") and child.Name == "PlayerListEntry" then child:Destroy() end end

     entryCount_updatePlayerList = 0
     for _, p in ipairs(Players:GetPlayers()) do
         if p ~= player then
             entryCount_updatePlayerList = entryCount_updatePlayerList + 1
             entryFrame_updatePlayerList = Instance.new("Frame"); entryFrame_updatePlayerList.Name = "PlayerListEntry"; entryFrame_updatePlayerList.Size = UDim2.new(1, -4, 0, 36); entryFrame_updatePlayerList.BackgroundColor3 = Color3.fromRGB(currentSliderBgColor.R*255*0.9, currentSliderBgColor.G*255*0.9, currentSliderBgColor.B*255*0.9); entryFrame_updatePlayerList.BackgroundTransparency = 0.9; entryFrame_updatePlayerList.BorderSizePixel = 0; entryFrame_updatePlayerList.ClipsDescendants = true; entryFrame_updatePlayerList.Parent = flingPlayerListFrame; Instance.new("UICorner", entryFrame_updatePlayerList).CornerRadius = UDim.new(0,6)
             entryGradient_updatePlayerList = Instance.new("UIGradient", entryFrame_updatePlayerList); entryGradient_updatePlayerList.Rotation = 90; entryGradient_updatePlayerList.Color = CSeq_new_local_updatePlayerList{CSKP_new_local_updatePlayerList(0, Color3.fromRGB(currentSliderBgColor.R*255*1.1, currentSliderBgColor.G*255*1.1, currentSliderBgColor.B*255*1.1)), CSKP_new_local_updatePlayerList(1, currentSliderBgColor)}
             
             -- LA CORRECTION EST ICI --
             local playerThumb_updatePlayerList = Instance.new("ImageLabel", entryFrame_updatePlayerList) -- On crée la variable DANS la boucle
             playerThumb_updatePlayerList.Name = "PlayerThumb"; playerThumb_updatePlayerList.Size = UDim2.new(0, 30, 0, 30); playerThumb_updatePlayerList.Position = UDim2.new(0, 3, 0.5, -15); playerThumb_updatePlayerList.BackgroundTransparency = 1; playerThumb_updatePlayerList.Image = ""; Instance.new("UICorner", playerThumb_updatePlayerList).CornerRadius = UDim.new(0, 4)
             
             task.spawn(function() 
                 local success_thumb, thumbUrl_thumb = pcall(Players.GetUserThumbnailAsync, Players, p.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size48x48)
                 if success_thumb and playerThumb_updatePlayerList and playerThumb_updatePlayerList.Parent then
                     playerThumb_updatePlayerList.Image = thumbUrl_thumb -- Et on l'utilise ici, elle est maintenant unique à chaque tour de boucle
                 end 
             end)
             -- FIN DE LA CORRECTION --

             nameLabel_updatePlayerList = Instance.new("TextLabel"); nameLabel_updatePlayerList.Size = UDim2.new(1, -75, 1, -8); nameLabel_updatePlayerList.Position = UDim2.new(0, 38, 0, 4); nameLabel_updatePlayerList.BackgroundTransparency = 1; nameLabel_updatePlayerList.Text = p.DisplayName .. " (@"..p.Name..")"; nameLabel_updatePlayerList.TextColor3 = currentTextColor;
             nameLabel_updatePlayerList.Font = Enum.Font.GothamBlack;
             nameLabel_updatePlayerList.TextSize = 13; nameLabel_updatePlayerList.TextXAlignment = Enum.TextXAlignment.Left; nameLabel_updatePlayerList.TextYAlignment = Enum.TextYAlignment.Top; nameLabel_updatePlayerList.TextWrapped = true; nameLabel_updatePlayerList.Parent = entryFrame_updatePlayerList
             targetButton_updatePlayerList = Instance.new("TextButton"); targetButton_updatePlayerList.Name = "TargetButton"; targetButton_updatePlayerList.Size = UDim2.new(0, 25, 0, 25); targetButton_updatePlayerList.Position = UDim2.new(1, -30, 0.5, -12.5); targetButton_updatePlayerList.AnchorPoint = Vector2.new(0.5, 0.5); targetButton_updatePlayerList.BackgroundColor3 = currentButtonColor; targetButton_updatePlayerList.Text = ">"; targetButton_updatePlayerList.TextColor3 = currentTextColor;
             targetButton_updatePlayerList.Font = Enum.Font.GothamBlack;
             targetButton_updatePlayerList.TextSize = 16; targetButton_updatePlayerList.Parent = entryFrame_updatePlayerList; Instance.new("UICorner", targetButton_updatePlayerList).CornerRadius = UDim.new(1, 0);
             addHoverEffect(targetButton_updatePlayerList); targetButton_updatePlayerList.MouseButton1Click:Connect(function() if FlingToolsPlayerInputBox then FlingToolsPlayerInputBox.Text = p.Name; ShowNotification("Target set to: " .. p.Name) end end)
             entryFrame_updatePlayerList.MouseEnter:Connect(function() entryGradient_updatePlayerList.Enabled = false; entryFrame_updatePlayerList.BackgroundTransparency = 0.7 end)
             entryFrame_updatePlayerList.MouseLeave:Connect(function() entryGradient_updatePlayerList.Enabled = true; entryFrame_updatePlayerList.BackgroundTransparency = 0.9 end)
         end
     end
     task.wait()
     flingPlayerListFrame.CanvasSize = UDim2.new(0, 0, 0, listLayout_updatePlayerList.AbsoluteContentSize.Y + 5)
     PlayerTargetSection_CreerFling.Size = UDim2.new(1, 0, 0, 115 + listLayout_updatePlayerList.AbsoluteContentSize.Y + 10)
end


    updatePlayerList()
    Players.PlayerAdded:Connect(updatePlayerList)
    Players.PlayerRemoving:Connect(updatePlayerList)


    FlingListLayout_Creer:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function() FlingScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, FlingListLayout_Creer.AbsoluteContentSize.Y + 20) end)
    task.wait(0.1)
    FlingScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, FlingListLayout_Creer.AbsoluteContentSize.Y + 20)

    pageInstances.FlingTools = FlingToolsPage_Creer
    return FlingToolsPage_Creer
end 

CreerPageMisc = function() 
    C3_fromRGB_local_CreerMisc = cached_Color3_fromRGB 
    if typeof(C3_fromRGB_local_CreerMisc) ~= "function" then warn("CreerPageMisc: C3_fromRGB_local_CreerMisc is nil!"); return nil end

    MiscPage_Creer = Instance.new("Frame"); MiscPage_Creer.Name = "MiscPage"; MiscPage_Creer.Size = UDim2.new(1, 0, 1, 0); MiscPage_Creer.BackgroundTransparency = 1; MiscPage_Creer.Visible = false; MiscPage_Creer.Parent = ContentFrame 
    MiscTitle_Creer = Instance.new("TextLabel"); MiscTitle_Creer.Name="MiscTitle"; MiscTitle_Creer.Size = UDim2.new(1, 0, 0, 40); MiscTitle_Creer.Position = UDim2.new(0, 0, 0, 0); MiscTitle_Creer.BackgroundTransparency = 1; MiscTitle_Creer.Font = Enum.Font.GothamBlack; MiscTitle_Creer.TextColor3 = C3_fromRGB_local_CreerMisc(0, 220, 255); MiscTitle_Creer.TextSize = 20; 
    MiscTitle_Creer.Text = getText("tab_misc") .. " "; 
    MiscTitle_Creer.Parent = MiscPage_Creer

    MiscScroll_Creer = Instance.new("ScrollingFrame"); MiscScroll_Creer.Name = "MiscScroll"; MiscScroll_Creer.Size = UDim2.new(1, -10, 1, -50); MiscScroll_Creer.Position = UDim2.new(0, 5, 0, 45); MiscScroll_Creer.BackgroundTransparency = 1; MiscScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, 0); MiscScroll_Creer.ScrollBarThickness = 6; MiscScroll_Creer.Parent = MiscPage_Creer 
    MiscListLayout_Creer = Instance.new("UIListLayout"); MiscListLayout_Creer.Parent = MiscScroll_Creer; MiscListLayout_Creer.SortOrder = Enum.SortOrder.LayoutOrder; MiscListLayout_Creer.Padding = UDim.new(0, 10) 

    ServerSection_CreerMisc = createSection(MiscScroll_Creer, "ServerSection", "section_server", 120, 1, "") 
    ServerButtonGrid_CreerMisc = Instance.new("UIGridLayout"); ServerButtonGrid_CreerMisc.CellSize=UDim2.new(0,110,0,30); ServerButtonGrid_CreerMisc.CellPadding=UDim2.new(0,5,0,8); ServerButtonGrid_CreerMisc.StartCorner=Enum.StartCorner.TopLeft; ServerButtonGrid_CreerMisc.HorizontalAlignment=Enum.HorizontalAlignment.Center; ServerButtonGrid_CreerMisc.VerticalAlignment=Enum.VerticalAlignment.Top; ServerButtonGrid_CreerMisc.SortOrder=Enum.SortOrder.LayoutOrder; ServerButtonGrid_CreerMisc.Parent=ServerSection_CreerMisc 
    RejoinButton_CreerMisc = createButton(ServerSection_CreerMisc, "RejoinButton", "button_rejoin", 1, RejoinServer_Original, ""); RejoinButton_CreerMisc.Name = "RejoinButton" 
    ServerHopButton_CreerMisc = createButton(ServerSection_CreerMisc, "ServerHopButton", "button_serverhop", 2, HopServer_Original, ""); ServerHopButton_CreerMisc.Name = "ServerHopButton" 
    HopSmallestButton_CreerMisc = createButton(ServerSection_CreerMisc, "HopSmallestButton", "button_hopsmallest", 3, HopSmallestServer_Original, ""); HopSmallestButton_CreerMisc.Name = "HopSmallestButton" 

    UtilitySection_CreerMisc = createSection(MiscScroll_Creer, "UtilitySection", "section_utility", 170, 2, "") 
    UtilityGrid_CreerMisc = Instance.new("UIGridLayout"); UtilityGrid_CreerMisc.CellSize=UDim2.new(0,110,0,30); UtilityGrid_CreerMisc.CellPadding=UDim2.new(0,5,0,8); UtilityGrid_CreerMisc.StartCorner=Enum.StartCorner.TopLeft; UtilityGrid_CreerMisc.HorizontalAlignment=Enum.HorizontalAlignment.Center; UtilityGrid_CreerMisc.VerticalAlignment=Enum.VerticalAlignment.Top; UtilityGrid_CreerMisc.SortOrder=Enum.SortOrder.LayoutOrder; UtilityGrid_CreerMisc.Parent=UtilitySection_CreerMisc 
    AntiAfkButton_CreerMisc = createButton(UtilitySection_CreerMisc, "AntiAfkButton", "button_antiafk", 1, toggleAntiAfk_Original, "", "", antiAfkEnabled); FlingToolsOtherButtons["AntiAfk"] = AntiAfkButton_CreerMisc 
    CrosshairButton_CreerMisc = createButton(UtilitySection_CreerMisc, "CrosshairButton", "button_crosshair", 2, toggleCrosshair_Original, "", " ", crosshairEnabled); FlingToolsOtherButtons["Crosshair"] = CrosshairButton_CreerMisc 
    AutoClickerButton_CreerMisc = createButton(UtilitySection_CreerMisc, "AutoClickerButton", "button_autoclicker", 3, toggleAutoClicker_Original, "", "", autoClickerEnabled); FlingToolsOtherButtons["AutoClicker"] = AutoClickerButton_CreerMisc 
    AutoRespawnButton_CreerMisc = createButton(UtilitySection_CreerMisc, "AutoRespawnButton", "button_autorespawn", 4, toggleAutoRespawn_Original, "", "", autoRespawnEnabled); FlingToolsOtherButtons["AutoRespawn"] = AutoRespawnButton_CreerMisc 
    ClearChatButton_CreerMisc = createButton(UtilitySection_CreerMisc, "ClearChatButton", "button_clearchat", 5, ClearChat_Original, "") 

    FPSContainer_CreerMisc = Instance.new("Frame"); FPSContainer_CreerMisc.Size = UDim2.new(1, -10, 0, 35); FPSContainer_CreerMisc.BackgroundTransparency = 1; FPSContainer_CreerMisc.LayoutOrder = 3; FPSContainer_CreerMisc.Parent = MiscScroll_Creer 
    FPSLabelText_CreerMisc = Instance.new("TextLabel"); FPSLabelText_CreerMisc.Name="FPSLabelText"; FPSLabelText_CreerMisc.Size = UDim2.new(0, 80, 1, 0); FPSLabelText_CreerMisc.Position = UDim2.new(0, 0, 0, 0); FPSLabelText_CreerMisc.BackgroundTransparency = 1; FPSLabelText_CreerMisc.Text = getText("label_fps"); FPSLabelText_CreerMisc.TextColor3 = currentTextColor; FPSLabelText_CreerMisc.Font = Enum.Font.GothamBlack; FPSLabelText_CreerMisc.TextSize = 16; FPSLabelText_CreerMisc.TextXAlignment = Enum.TextXAlignment.Left; FPSLabelText_CreerMisc.Parent = FPSContainer_CreerMisc 
    fpsLabel = Instance.new("TextLabel"); fpsLabel.Name = "FPSValueLabel"; fpsLabel.Size = UDim2.new(0, 100, 0, 25); fpsLabel.Position = UDim2.new(0, 95, 0, 5); fpsLabel.BackgroundColor3 = currentSliderBgColor; fpsLabel.TextColor3 = currentTextColor; 
    fpsLabel.Font = Enum.Font.GothamBlack; fpsLabel.TextSize = 14; fpsLabel.Text = "---"; fpsLabel.Parent = FPSContainer_CreerMisc; Instance.new("UICorner", fpsLabel).CornerRadius = UDim.new(0, 10); fpsLabel.TextXAlignment = Enum.TextXAlignment.Center;

    SkyboxSection_CreerMisc = createSection(MiscScroll_Creer, "SkyboxSection", "section_skybox", 120, 4, "") 
    _, skyboxInputRef_CreerMisc, ApplySkyboxButtonRef_CreerMisc = createInputWithButton(SkyboxSection_CreerMisc, "Skybox", "label_skyboxid", 1, "button_set", "placeholder_skybox", currentSkyboxId, ApplySkybox_Original, "") 
    skyboxInput = skyboxInputRef_CreerMisc 
    CycleSkyboxButton_CreerMisc = createButton(SkyboxSection_CreerMisc, "CycleSkyboxButton", "button_cycleskybox", 2, CycleSkybox_Original, ""); 
    CycleSkyboxButton_CreerMisc.Position = UDim2.new(0, 5, 0, 30+(2-1)*40) 

    OtherUtilsSection_CreerMisc = createSection(MiscScroll_Creer, "OtherUtilsSection", "section_other_utilities", 170, 5, "") 
    otherUtilsGrid_CreerMisc = Instance.new("UIGridLayout"); otherUtilsGrid_CreerMisc.CellSize=UDim2.new(0,110,0,30); otherUtilsGrid_CreerMisc.CellPadding=UDim2.new(0,5,0,8); otherUtilsGrid_CreerMisc.StartCorner=Enum.StartCorner.TopLeft; otherUtilsGrid_CreerMisc.HorizontalAlignment=Enum.HorizontalAlignment.Center; otherUtilsGrid_CreerMisc.VerticalAlignment=Enum.VerticalAlignment.Top; otherUtilsGrid_CreerMisc.SortOrder=Enum.SortOrder.LayoutOrder; otherUtilsGrid_CreerMisc.Parent=OtherUtilsSection_CreerMisc 
    GetSpeedBtn_CreerMisc = createButton(OtherUtilsSection_CreerMisc, "GetSpeedButton", "button_getspeed", 1, GetWalkSpeed_Original, ""); 
    PrintPositionsButton_CreerMisc = createButton(OtherUtilsSection_CreerMisc, "PrintPositionsButton", "button_printpositions", 2, PrintPlayerPositions_Original, "") 
    _, userIdInputRef_CreerMisc, GetUserIdButtonRef_CreerMisc = createInputWithButton(OtherUtilsSection_CreerMisc, "UserID", "label_userid", 3, "button_getuserid", "placeholder_userid", userIdInputText, GetUserIDFromInput_Original, "") 
    userIdInput = userIdInputRef_CreerMisc; FlingToolsOtherButtons["GetUserID"] = GetUserIdButtonRef_CreerMisc 
    CopyUserIdButton_CreerMisc = createButton(OtherUtilsSection_CreerMisc, "CopyUserIdButton", "button_copyuserid", 4, CopyUserID_Original, ""); FlingToolsOtherButtons["CopyUserID"] = CopyUserIdButton_CreerMisc 

    WebhookSection_CreerMisc = createSection(MiscScroll_Creer, "WebhookSection", "section_webhook", 120, 6, "") 
    _, webhookUrlInputRef_CreerMisc, _ = createInputWithButton(WebhookSection_CreerMisc, "WebhookUrl", "label_webhookurl", 1, "", "placeholder_webhookurl", webhookUrlText, nil) 
    webhookUrlInput = webhookUrlInputRef_CreerMisc 
    webhookUrlInput.Size = UDim2.new(1,-10,0,25) 
    webhookUrlInput.Parent.Size = UDim2.new(1,-10,0,35) 
    
    webhookUrlInput.Changed:Connect(function(prop) if prop == "Text" then webhookUrlText = webhookUrlInput.Text end end)
    _, webhookMessageInputRef_CreerMisc, SendWebhookButton_CreerMisc = createInputWithButton(WebhookSection_CreerMisc, "WebhookMsg", "label_webhookmsg", 2, "button_sendwebhook", "placeholder_webhookmsg", webhookMessageText, SendWebhook_Original, "") -- Made global with suffix (group)
    webhookMessageInput = webhookMessageInputRef_CreerMisc -- webhookMessageInput already global
    webhookMessageInput.Changed:Connect(function(prop) if prop == "Text" then webhookMessageText = webhookMessageInput.Text end end)

    if fpsLoop then task.cancel(fpsLoop); fpsLoop = nil end; if renderSteppedFpsConn and renderSteppedFpsConn.Connected then renderSteppedFpsConn:Disconnect(); renderSteppedFpsConn = nil end
    frameCount = 0; fpsLoop = task.spawn(function() local lastTime_fpsLoop = tick(); while task.wait(1) do if not fpsLabel or not fpsLabel.Parent then fpsLoop = nil; break end; local currentTime_fpsLoop = tick(); local deltaTime_fpsLoop = currentTime_fpsLoop - lastTime_fpsLoop; local currentFps_fpsLoop = 0; if deltaTime_fpsLoop > 0 then currentFps_fpsLoop = math.floor(frameCount / deltaTime_fpsLoop) end; pcall(function() fpsLabel.Text = tostring(currentFps_fpsLoop) end); frameCount = 0; lastTime_fpsLoop = currentTime_fpsLoop end end) 
    renderSteppedFpsConn = RunService.RenderStepped:Connect(function() if typeof(frameCount)=="number" then frameCount = frameCount + 1 else frameCount = 1 end end)

    MiscListLayout_Creer:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function() MiscScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, MiscListLayout_Creer.AbsoluteContentSize.Y + 10) end)
    task.wait(0.1); MiscScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, MiscListLayout_Creer.AbsoluteContentSize.Y + 10)

    pageInstances.Misc = MiscPage_Creer; return MiscPage_Creer
end

CreerPageMiscFeatures = function() 
    C3_fromRGB_local_CreerMiscFeat = cached_Color3_fromRGB 
    if typeof(C3_fromRGB_local_CreerMiscFeat) ~= "function" then warn("CreerPageMiscFeatures: C3_fromRGB_local_CreerMiscFeat is nil!"); return nil end

    MiscFeaturesPage_Creer = Instance.new("Frame"); MiscFeaturesPage_Creer.Name = "MiscFeaturesPage"; MiscFeaturesPage_Creer.Size = UDim2.new(1, 0, 1, 0); MiscFeaturesPage_Creer.BackgroundTransparency = 1; MiscFeaturesPage_Creer.Visible = false; MiscFeaturesPage_Creer.Parent = ContentFrame 
    MiscFeaturesTitle_Creer = Instance.new("TextLabel"); MiscFeaturesTitle_Creer.Name="MiscFeaturesTitle"; MiscFeaturesTitle_Creer.Size = UDim2.new(1, 0, 0, 40); MiscFeaturesTitle_Creer.Position = UDim2.new(0, 0, 0, 0); MiscFeaturesTitle_Creer.BackgroundTransparency = 1; MiscFeaturesTitle_Creer.Font = Enum.Font.GothamBlack; MiscFeaturesTitle_Creer.TextColor3 = C3_fromRGB_local_CreerMiscFeat(0, 220, 255); MiscFeaturesTitle_Creer.TextSize = 20; 
    MiscFeaturesTitle_Creer.Text = getText("tab_miscfeatures") .. " "; 
    MiscFeaturesTitle_Creer.Parent = MiscFeaturesPage_Creer
    MiscFeaturesScroll_Creer = Instance.new("ScrollingFrame"); MiscFeaturesScroll_Creer.Name = "MiscFeaturesScroll"; MiscFeaturesScroll_Creer.Size = UDim2.new(1, -10, 1, -50); MiscFeaturesScroll_Creer.Position = UDim2.new(0, 5, 0, 45); MiscFeaturesScroll_Creer.BackgroundTransparency = 1; MiscFeaturesScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, 0); MiscFeaturesScroll_Creer.ScrollBarThickness = 6; MiscFeaturesScroll_Creer.Parent = MiscFeaturesPage_Creer 
    MiscFeaturesListLayout_Creer = Instance.new("UIListLayout"); MiscFeaturesListLayout_Creer.Parent = MiscFeaturesScroll_Creer; MiscFeaturesListLayout_Creer.SortOrder = Enum.SortOrder.LayoutOrder; MiscFeaturesListLayout_Creer.Padding = UDim.new(0, 10) 

    WorkspaceUtilsSection_CreerMiscFeat = createSection(MiscFeaturesScroll_Creer, "WorkspaceUtilsSection", "section_workspace_utils", 80, 1, "") 
    wsUtilGrid_CreerMiscFeat = Instance.new("UIGridLayout"); wsUtilGrid_CreerMiscFeat.CellSize=UDim2.new(0,110,0,30); wsUtilGrid_CreerMiscFeat.CellPadding=UDim2.new(0,5,0,8); wsUtilGrid_CreerMiscFeat.StartCorner=Enum.StartCorner.TopLeft; wsUtilGrid_CreerMiscFeat.HorizontalAlignment=Enum.HorizontalAlignment.Center; wsUtilGrid_CreerMiscFeat.VerticalAlignment=Enum.VerticalAlignment.Top; wsUtilGrid_CreerMiscFeat.SortOrder=Enum.SortOrder.LayoutOrder; wsUtilGrid_CreerMiscFeat.Parent=WorkspaceUtilsSection_CreerMiscFeat 
    RemoveDebrisButton_CreerMiscFeat = createButton(WorkspaceUtilsSection_CreerMiscFeat, "RemoveDebrisButton", "button_removedebris", 1, RemoveDebris_Original, ""); 
    ClearWorkspaceButton_CreerMiscFeat = createButton(WorkspaceUtilsSection_CreerMiscFeat, "ClearWorkspaceButton", "button_clearworkspace", 2, ClearWorkspace_Original, ""); 

    InfoSection_CreerMiscFeat = createSection(MiscFeaturesScroll_Creer, "InfoSection", "section_information", 120, 2, "") 
    _, ServerInfoButton_CreerMiscFeat = createToggle(InfoSection_CreerMiscFeat, "ServerInfoButton", "button_serverinfo", 1, toggleServerInfo_Original, serverInfoVisible, "", "") 

    serverInfoDisplay = Instance.new("TextLabel"); serverInfoDisplay.Name = "ServerInfoDisplay"; serverInfoDisplay.Size = UDim2.new(1, -10, 0, 50); serverInfoDisplay.Position = UDim2.new(0, 5, 0, 70); serverInfoDisplay.BackgroundTransparency = 0.8; serverInfoDisplay.BackgroundColor3 = currentSliderBgColor; serverInfoDisplay.TextColor3 = currentTextColor; 
    serverInfoDisplay.Font = Enum.Font.GothamBlack;
    serverInfoDisplay.TextSize = 12; serverInfoDisplay.TextWrapped = true; serverInfoDisplay.TextXAlignment = Enum.TextXAlignment.Left; serverInfoDisplay.TextYAlignment = Enum.TextYAlignment.Top; serverInfoDisplay.Visible = false; serverInfoDisplay.Parent = InfoSection_CreerMiscFeat; Instance.new("UICorner", serverInfoDisplay).CornerRadius = UDim.new(0, 6)

    UiSection_CreerMiscFeat = createSection(MiscFeaturesScroll_Creer, "UiSection", "section_ui_custom", 80, 3, "") 
    UiScaleContainer_CreerMiscFeat = Instance.new("Frame"); UiScaleContainer_CreerMiscFeat.Size = UDim2.new(1, -10, 0, 35); UiScaleContainer_CreerMiscFeat.BackgroundTransparency = 1; UiScaleContainer_CreerMiscFeat.LayoutOrder = 1; UiScaleContainer_CreerMiscFeat.Parent = UiSection_CreerMiscFeat; UiScaleContainer_CreerMiscFeat.Position = UDim2.new(0, 5, 0, 30) 
    UiScaleLabel_CreerMiscFeat = Instance.new("TextLabel"); UiScaleLabel_CreerMiscFeat.Name="UiScaleLabel"; UiScaleLabel_CreerMiscFeat.Size = UDim2.new(0, 80, 1, 0); UiScaleLabel_CreerMiscFeat.Position = UDim2.new(0, 0, 0, 0); UiScaleLabel_CreerMiscFeat.BackgroundTransparency = 1; UiScaleLabel_CreerMiscFeat.Text = getText("label_uiscale"); UiScaleLabel_CreerMiscFeat.TextColor3 = currentTextColor; UiScaleLabel_CreerMiscFeat.Font = Enum.Font.GothamBlack; UiScaleLabel_CreerMiscFeat.TextSize = 16; UiScaleLabel_CreerMiscFeat.TextXAlignment = Enum.TextXAlignment.Left; UiScaleLabel_CreerMiscFeat.Parent = UiScaleContainer_CreerMiscFeat 
    UiScaleSlider_CreerMiscFeat = Instance.new("Frame"); UiScaleSlider_CreerMiscFeat.Name = "Slider_UiScale"; UiScaleSlider_CreerMiscFeat.Size = UDim2.new(0, 100, 0, 25); UiScaleSlider_CreerMiscFeat.Position = UDim2.new(0, 95, 0, 5); UiScaleSlider_CreerMiscFeat.BackgroundColor3 = currentSliderBgColor; UiScaleSlider_CreerMiscFeat.Active = true; UiScaleSlider_CreerMiscFeat.Parent = UiScaleContainer_CreerMiscFeat; Instance.new("UICorner", UiScaleSlider_CreerMiscFeat).CornerRadius = UDim.new(0, 10) 
    UiScaleBar_CreerMiscFeat = Instance.new("Frame"); UiScaleBar_CreerMiscFeat.Name = "UiScaleBar"; UiScaleBar_CreerMiscFeat.Size = UDim2.new(uiScaleValue / 2, 0, 1, 0); UiScaleBar_CreerMiscFeat.BackgroundColor3 = currentButtonColor; UiScaleBar_CreerMiscFeat.Parent = UiScaleSlider_CreerMiscFeat; Instance.new("UICorner", UiScaleBar_CreerMiscFeat).CornerRadius = UDim.new(0, 10) 
    UiScaleValueLabel_CreerMiscFeat = Instance.new("TextButton"); UiScaleValueLabel_CreerMiscFeat.Name = "UiScaleValue"; UiScaleValueLabel_CreerMiscFeat.Size = UDim2.new(0, 50, 0, 25); UiScaleValueLabel_CreerMiscFeat.Position = UDim2.new(0, 200, 0, 5); UiScaleValueLabel_CreerMiscFeat.BackgroundColor3 = currentSliderBgColor; UiScaleValueLabel_CreerMiscFeat.Text = string.format("%.2f", uiScaleValue); UiScaleValueLabel_CreerMiscFeat.TextColor3 = currentTextColor; 
    UiScaleValueLabel_CreerMiscFeat.Font = Enum.Font.GothamBlack; UiScaleValueLabel_CreerMiscFeat.TextSize = 14; UiScaleValueLabel_CreerMiscFeat.Parent = UiScaleContainer_CreerMiscFeat; Instance.new("UICorner", UiScaleValueLabel_CreerMiscFeat).CornerRadius=UDim.new(0,6)
    createSliderLogic(UiScaleSlider_CreerMiscFeat, UiScaleBar_CreerMiscFeat, UiScaleValueLabel_CreerMiscFeat, 2, ApplyUiScale_Original, UiScaleContainer_CreerMiscFeat, uiScaleValue, 0.5)

    MiscFeaturesListLayout_Creer:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function() MiscFeaturesScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, MiscFeaturesListLayout_Creer.AbsoluteContentSize.Y + 10) end)
    task.wait(0.1); MiscFeaturesScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, MiscFeaturesListLayout_Creer.AbsoluteContentSize.Y + 10)

    pageInstances.MiscFeatures = MiscFeaturesPage_Creer; return MiscFeaturesPage_Creer
end

CreerPageVersionHistory = function() 
    C3_fromRGB_local_CreerVerHist = cached_Color3_fromRGB 
    if typeof(C3_fromRGB_local_CreerVerHist) ~= "function" then warn("CreerPageVersionHistory: C3_fromRGB_local_CreerVerHist is nil!"); return nil end

    VersionHistoryPage_Creer = Instance.new("Frame"); VersionHistoryPage_Creer.Name = "VersionHistoryPage"; VersionHistoryPage_Creer.Size = UDim2.new(1, 0, 1, 0); VersionHistoryPage_Creer.BackgroundTransparency = 1; VersionHistoryPage_Creer.Visible = false; VersionHistoryPage_Creer.Parent = ContentFrame 
    HistoryTitle_CreerVerHist = Instance.new("TextLabel"); HistoryTitle_CreerVerHist.Name="HistoryTitle"; HistoryTitle_CreerVerHist.Size = UDim2.new(1, 0, 0, 40); HistoryTitle_CreerVerHist.Position = UDim2.new(0, 0, 0, 0); HistoryTitle_CreerVerHist.BackgroundTransparency = 1; HistoryTitle_CreerVerHist.Font = Enum.Font.GothamBlack; HistoryTitle_CreerVerHist.TextColor3 = C3_fromRGB_local_CreerVerHist(0, 220, 255); HistoryTitle_CreerVerHist.TextSize = 20; 
    HistoryTitle_CreerVerHist.Text = getText("tab_versionhistory") .. " "; 
    HistoryTitle_CreerVerHist.Parent = VersionHistoryPage_Creer
    HistoryScroll_CreerVerHist = Instance.new("ScrollingFrame"); HistoryScroll_CreerVerHist.Name = "HistoryScroll"; HistoryScroll_CreerVerHist.Size = UDim2.new(1, -10, 1, -50); HistoryScroll_CreerVerHist.Position = UDim2.new(0, 5, 0, 45); HistoryScroll_CreerVerHist.BackgroundTransparency = 0.8; HistoryScroll_CreerVerHist.BackgroundColor3 = currentSliderBgColor; HistoryScroll_CreerVerHist.CanvasSize = UDim2.new(0, 0, 0, 0); HistoryScroll_CreerVerHist.ScrollBarThickness = 6; HistoryScroll_CreerVerHist.Parent = VersionHistoryPage_Creer; Instance.new("UICorner", HistoryScroll_CreerVerHist).CornerRadius = UDim.new(0, 6) 
    HistoryListLayout_CreerVerHist = Instance.new("UIListLayout"); HistoryListLayout_CreerVerHist.Parent = HistoryScroll_CreerVerHist; HistoryListLayout_CreerVerHist.SortOrder = Enum.SortOrder.LayoutOrder; HistoryListLayout_CreerVerHist.Padding = UDim.new(0, 5) 

    changelog_CreerVerHist = {}; scriptSource_CreerVerHist = script.Source; currentVersionEntry_CreerVerHist = {}; versionPattern_CreerVerHist = "-- VERSION: (%S+)"; enhancementPattern_CreerVerHist = "-- ENHANCEMENTS %(%S+%)%:%s*(.*)"; modifiedPattern_CreerVerHist = "-- MODIFIED %(%S+%)%:%s*(.*)"; fixPattern_CreerVerHist = "-- FIXED:%s*(.*)"; addPattern_CreerVerHist = "-- ADDED:%s*(.*)"; removePattern_CreerVerHist = "-- REMOVED:%s*(.*)"; otherModPattern_CreerVerHist = "-- MODIFIED:%s*(.*)" 
    for line in scriptSource_CreerVerHist:gmatch("[^\r\n]+") do versionMatch_CreerVerHist=line:match(versionPattern_CreerVerHist); if versionMatch_CreerVerHist then if #currentVersionEntry_CreerVerHist>0 then table.insert(changelog_CreerVerHist,1,currentVersionEntry_CreerVerHist) end; currentVersionEntry_CreerVerHist={Version=versionMatch_CreerVerHist,Changes={}} else enhancementMatch_CreerVerHist=line:match(enhancementPattern_CreerVerHist); if enhancementMatch_CreerVerHist then table.insert(currentVersionEntry_CreerVerHist.Changes,enhancementMatch_CreerVerHist:gsub("^- ","")) else modifiedMatch_CreerVerHist=line:match(modifiedPattern_CreerVerHist); if modifiedMatch_CreerVerHist then table.insert(currentVersionEntry_CreerVerHist.Changes,modifiedMatch_CreerVerHist:gsub("^- ","")) else fixMatch_CreerVerHist=line:match(fixPattern_CreerVerHist); if fixMatch_CreerVerHist then table.insert(currentVersionEntry_CreerVerHist.Changes,"FIXED: "..fixMatch_CreerVerHist:gsub("^- ","")) else addPattern_CreerVerHist=line:match(addPattern_CreerVerHist); if addPattern_CreerVerHist then table.insert(currentVersionEntry_CreerVerHist.Changes,"ADDED: "..addPattern_CreerVerHist:gsub("^- ","")) else removeMatch_CreerVerHist=line:match(removePattern_CreerVerHist); if removeMatch_CreerVerHist then table.insert(currentVersionEntry_CreerVerHist.Changes,"REMOVED: "..removeMatch_CreerVerHist:gsub("^- ","")) else otherModMatch_CreerVerHist=line:match(otherModPattern_CreerVerHist); if otherModMatch_CreerVerHist then table.insert(currentVersionEntry_CreerVerHist.Changes,"MODIFIED: "..otherModMatch_CreerVerHist:gsub("^- ","")) end end end end end end end end
    if #currentVersionEntry_CreerVerHist>0 then table.insert(changelog_CreerVerHist,1,currentVersionEntry_CreerVerHist) end

    for i, entry in ipairs(changelog_CreerVerHist) do versionLabel_CreerVerHist = Instance.new("TextLabel"); versionLabel_CreerVerHist.Name = "Version_"..entry.Version; versionLabel_CreerVerHist.Size = UDim2.new(1,-10,0,25); versionLabel_CreerVerHist.BackgroundColor3 = Color3.fromRGB(currentSliderBgColor.R*255*0.9,currentSliderBgColor.G*255*0.9,currentSliderBgColor.B*255*0.9); versionLabel_CreerVerHist.BackgroundTransparency = 0.6; versionLabel_CreerVerHist.TextColor3 = C3_fromRGB_local_CreerVerHist(0,220,255); versionLabel_CreerVerHist.Font = Enum.Font.GothamBlack; versionLabel_CreerVerHist.TextSize = 16; versionLabel_CreerVerHist.Text = " "..entry.Version.." "; versionLabel_CreerVerHist.TextXAlignment = Enum.TextXAlignment.Left; versionLabel_CreerVerHist.LayoutOrder = i*100; versionLabel_CreerVerHist.Parent = HistoryScroll_CreerVerHist; Instance.new("UICorner", versionLabel_CreerVerHist).CornerRadius = UDim.new(0,5); for j, change in ipairs(entry.Changes) do changeLabel_CreerVerHist = Instance.new("TextLabel"); changeLabel_CreerVerHist.Name = "Change_"..i.."_"..j; changeLabel_CreerVerHist.Size = UDim2.new(1,-20,0,0); changeLabel_CreerVerHist.Position = UDim2.new(0,10,0,0); changeLabel_CreerVerHist.BackgroundTransparency = 1; changeLabel_CreerVerHist.TextColor3 = currentTextColor; 
        changeLabel_CreerVerHist.Font = Enum.Font.GothamBlack; 
        changeLabel_CreerVerHist.TextSize = 12; changeLabel_CreerVerHist.TextWrapped = true; changeLabel_CreerVerHist.Text = "- "..change; changeLabel_CreerVerHist.TextXAlignment = Enum.TextXAlignment.Left; changeLabel_CreerVerHist.AutomaticSize = Enum.AutomaticSize.Y; changeLabel_CreerVerHist.LayoutOrder = i*100+j; changeLabel_CreerVerHist.Parent = HistoryScroll_CreerVerHist end end

    HistoryListLayout_CreerVerHist:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function() HistoryScroll_CreerVerHist.CanvasSize = UDim2.new(0, 0, 0, HistoryListLayout_CreerVerHist.AbsoluteContentSize.Y + 10) end)
    task.wait(0.1); HistoryScroll_CreerVerHist.CanvasSize = UDim2.new(0, 0, 0, HistoryListLayout_CreerVerHist.AbsoluteContentSize.Y + 10)

    pageInstances.VersionHistory = VersionHistoryPage_Creer; return VersionHistoryPage_Creer
end

CreerPageGraphics = function() 
    C3_fromRGB_local_CreerGfx = cached_Color3_fromRGB 
    if typeof(C3_fromRGB_local_CreerGfx) ~= "function" then warn("CreerPageGraphics: C3_fromRGB_local_CreerGfx is nil!"); return nil end

    GraphicsPage_Creer = Instance.new("Frame"); GraphicsPage_Creer.Name = "GraphicsPage"; GraphicsPage_Creer.Size = UDim2.new(1, 0, 1, 0); GraphicsPage_Creer.BackgroundTransparency = 1; GraphicsPage_Creer.Visible = false; GraphicsPage_Creer.Parent = ContentFrame 
    GraphicsTitle_Creer = Instance.new("TextLabel"); GraphicsTitle_Creer.Name="GraphicsTitle"; GraphicsTitle_Creer.Size = UDim2.new(1, 0, 0, 40); GraphicsTitle_Creer.Position = UDim2.new(0, 0, 0, 0); GraphicsTitle_Creer.BackgroundTransparency = 1; GraphicsTitle_Creer.Font = Enum.Font.GothamBlack; GraphicsTitle_Creer.TextColor3 = C3_fromRGB_local_CreerGfx(0, 220, 255); GraphicsTitle_Creer.TextSize = 20; 
    GraphicsTitle_Creer.Text = getText("tab_graphics") .. " "; 
    GraphicsTitle_Creer.Parent = GraphicsPage_Creer
    GraphicsScroll_Creer = Instance.new("ScrollingFrame"); GraphicsScroll_Creer.Name = "GraphicsScroll"; GraphicsScroll_Creer.Size = UDim2.new(1, -10, 1, -50); GraphicsScroll_Creer.Position = UDim2.new(0, 5, 0, 45); GraphicsScroll_Creer.BackgroundTransparency = 1; GraphicsScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, 0); GraphicsScroll_Creer.ScrollBarThickness = 6; GraphicsScroll_Creer.Parent = GraphicsPage_Creer 
    GraphicsListLayout_Creer = Instance.new("UIListLayout"); GraphicsListLayout_Creer.Parent = GraphicsScroll_Creer; GraphicsListLayout_Creer.SortOrder = Enum.SortOrder.LayoutOrder; GraphicsListLayout_Creer.Padding = UDim.new(0, 10) 

    VisualSettingsSection_CreerGfx = createSection(GraphicsScroll_Creer, "VisualSettingsSection", "section_visual_settings", 250, 1, "") 
    VisualGrid_CreerGfx = Instance.new("UIGridLayout"); VisualGrid_CreerGfx.CellSize=UDim2.new(0,110,0,30); VisualGrid_CreerGfx.CellPadding=UDim2.new(0,5,0,8); VisualGrid_CreerGfx.StartCorner=Enum.StartCorner.TopLeft; VisualGrid_CreerGfx.HorizontalAlignment=Enum.HorizontalAlignment.Center; VisualGrid_CreerGfx.VerticalAlignment=Enum.VerticalAlignment.Top; VisualGrid_CreerGfx.SortOrder=Enum.SortOrder.LayoutOrder; VisualGrid_CreerGfx.Parent=VisualSettingsSection_CreerGfx 
    FullBrightGraphicsButton_CreerGfx = createButton(VisualSettingsSection_CreerGfx, "FullBrightGraphicsButton", "button_fullbright", 1, toggleFullBright_Original, "", "", fullBrightEnabled); FlingToolsOtherButtons["FullBrightGraphics"] = FullBrightGraphicsButton_CreerGfx 

    espBoxOptions_CreerGfx = {"Box", "Corners", "Filled"} 
    _, ESPBoxDropdown_CreerGfx = createDropdown(VisualSettingsSection_CreerGfx, "ESPBox", "label_espboxstyle", 2, espBoxOptions_CreerGfx, ApplyESPBoxStyle_Original) 
    ChamsV2Button_CreerGfx = createButton(VisualSettingsSection_CreerGfx, "ChamsV2ButtonGfx", "button_chamsv2", 3, function() CycleChamsStyle_Original(false) end, ""); FlingToolsOtherButtons["ChamsV2Gfx"] = ChamsV2Button_CreerGfx 
    ChamsV2Button_CreerGfx.Position = UDim2.new(0, 5, 0, 30 + (3 - 1) * 40) 

    BrightnessContainer_CreerGfx = Instance.new("Frame"); BrightnessContainer_CreerGfx.Size = UDim2.new(1, -10, 0, 35); BrightnessContainer_CreerGfx.BackgroundTransparency = 1; BrightnessContainer_CreerGfx.LayoutOrder = 4; BrightnessContainer_CreerGfx.Parent = VisualSettingsSection_CreerGfx; BrightnessContainer_CreerGfx.Position = UDim2.new(0,5,0,30+(4-1)*40) 
    BrightnessLabel_CreerGfx = Instance.new("TextLabel"); BrightnessLabel_CreerGfx.Name="BrightnessLabel"; BrightnessLabel_CreerGfx.Size = UDim2.new(0, 80, 1, 0); BrightnessLabel_CreerGfx.Position = UDim2.new(0, 0, 0, 0); BrightnessLabel_CreerGfx.BackgroundTransparency = 1; BrightnessLabel_CreerGfx.Text = getText("label_brightness"); BrightnessLabel_CreerGfx.TextColor3 = currentTextColor; BrightnessLabel_CreerGfx.Font = Enum.Font.GothamBlack; BrightnessLabel_CreerGfx.TextSize = 16; BrightnessLabel_CreerGfx.TextXAlignment = Enum.TextXAlignment.Left; BrightnessLabel_CreerGfx.Parent = BrightnessContainer_CreerGfx 
    BrightnessSlider_CreerGfx = Instance.new("Frame"); BrightnessSlider_CreerGfx.Name = "Slider_Brightness"; BrightnessSlider_CreerGfx.Size = UDim2.new(0, 100, 0, 25); BrightnessSlider_CreerGfx.Position = UDim2.new(0, 95, 0, 5); BrightnessSlider_CreerGfx.BackgroundColor3 = currentSliderBgColor; BrightnessSlider_CreerGfx.Active = true; BrightnessSlider_CreerGfx.Parent = BrightnessContainer_CreerGfx; Instance.new("UICorner", BrightnessSlider_CreerGfx).CornerRadius = UDim.new(0, 10) 
    BrightnessBar_CreerGfx = Instance.new("Frame"); BrightnessBar_CreerGfx.Name = "BrightnessBar"; BrightnessBar_CreerGfx.Size = UDim2.new((Lighting.Brightness - 0) / (5 - 0), 0, 1, 0); BrightnessBar_CreerGfx.BackgroundColor3 = currentButtonColor; BrightnessBar_CreerGfx.Parent = BrightnessSlider_CreerGfx; Instance.new("UICorner", BrightnessBar_CreerGfx).CornerRadius = UDim.new(0, 10) 
    BrightnessValue_CreerGfx = Instance.new("TextButton"); BrightnessValue_CreerGfx.Name = "BrightnessValue"; BrightnessValue_CreerGfx.Size = UDim2.new(0, 50, 0, 25); BrightnessValue_CreerGfx.Position = UDim2.new(0, 200, 0, 5); BrightnessValue_CreerGfx.BackgroundColor3 = currentSliderBgColor; BrightnessValue_CreerGfx.Text = string.format("%.1f", Lighting.Brightness); BrightnessValue_CreerGfx.TextColor3 = currentTextColor; 
    BrightnessValue_CreerGfx.Font = Enum.Font.GothamBlack; BrightnessValue_CreerGfx.TextSize = 14; BrightnessValue_CreerGfx.Parent = BrightnessContainer_CreerGfx; Instance.new("UICorner", BrightnessValue_CreerGfx).CornerRadius=UDim.new(0,6)
    createSliderLogic(BrightnessSlider_CreerGfx, BrightnessBar_CreerGfx, BrightnessValue_CreerGfx, 5, ApplyFullBrightnessSlider_Original, BrightnessContainer_CreerGfx, Lighting.Brightness, 0)

    ESPBoxSizeContainer_CreerGfx = Instance.new("Frame"); ESPBoxSizeContainer_CreerGfx.Size = UDim2.new(1, -10, 0, 35); ESPBoxSizeContainer_CreerGfx.BackgroundTransparency = 1; ESPBoxSizeContainer_CreerGfx.LayoutOrder = 5; ESPBoxSizeContainer_CreerGfx.Parent = VisualSettingsSection_CreerGfx; ESPBoxSizeContainer_CreerGfx.Position = UDim2.new(0,5,0,30+(5-1)*40) 
    ESPBoxSizeLabel_CreerGfx = Instance.new("TextLabel"); ESPBoxSizeLabel_CreerGfx.Name="ESPBoxSizeLabel"; ESPBoxSizeLabel_CreerGfx.Size = UDim2.new(0, 80, 1, 0); ESPBoxSizeLabel_CreerGfx.Position = UDim2.new(0, 0, 0, 0); ESPBoxSizeLabel_CreerGfx.BackgroundTransparency = 1; ESPBoxSizeLabel_CreerGfx.Text = getText("label_espboxsize"); ESPBoxSizeLabel_CreerGfx.TextColor3 = currentTextColor; ESPBoxSizeLabel_CreerGfx.Font = Enum.Font.GothamBlack; ESPBoxSizeLabel_CreerGfx.TextSize = 14; ESPBoxSizeLabel_CreerGfx.TextXAlignment = Enum.TextXAlignment.Left; ESPBoxSizeLabel_CreerGfx.Parent = ESPBoxSizeContainer_CreerGfx 
    ESPBoxSizeSlider_CreerGfx = Instance.new("Frame"); ESPBoxSizeSlider_CreerGfx.Name = "Slider_ESPBoxSize"; ESPBoxSizeSlider_CreerGfx.Size = UDim2.new(0, 100, 0, 25); ESPBoxSizeSlider_CreerGfx.Position = UDim2.new(0, 95, 0, 5); ESPBoxSizeSlider_CreerGfx.BackgroundColor3 = currentSliderBgColor; ESPBoxSizeSlider_CreerGfx.Active = true; ESPBoxSizeSlider_CreerGfx.Parent = ESPBoxSizeContainer_CreerGfx; Instance.new("UICorner", ESPBoxSizeSlider_CreerGfx).CornerRadius = UDim.new(0, 10) 
    ESPBoxSizeBar_CreerGfx = Instance.new("Frame"); ESPBoxSizeBar_CreerGfx.Name = "ESPBoxSizeBar"; ESPBoxSizeBar_CreerGfx.Size = UDim2.new((settings_tbl.ESP_BoxSize - 0.5) / (3 - 0.5), 0, 1, 0); ESPBoxSizeBar_CreerGfx.BackgroundColor3 = currentButtonColor; ESPBoxSizeBar_CreerGfx.Parent = ESPBoxSizeSlider_CreerGfx; Instance.new("UICorner", ESPBoxSizeBar_CreerGfx).CornerRadius = UDim.new(0, 10) 
    ESPBoxSizeValue_CreerGfx = Instance.new("TextButton"); ESPBoxSizeValue_CreerGfx.Name = "ESPBoxSizeValue"; ESPBoxSizeValue_CreerGfx.Size = UDim2.new(0, 50, 0, 25); ESPBoxSizeValue_CreerGfx.Position = UDim2.new(0, 200, 0, 5); ESPBoxSizeValue_CreerGfx.BackgroundColor3 = currentSliderBgColor; ESPBoxSizeValue_CreerGfx.Text = string.format("%.1f", settings_tbl.ESP_BoxSize); ESPBoxSizeValue_CreerGfx.TextColor3 = currentTextColor; 
    ESPBoxSizeValue_CreerGfx.Font = Enum.Font.GothamBlack; ESPBoxSizeValue_CreerGfx.TextSize = 14; ESPBoxSizeValue_CreerGfx.Parent = ESPBoxSizeContainer_CreerGfx; Instance.new("UICorner", ESPBoxSizeValue_CreerGfx).CornerRadius=UDim.new(0,6)
    createSliderLogic(ESPBoxSizeSlider_CreerGfx, ESPBoxSizeBar_CreerGfx, ESPBoxSizeValue_CreerGfx, 3, ApplyESPBoxSizeSlider, ESPBoxSizeContainer_CreerGfx, settings_tbl.ESP_BoxSize, 0.5)

    CharScaleContainer_CreerGfx = Instance.new("Frame"); CharScaleContainer_CreerGfx.Size = UDim2.new(1, -10, 0, 35); CharScaleContainer_CreerGfx.BackgroundTransparency = 1; CharScaleContainer_CreerGfx.LayoutOrder = 6; CharScaleContainer_CreerGfx.Parent = VisualSettingsSection_CreerGfx; CharScaleContainer_CreerGfx.Position = UDim2.new(0, 5, 0, 30+(6-1)*40) 
    CharScaleLabel_CreerGfx = Instance.new("TextLabel"); CharScaleLabel_CreerGfx.Name = "CharScaleLabel"; CharScaleLabel_CreerGfx.Size = UDim2.new(0, 80, 1, 0); CharScaleLabel_CreerGfx.Position = UDim2.new(0, 0, 0, 0); CharScaleLabel_CreerGfx.BackgroundTransparency = 1; CharScaleLabel_CreerGfx.Text = getText("label_charscale"); CharScaleLabel_CreerGfx.TextColor3 = currentTextColor; CharScaleLabel_CreerGfx.Font = Enum.Font.GothamBlack; CharScaleLabel_CreerGfx.TextSize = 16; CharScaleLabel_CreerGfx.TextXAlignment = Enum.TextXAlignment.Left; CharScaleLabel_CreerGfx.Parent = CharScaleContainer_CreerGfx 
    CharScaleSlider_CreerGfx = Instance.new("Frame"); CharScaleSlider_CreerGfx.Name = "Slider_CharScale"; CharScaleSlider_CreerGfx.Size = UDim2.new(0, 100, 0, 25); CharScaleSlider_CreerGfx.Position = UDim2.new(0, 95, 0, 5); CharScaleSlider_CreerGfx.BackgroundColor3 = currentSliderBgColor; CharScaleSlider_CreerGfx.Active = true; CharScaleSlider_CreerGfx.Parent = CharScaleContainer_CreerGfx; Instance.new("UICorner", CharScaleSlider_CreerGfx).CornerRadius = UDim.new(0, 10) 
    CharScaleBar_CreerGfx = Instance.new("Frame"); CharScaleBar_CreerGfx.Name = "CharScaleBar"; CharScaleBar_CreerGfx.Size = UDim2.new((characterScaleValue - 0.1) / (3 - 0.1), 0, 1, 0); CharScaleBar_CreerGfx.BackgroundColor3 = currentButtonColor; CharScaleBar_CreerGfx.Parent = CharScaleSlider_CreerGfx; Instance.new("UICorner", CharScaleBar_CreerGfx).CornerRadius = UDim.new(0, 10) 
    charScaleValueLabel = Instance.new("TextButton"); charScaleValueLabel.Name = "CharScaleValue"; charScaleValueLabel.Size = UDim2.new(0, 50, 0, 25); charScaleValueLabel.Position = UDim2.new(0, 200, 0, 5); charScaleValueLabel.BackgroundColor3 = currentSliderBgColor; charScaleValueLabel.Text = string.format("%.2f", characterScaleValue); charScaleValueLabel.TextColor3 = currentTextColor; 
    charScaleValueLabel.Font = Enum.Font.GothamBlack; charScaleValueLabel.TextSize = 14; charScaleValueLabel.Parent = CharScaleContainer_CreerGfx; Instance.new("UICorner", charScaleValueLabel).CornerRadius=UDim.new(0,6)
    createSliderLogic(CharScaleSlider_CreerGfx, CharScaleBar_CreerGfx, charScaleValueLabel, 3, ApplyCharacterScale_Original, CharScaleContainer_CreerGfx, characterScaleValue, 0.1)

    EffectsSection_CreerGfx = createSection(GraphicsScroll_Creer, "EffectsSection", "section_visual_effects", 210, 2, "") 
    EffectsGrid_CreerGfx = Instance.new("UIGridLayout"); EffectsGrid_CreerGfx.CellSize=UDim2.new(0,110,0,30); EffectsGrid_CreerGfx.CellPadding=UDim2.new(0,5,0,8); EffectsGrid_CreerGfx.StartCorner=Enum.StartCorner.TopLeft; EffectsGrid_CreerGfx.HorizontalAlignment=Enum.HorizontalAlignment.Center; EffectsGrid_CreerGfx.VerticalAlignment=Enum.VerticalAlignment.Top; EffectsGrid_CreerGfx.SortOrder=Enum.SortOrder.LayoutOrder; EffectsGrid_CreerGfx.Parent=EffectsSection_CreerGfx 
    CartoonOutlineButton_CreerGfx = createButton(EffectsSection_CreerGfx, "CartoonOutlineButton", "button_cartoonoutline", 1, toggleCartoonOutline_Original, "", "", cartoonOutlineEnabled); FlingToolsOtherButtons["CartoonOutline"] = CartoonOutlineButton_CreerGfx 
    InvertColorsButton_CreerGfx = createButton(EffectsSection_CreerGfx, "InvertColorsButton", "button_invertcolors", 2, toggleInvertColors_Original, "", "", invertColorsEnabled); FlingToolsOtherButtons["InvertColors"] = InvertColorsButton_CreerGfx 
    BloomButton_CreerGfx = createButton(EffectsSection_CreerGfx, "BloomButton", "button_bloom", 3, toggleBloom_Original, "", "", bloomEnabled); FlingToolsOtherButtons["Bloom"] = BloomButton_CreerGfx 
    DepthOfFieldButton_CreerGfx = createButton(EffectsSection_CreerGfx, "DepthOfFieldButton", "button_depthoffield", 4, toggleDepthOfField_Original, "", "", depthOfFieldEnabled); FlingToolsOtherButtons["DepthOfField"] = DepthOfFieldButton_CreerGfx 
    SunRaysButton_CreerGfx = createButton(EffectsSection_CreerGfx, "SunRaysButton", "button_sunrays", 5, toggleSunRays_Original, "", "", sunRaysEnabled); FlingToolsOtherButtons["SunRays"] = SunRaysButton_CreerGfx 
    BlurButton_CreerGfx = createButton(EffectsSection_CreerGfx, "BlurButton", "button_blur", 6, toggleBlur_Original, "", "", blurEnabled); FlingToolsOtherButtons["Blur"] = BlurButton_CreerGfx 
    NeonWorldButton_CreerGfx = createButton(EffectsSection_CreerGfx, "NeonWorldButton", "button_neonworld", 7, toggleNeonWorld_Original, "", "", neonWorldEnabled); FlingToolsOtherButtons["NeonWorld"] = NeonWorldButton_CreerGfx 

    EnvironmentSection_CreerGfx = createSection(GraphicsScroll_Creer, "EnvironmentSection", "section_environment", 160, 3, "") 
    EnvGrid_CreerGfx = Instance.new("UIGridLayout"); EnvGrid_CreerGfx.CellSize=UDim2.new(0,110,0,30); EnvGrid_CreerGfx.CellPadding=UDim2.new(0,5,0,8); EnvGrid_CreerGfx.StartCorner=Enum.StartCorner.TopLeft; EnvGrid_CreerGfx.HorizontalAlignment=Enum.HorizontalAlignment.Center; EnvGrid_CreerGfx.VerticalAlignment=Enum.VerticalAlignment.Top; EnvGrid_CreerGfx.SortOrder=Enum.SortOrder.LayoutOrder; EnvGrid_CreerGfx.Parent=EnvironmentSection_CreerGfx 
    SetDayButton_CreerGfx = createButton(EnvironmentSection_CreerGfx, "SetDayButton", "button_setday", 1, SetTimeDay_Original, ""); 
    SetNightButton_CreerGfx = createButton(EnvironmentSection_CreerGfx, "SetNightButton", "button_setnight", 2, SetTimeNight_Original, ""); 
    ColoredFogButton_CreerGfx = createButton(EnvironmentSection_CreerGfx, "ColoredFogButton", "button_coloredfog", 3, toggleColoredFog_Original, "", "", coloredFogEnabled); FlingToolsOtherButtons["ColoredFog"] = ColoredFogButton_CreerGfx 

    ShadowContainer_CreerGfx = Instance.new("Frame"); ShadowContainer_CreerGfx.Size = UDim2.new(1, -10, 0, 35); ShadowContainer_CreerGfx.BackgroundTransparency = 1; ShadowContainer_CreerGfx.LayoutOrder = 4; ShadowContainer_CreerGfx.Parent = EnvironmentSection_CreerGfx; ShadowContainer_CreerGfx.Position = UDim2.new(0,5,0,30+(4-1)*40) 
    ShadowLabel_CreerGfx = Instance.new("TextLabel"); ShadowLabel_CreerGfx.Name="ShadowLabel"; ShadowLabel_CreerGfx.Size = UDim2.new(0, 80, 1, 0); ShadowLabel_CreerGfx.Position = UDim2.new(0, 0, 0, 0); ShadowLabel_CreerGfx.BackgroundTransparency = 1; ShadowLabel_CreerGfx.Text = getText("label_shadows"); ShadowLabel_CreerGfx.TextColor3 = currentTextColor; ShadowLabel_CreerGfx.Font = Enum.Font.GothamBlack; ShadowLabel_CreerGfx.TextSize = 16; ShadowLabel_CreerGfx.TextXAlignment = Enum.TextXAlignment.Left; ShadowLabel_CreerGfx.Parent = ShadowContainer_CreerGfx 
    ShadowSlider_CreerGfx = Instance.new("Frame"); ShadowSlider_CreerGfx.Name = "Slider_ShadowQuality"; ShadowSlider_CreerGfx.Size = UDim2.new(0, 100, 0, 25); ShadowSlider_CreerGfx.Position = UDim2.new(0, 95, 0, 5); ShadowSlider_CreerGfx.BackgroundColor3 = currentSliderBgColor; ShadowSlider_CreerGfx.Active = true; ShadowSlider_CreerGfx.Parent = ShadowContainer_CreerGfx; Instance.new("UICorner", ShadowSlider_CreerGfx).CornerRadius = UDim.new(0, 10) 
    ShadowBar_CreerGfx = Instance.new("Frame"); ShadowBar_CreerGfx.Name = "ShadowQualityBar"; ShadowBar_CreerGfx.Size = UDim2.new((shadowQuality - 1) / 3, 0, 1, 0); ShadowBar_CreerGfx.BackgroundColor3 = currentButtonColor; ShadowBar_CreerGfx.Parent = ShadowSlider_CreerGfx; Instance.new("UICorner", ShadowBar_CreerGfx).CornerRadius = UDim.new(0, 10) 
    ShadowValue_CreerGfx = Instance.new("TextButton"); ShadowValue_CreerGfx.Name = "ShadowQualityValue"; ShadowValue_CreerGfx.Size = UDim2.new(0, 50, 0, 25); ShadowValue_CreerGfx.Position = UDim2.new(0, 200, 0, 5); ShadowValue_CreerGfx.BackgroundColor3 = currentSliderBgColor; ShadowValue_CreerGfx.Text = tostring(shadowQuality); ShadowValue_CreerGfx.TextColor3 = currentTextColor; 
    ShadowValue_CreerGfx.Font = Enum.Font.GothamBlack; ShadowValue_CreerGfx.TextSize = 14; ShadowValue_CreerGfx.Parent = ShadowContainer_CreerGfx; Instance.new("UICorner", ShadowValue_CreerGfx).CornerRadius=UDim.new(0,6)
    createSliderLogic(ShadowSlider_CreerGfx, ShadowBar_CreerGfx, ShadowValue_CreerGfx, 4, ApplyShadowQuality_Original, ShadowContainer_CreerGfx, shadowQuality, 1)

    GraphicsListLayout_Creer:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function() GraphicsScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, GraphicsListLayout_Creer.AbsoluteContentSize.Y + 10) end)
    task.wait(0.1)
    GraphicsScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, GraphicsListLayout_Creer.AbsoluteContentSize.Y + 10)

    pageInstances.Graphics = GraphicsPage_Creer; return GraphicsPage_Creer
end

-- METTRE CE BLOC JUSTE APRES LE 'end' DE CreerPageChatBypass = function()
CreerPageHttpSpy = function()
    local C3_fromRGB_local_CreerHttpSpy = cached_Color3_fromRGB
    if typeof(C3_fromRGB_local_CreerHttpSpy) ~= "function" then warn("CreerPageHttpSpy: C3_fromRGB_local_CreerHttpSpy is nil!"); return nil end

    local HttpSpyPage_Creer = Instance.new("Frame")
    HttpSpyPage_Creer.Name = "HttpSpyPage"
    HttpSpyPage_Creer.Size = UDim2.new(1, 0, 1, 0)
    HttpSpyPage_Creer.BackgroundTransparency = 1
    HttpSpyPage_Creer.Visible = false
    HttpSpyPage_Creer.Parent = ContentFrame -- Important : parenté à Darkfire

    -- Wrapper function for HttpSpy logic
    local InitializeHttpSpy = function(parentFrame)
        -- START OF MODIFIED HttpSpy CODE (htppspsy2.txt)
        local options = { -- Using default HttpSpy options
            AutoDecode = true,
            Highlighting = true,
            SaveLogs = true,
            CLICommands = true,
            ShowResponse = true,
            BlockedURLs = {},
            API = true,
            GuiEnabled = true -- Note: This doesn't control Darkfire's main visibility
        }
        local httpSpyVersion = "v1.2.5 By Darkfire" -- Renamed from 'version'
        local logname = string.format("%d-%s-log.txt", game.PlaceId, os.date("%d_%m_%y"))

        if options.SaveLogs then
            pcall(function()
                writefile(logname, string.format("Http Logs from %s\n\n", os.date("%d/%m/%y")))
            end)
        end

        -- Safe load serializer with error handling
        local Serializer
        pcall(function()
            Serializer = loadstring(game:HttpGet("https://pastebin.com/raw/yKvu9bB7"))()
            Serializer.UpdateConfig({ highlighting = options.Highlighting })
        end)

        if not Serializer then
            warn("HttpSpy Component: Failed to load Serializer - some features may not work properly")
            -- Create minimal serializer fallback
            Serializer = {
                Serialize = function(t) return tostring(t) end,
                FormatArguments = function(...) return table.concat({...}, ", ") end
            }
        end

        -- Rest of the initialization with pcall protection
        local RecentCommit = "Latest changes"
        pcall(function()
            RecentCommit = game.HttpService:JSONDecode(game:HttpGet("https://api.github.com/repos/NotDSF/HttpSpy/commits?per_page=1&path=init.lua"))[1].commit.message
        end)

        -- Create GUI with error handling
        local success, err = pcall(function()
            local clonef = clonefunction
            local format = clonef(string.format)
            local gsub = clonef(string.gsub)
            local match = clonef(string.match)
            local append = clonef(appendfile)
            local Type = clonef(type)
            local crunning = clonef(coroutine.running)
            local cwrap = clonef(coroutine.wrap)
            local cresume = clonef(coroutine.resume)
            local cyield = clonef(coroutine.yield)
            local Pcall = clonef(pcall)
            local Pairs = clonef(pairs)
            local Error = clonef(error)
            local getnamecallmethod = clonef(getnamecallmethod)
            local blocked = options.BlockedURLs
            local httpSpyEnabled = true -- Renamed from 'enabled'
            local reqfunc = (syn or http).request
            local libtype = syn and "syn" or "http"
            local hooked = {}
            local proxied = {}
            local methods = {
                HttpGet = not syn,
                HttpGetAsync = not syn,
                GetObjects = true,
                HttpPost = not syn,
                HttpPostAsync = not syn
            }

            local OnRequest = Instance.new("BindableEvent")

            -- Main Window Frame (inside Darkfire page)
            local HttpSpyMainFrame = Instance.new("Frame")
            HttpSpyMainFrame.Name = "HttpSpyMainFrame"
            -- Adjust size and position to fit inside the Darkfire ContentFrame page
            HttpSpyMainFrame.Size = UDim2.new(1, 0, 1, 0) -- Take full page space
            HttpSpyMainFrame.Position = UDim2.new(0, 0, 0, 0)
            HttpSpyMainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
            HttpSpyMainFrame.BorderColor3 = Color3.fromRGB(60, 60, 60)
            HttpSpyMainFrame.BorderSizePixel = 1
            HttpSpyMainFrame.ClipsDescendants = true
            HttpSpyMainFrame.Parent = parentFrame -- Parent to the passed page frame

            -- Make window draggable (REMOVED - Rely on Darkfire's dragging)
            --[[
            local dragInput, dragStart, startPos
            HttpSpyMainFrame.InputBegan:Connect(function(input) ... end)
            HttpSpyMainFrame.InputChanged:Connect(function(input) ... end)
            ]]

            -- Title Bar with properly visible buttons
            local HttpSpyTitleBar = Instance.new("Frame")
            HttpSpyTitleBar.Name = "HttpSpyTitleBar"
            HttpSpyTitleBar.Size = UDim2.new(1, 0, 0, 30)
            HttpSpyTitleBar.Position = UDim2.new(0, 0, 0, 0)
            HttpSpyTitleBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            HttpSpyTitleBar.BorderSizePixel = 0
            HttpSpyTitleBar.ZIndex = 2
            HttpSpyTitleBar.Parent = HttpSpyMainFrame

            local HttpSpyUICorner = Instance.new("UICorner")
            HttpSpyUICorner.CornerRadius = UDim.new(0, 6)
            HttpSpyUICorner.Parent = HttpSpyTitleBar

            local HttpSpyTitleText = Instance.new("TextLabel")
            HttpSpyTitleText.Name = "HttpSpyTitleText"
            HttpSpyTitleText.Size = UDim2.new(1, -70, 1, 0) -- Adjusted size for only toggle button
            HttpSpyTitleText.Position = UDim2.new(0, 10, 0, 0)
            HttpSpyTitleText.BackgroundTransparency = 1
            HttpSpyTitleText.Text = "HttpSpy " .. httpSpyVersion
            HttpSpyTitleText.TextColor3 = Color3.fromRGB(220, 220, 220)
            HttpSpyTitleText.Font = Enum.Font.GothamBold
            HttpSpyTitleText.TextSize = 14
            HttpSpyTitleText.TextXAlignment = Enum.TextXAlignment.Left
            HttpSpyTitleText.ZIndex = 3
            HttpSpyTitleText.Parent = HttpSpyTitleBar

            -- Button container (Only for Toggle)
            local HttpSpyButtonContainer = Instance.new("Frame")
            HttpSpyButtonContainer.Name = "HttpSpyButtonContainer"
            HttpSpyButtonContainer.Size = UDim2.new(0, 70, 1, 0) -- Smaller container
            HttpSpyButtonContainer.Position = UDim2.new(1, -75, 0, 0) -- Positioned right
            HttpSpyButtonContainer.BackgroundTransparency = 1
            HttpSpyButtonContainer.Parent = HttpSpyTitleBar

            -- Toggle Button (Logging On/Off)
            local HttpSpyToggleButton = Instance.new("TextButton")
            HttpSpyToggleButton.Name = "HttpSpyToggleButton"
            HttpSpyToggleButton.Size = UDim2.new(0, 60, 0, 22)
            HttpSpyToggleButton.Position = UDim2.new(0, 0, 0.5, -11) -- Centered in container
            HttpSpyToggleButton.Text = "Disable"
            HttpSpyToggleButton.Font = Enum.Font.Gotham
            HttpSpyToggleButton.TextSize = 12
            HttpSpyToggleButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
            HttpSpyToggleButton.TextColor3 = Color3.fromRGB(220, 220, 220)
            HttpSpyToggleButton.BorderSizePixel = 0
            HttpSpyToggleButton.AutoButtonColor = false
            HttpSpyToggleButton.ZIndex = 3
            HttpSpyToggleButton.Parent = HttpSpyButtonContainer

            local HttpSpyToggleCorner = Instance.new("UICorner")
            HttpSpyToggleCorner.CornerRadius = UDim.new(0, 4)
            HttpSpyToggleCorner.Parent = HttpSpyToggleButton

            -- Minimize Button (REMOVED)
            -- Close Button (REMOVED)
            -- Minimized Icon (REMOVED)

            -- Button hover effects with pcall protection
            local function safeHover(button, enterColor, leaveColor)
                pcall(function()
                    button.MouseEnter:Connect(function() button.BackgroundColor3 = enterColor end)
                    button.MouseLeave:Connect(function() button.BackgroundColor3 = leaveColor end)
                end)
            end

            -- REMOVED hover for Minimize/Close/MinimizedIcon
            safeHover(HttpSpyToggleButton, Color3.fromRGB(100, 100, 100), httpSpyEnabled and Color3.fromRGB(80, 80, 80) or Color3.fromRGB(120, 40, 40))

            -- Minimize functionality (REMOVED)
            -- Close/unload functionality (REMOVED - Handled by Darkfire)

            -- Toggle Logging Logic
            pcall(function()
                HttpSpyToggleButton.MouseButton1Click:Connect(function()
                    httpSpyEnabled = not httpSpyEnabled
                    HttpSpyToggleButton.Text = httpSpyEnabled and "Disable" or "Enable"
                    HttpSpyToggleButton.BackgroundColor3 = httpSpyEnabled and Color3.fromRGB(80, 80, 80) or Color3.fromRGB(120, 40, 40)
                    -- Update hover effect color leave state
                    safeHover(HttpSpyToggleButton, Color3.fromRGB(100, 100, 100), httpSpyEnabled and Color3.fromRGB(80, 80, 80) or Color3.fromRGB(120, 40, 40))
                end)
            end)

            -- Logs Frame
            local HttpSpyLogsFrame = Instance.new("ScrollingFrame")
            HttpSpyLogsFrame.Name = "HttpSpyLogsFrame"
            HttpSpyLogsFrame.Size = UDim2.new(1, -10, 1, -70) -- Relative to HttpSpyMainFrame
            HttpSpyLogsFrame.Position = UDim2.new(0, 5, 0, 35) -- Below title bar
            HttpSpyLogsFrame.BackgroundTransparency = 1
            HttpSpyLogsFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
            HttpSpyLogsFrame.ScrollBarThickness = 6
            HttpSpyLogsFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
            HttpSpyLogsFrame.ScrollingDirection = Enum.ScrollingDirection.Y
            HttpSpyLogsFrame.Parent = HttpSpyMainFrame

            local HttpSpyLogsLayout = Instance.new("UIListLayout")
            HttpSpyLogsLayout.Name = "HttpSpyLogsLayout"
            HttpSpyLogsLayout.Padding = UDim.new(0, 8)
            HttpSpyLogsLayout.Parent = HttpSpyLogsFrame

            -- Control Bar
            local HttpSpyControlBar = Instance.new("Frame")
            HttpSpyControlBar.Name = "HttpSpyControlBar"
            HttpSpyControlBar.Size = UDim2.new(1, 0, 0, 30)
            HttpSpyControlBar.Position = UDim2.new(0, 0, 1, -30) -- At the bottom
            HttpSpyControlBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            HttpSpyControlBar.BorderSizePixel = 0
            HttpSpyControlBar.Parent = HttpSpyMainFrame

            -- Clear Button
            local HttpSpyClearButton = Instance.new("TextButton")
            HttpSpyClearButton.Name = "HttpSpyClearButton"
            HttpSpyClearButton.Size = UDim2.new(0, 80, 0, 22)
            HttpSpyClearButton.Position = UDim2.new(0, 10, 0.5, -11)
            HttpSpyClearButton.Text = "Clear Logs"
            HttpSpyClearButton.Font = Enum.Font.Gotham
            HttpSpyClearButton.TextSize = 12
            HttpSpyClearButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            HttpSpyClearButton.TextColor3 = Color3.fromRGB(220, 220, 220)
            HttpSpyClearButton.BorderSizePixel = 0
            HttpSpyClearButton.AutoButtonColor = false
            HttpSpyClearButton.Parent = HttpSpyControlBar

            local HttpSpyClearCorner = Instance.new("UICorner")
            HttpSpyClearCorner.CornerRadius = UDim.new(0, 4)
            HttpSpyClearCorner.Parent = HttpSpyClearButton

            safeHover(HttpSpyClearButton, Color3.fromRGB(80, 80, 80), Color3.fromRGB(60, 60, 60))

            -- Filter Box
            local HttpSpyFilterBox = Instance.new("TextBox")
            HttpSpyFilterBox.Name = "HttpSpyFilterBox"
            HttpSpyFilterBox.Size = UDim2.new(0.5, 0, 0.7, 0)
            HttpSpyFilterBox.Position = UDim2.new(0.5, -100, 0.15, 0)
            HttpSpyFilterBox.PlaceholderText = "Filter requests..."
            HttpSpyFilterBox.Text = ""
            HttpSpyFilterBox.Font = Enum.Font.Gotham
            HttpSpyFilterBox.TextSize = 12
            HttpSpyFilterBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            HttpSpyFilterBox.TextColor3 = Color3.fromRGB(220, 220, 220)
            HttpSpyFilterBox.BorderSizePixel = 0
            HttpSpyFilterBox.Parent = HttpSpyControlBar

            local HttpSpyUICornerFilter = Instance.new("UICorner")
            HttpSpyUICornerFilter.CornerRadius = UDim.new(0, 4)
            HttpSpyUICornerFilter.Parent = HttpSpyFilterBox

            -- Request Counter
            local HttpSpyRequestCount = Instance.new("TextLabel")
            HttpSpyRequestCount.Name = "HttpSpyRequestCount"
            HttpSpyRequestCount.Size = UDim2.new(0, 100, 1, 0)
            HttpSpyRequestCount.Position = UDim2.new(1, -110, 0, 0)
            HttpSpyRequestCount.Text = "Requests: 0"
            HttpSpyRequestCount.Font = Enum.Font.Gotham
            HttpSpyRequestCount.TextSize = 12
            HttpSpyRequestCount.BackgroundTransparency = 1
            HttpSpyRequestCount.TextColor3 = Color3.fromRGB(180, 180, 180)
            HttpSpyRequestCount.TextXAlignment = Enum.TextXAlignment.Right
            HttpSpyRequestCount.Parent = HttpSpyControlBar

            local requestCount = 0 -- This is local to HttpSpy's scope now
            local function updateRequestCount()
                requestCount = requestCount + 1
                HttpSpyRequestCount.Text = "Requests: " .. requestCount
            end

            -- Clear Button Logic
            pcall(function()
                HttpSpyClearButton.MouseButton1Click:Connect(function()
                    local children = HttpSpyLogsFrame:GetChildren() -- Target correct frame
                    for i = #children, 1, -1 do
                        local child = children[i]
                        if child:IsA("Frame") then
                            child:Destroy()
                        end
                    end
                    requestCount = 0
                    HttpSpyRequestCount.Text = "Requests: 0" -- Target correct label
                end)
            end)

            -- Enhanced printf function for GUI with error handling
            local function printf(text, isResponse)
                if options.SaveLogs then
                    pcall(function() append(logname, gsub(text, "%\27%[%d+m", "")) end)
                end

                if not options.GuiEnabled then return end -- Keep HttpSpy's internal toggle option

                local cleanText = text:gsub("\27%[[%d;]+m", "") -- Remove ANSI codes

                task.spawn(function()
                    pcall(function()
                        local logEntry = Instance.new("Frame")
                        logEntry.Size = UDim2.new(1, -10, 0, 0)
                        logEntry.Position = UDim2.new(0, 5, 0, 0)
                        logEntry.BackgroundTransparency = 1
                        logEntry.AutomaticSize = Enum.AutomaticSize.Y
                        logEntry.Parent = HttpSpyLogsFrame -- Target correct frame

                        local bg = Instance.new("Frame")
                        bg.Size = UDim2.new(1, 0, 1, 0)
                        bg.BackgroundColor3 = isResponse and Color3.fromRGB(30, 45, 30) or Color3.fromRGB(45, 30, 30)
                        bg.BackgroundTransparency = 0.9
                        bg.BorderSizePixel = 0
                        bg.Parent = logEntry

                        local corner = Instance.new("UICorner")
                        corner.CornerRadius = UDim.new(0, 6)
                        corner.Parent = bg

                        local copyButton = Instance.new("TextButton")
                        copyButton.Size = UDim2.new(0, 50, 0, 18)
                        copyButton.Position = UDim2.new(1, -55, 0, 5)
                        copyButton.Text = "Copy"
                        copyButton.Font = Enum.Font.Gotham
                        copyButton.TextSize = 11
                        copyButton.BackgroundColor3 = Color3.fromRGB(70, 70, 100)
                        copyButton.TextColor3 = Color3.fromRGB(220, 220, 220)
                        copyButton.BorderSizePixel = 0
                        copyButton.AutoButtonColor = false
                        copyButton.Parent = logEntry

                        local copyCorner = Instance.new("UICorner")
                        copyCorner.CornerRadius = UDim.new(0, 4)
                        copyCorner.Parent = copyButton

                        safeHover(copyButton, Color3.fromRGB(90, 90, 120), Color3.fromRGB(70, 70, 100))

                        pcall(function()
                            copyButton.MouseButton1Click:Connect(function()
                                setclipboard(cleanText)
                                copyButton.Text = "Copied!"
                                task.wait(1)
                                copyButton.Text = "Copy"
                            end)
                        end)

                        local label = Instance.new("TextLabel")
                        label.Size = UDim2.new(1, -60, 0, 0)
                        label.Position = UDim2.new(0, 10, 0, 5)
                        label.Text = cleanText
                        label.TextColor3 = Color3.fromRGB(240, 240, 240)
                        label.BackgroundTransparency = 1
                        label.TextXAlignment = Enum.TextXAlignment.Left
                        label.TextYAlignment = Enum.TextYAlignment.Top
                        label.TextWrapped = true
                        label.Font = Enum.Font.Code
                        label.TextSize = 13
                        label.AutomaticSize = Enum.AutomaticSize.Y
                        label.Parent = logEntry

                        local timeText = Instance.new("TextLabel")
                        timeText.Size = UDim2.new(1, -60, 0, 15)
                        timeText.Position = UDim2.new(0, 10, 1, -20)
                        timeText.Text = os.date("%H:%M:%S")
                        timeText.TextColor3 = Color3.fromRGB(180, 180, 180)
                        timeText.BackgroundTransparency = 1
                        timeText.TextXAlignment = Enum.TextXAlignment.Left
                        timeText.Font = Enum.Font.Gotham
                        timeText.TextSize = 10
                        timeText.Parent = logEntry

                        -- Auto-scroll if not filtering
                        if HttpSpyFilterBox.Text == "" then -- Target correct box
                            task.wait()
                            HttpSpyLogsFrame.CanvasPosition = Vector2.new(0, HttpSpyLogsFrame.AbsoluteCanvasSize.Y) -- Target correct frame
                        end

                        updateRequestCount()
                    end)
                end)
            end

            -- Fixed filter functionality with error handling
            pcall(function()
                HttpSpyFilterBox:GetPropertyChangedSignal("Text"):Connect(function() -- Target correct box
                    local filterText = string.lower(HttpSpyFilterBox.Text) -- Target correct box

                    for _, logEntry in ipairs(HttpSpyLogsFrame:GetChildren()) do -- Target correct frame
                        if logEntry:IsA("Frame") then
                            local label = logEntry:FindFirstChildOfClass("TextLabel")
                            if label and label.Text then
                                logEntry.Visible = filterText == "" or string.find(string.lower(label.Text), filterText, 1, true) ~= nil
                            end
                        end
                    end
                end)
            end)

            -- HttpSpy's Hooking Logic (Mostly unchanged)
            local function ConstantScan(constant)
                for i,v in Pairs(getgc(true)) do
                    if type(v) == "function" and islclosure(v) and getfenv(v).script == getfenv(saveinstance).script and table.find(debug.getconstants(v), constant) then
                        return v;
                    end;
                end;
            end;

            local function DeepClone(tbl, cloned)
                cloned = cloned or {};
                for i,v in Pairs(tbl) do
                    if Type(v) == "table" then cloned[i] = DeepClone(v); continue; end;
                    cloned[i] = v;
                end;
                return cloned;
            end;

            local __namecall, __request;
            __namecall = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
                local method = getnamecallmethod();
                if methods[method] then printf("game:"..method.."("..Serializer.FormatArguments(...)..")\n\n"); end;
                return __namecall(self, ...);
            end));

            __request = hookfunction(reqfunc, newcclosure(function(req)
                if Type(req) ~= "table" then return __request(req); end;
                local RequestData = DeepClone(req);
                if not httpSpyEnabled then return __request(req); end; -- Use renamed variable
                if Type(RequestData.Url) ~= "string" then return __request(req) end;
                if not options.ShowResponse then printf(libtype..".request("..Serializer.Serialize(RequestData)..")\n\n"); return __request(req); end;

                local t = crunning();
                cwrap(function()
                    if RequestData.Url and blocked[RequestData.Url] then printf(libtype..".request("..Serializer.Serialize(RequestData)..") -- blocked url\n\n"); return cresume(t, {}); end;
                    if RequestData.Url then local Host = string.match(RequestData.Url, "https?://(%w+.%w+)/"); if Host and proxied[Host] then RequestData.Url = gsub(RequestData.Url, Host, proxied[Host], 1); end; end;
                    OnRequest:Fire(RequestData);
                    local ok, ResponseData = Pcall(__request, RequestData);
                    if not ok then Error(ResponseData, 0); end;
                    local BackupData = {}; for i,v in Pairs(ResponseData) do BackupData[i] = v; end;
                    if BackupData.Headers and BackupData.Headers["Content-Type"] and match(BackupData.Headers["Content-Type"], "application/json") and options.AutoDecode then
                        local body = BackupData.Body; local ok, res = Pcall(game.HttpService.JSONDecode, game.HttpService, body); if ok then BackupData.Body = res; end;
                    end;
                    printf(libtype..".request("..Serializer.Serialize(RequestData)..")\n\n", false);
                    printf("Response Data: "..Serializer.Serialize(BackupData).."\n\n", true);
                    cresume(t, hooked[RequestData.Url] and hooked[RequestData.Url](ResponseData) or ResponseData);
                end)();
                return cyield();
            end));

            if request then replaceclosure(request, reqfunc); end;
            if syn and syn.websocket then local WsConnect, WsBackup = debug.getupvalue(syn.websocket.connect, 1); WsBackup = hookfunction(WsConnect, function(...) printf("syn.websocket.connect("..Serializer.FormatArguments(...)..")\n\n"); return WsBackup(...); end); end;
            if syn and syn.websocket then local HttpGet; HttpGet = hookfunction(getupvalue(ConstantScan("ZeZLm2hpvGJrD6OP8A3aEszPNEw8OxGb"), 2), function(self, ...) printf("game.HttpGet(game, "..Serializer.FormatArguments(...)..")\n\n"); return HttpGet(self, ...); end); local HttpPost; HttpPost = hookfunction(getupvalue(ConstantScan("gpGXBVpEoOOktZWoYECgAY31o0BlhOue"), 2), function(self, ...) printf("game.HttpPost(game, "..Serializer.FormatArguments(...)..")\n\n"); return HttpPost(self, ...); end); end

            for method, enabled in Pairs(methods) do if enabled then local b; b = hookfunction(game[method], newcclosure(function(self, ...) printf("game."..method.."(game, "..Serializer.FormatArguments(...)..")\n\n"); return b(self, ...); end)); end; end;

            -- Initialize with welcome message
            task.spawn(function()
                printf("HttpSpy "..httpSpyVersion.." \nChange Logs:\n\t"..RecentCommit.."\nLogs are automatically being saved to: "..(options.SaveLogs and logname or "(You aren't saving logs, enable SaveLogs if you want to save logs)").."\n\n")
            end)

            -- HttpSpy API (Functions remain mostly the same, but operate within Darkfire's env now)
            if not options.API then return end
            local API = {}
            API.OnRequest = OnRequest.Event
            function API:HookSynRequest(url, hook) hooked[url] = hook end
            function API:ProxyHost(host, proxy) proxied[host] = proxy end
            function API:RemoveProxy(host) if not proxied[host] then error("host isn't proxied", 0) end; proxied[host] = nil end
            function API:UnHookSynRequest(url) if not hooked[url] then error("url isn't hooked", 0) end; hooked[url] = nil end
            function API:BlockUrl(url) blocked[url] = true end
            function API:WhitelistUrl(url) blocked[url] = false end

            -- Enhanced GUI control (Targets HttpSpy's frame within Darkfire)
            function API:ToggleGui(visible)
                -- Note: This controls HttpSpy's *internal* enable flag, not Darkfire's main visibility.
                -- You might want to just remove this or link it to the HttpSpyToggleButton state.
                options.GuiEnabled = visible
                warn("HttpSpy API:ToggleGui called. Note: This doesn't control Darkfire visibility (F4).")
            end
            function API:SetGuiPosition(position) HttpSpyMainFrame.Position = position end -- Controls position *within* the page
            function API:SetGuiSize(size) HttpSpyMainFrame.Size = size end -- Controls size *within* the page

            return API -- Return the API table
        end)
        -- END OF MODIFIED HttpSpy CODE

        if not success then
            warn("HttpSpy Component Initialization Failed: "..tostring(err))
            if rconsoleprint then rconsoleprint("@@RED@@HttpSpy Component Error: "..tostring(err).."\n") end
            return nil, err -- Return nil and error on failure
        end
        return success -- Return the API table on success
    end

    -- Call the initialization function, passing the page frame as the parent
    local success, apiOrError = pcall(InitializeHttpSpy, HttpSpyPage_Creer)

    if not success then
        warn("Failed to initialize HttpSpy component:", apiOrError)
        local errorLabel = Instance.new("TextLabel", HttpSpyPage_Creer)
        errorLabel.Size = UDim2.new(1, -20, 0, 50)
        errorLabel.Position = UDim2.new(0, 10, 0, 50)
        errorLabel.Text = "Error loading HttpSpy: " .. tostring(apiOrError)
        errorLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        errorLabel.BackgroundTransparency = 1
        errorLabel.TextWrapped = true
        errorLabel.ZIndex = 10 -- Ensure error is visible
    else
        print("HttpSpy component initialized successfully inside Darkfire GUI.")
        -- You could store the API globally if needed: getgenv().HttpSpyAPI = apiOrError
    end

    pageInstances.HttpSpy = HttpSpyPage_Creer
    return HttpSpyPage_Creer
end -- Fin de CreerPageHttpSpy

CreerPageChatBypass = function()
    local C3_fromRGB_local_CreerChatBypass = cached_Color3_fromRGB
    if typeof(C3_fromRGB_local_CreerChatBypass) ~= "function" then warn("CreerPageChatBypass: C3_fromRGB_local_CreerChatBypass is nil!"); return nil end

    local ChatBypassPage_Creer = Instance.new("Frame"); ChatBypassPage_Creer.Name = "ChatBypassPage"; ChatBypassPage_Creer.Size = UDim2.new(1, 0, 1, 0); ChatBypassPage_Creer.BackgroundTransparency = 1; ChatBypassPage_Creer.Visible = false; ChatBypassPage_Creer.Parent = ContentFrame
    local ChatBypassTitle_Creer = Instance.new("TextLabel"); ChatBypassTitle_Creer.Name="ChatBypassTitle"; ChatBypassTitle_Creer.Size = UDim2.new(1, 0, 0, 40); ChatBypassTitle_Creer.Position = UDim2.new(0, 0, 0, 0); ChatBypassTitle_Creer.BackgroundTransparency = 1; ChatBypassTitle_Creer.Font = Enum.Font.GothamBlack; ChatBypassTitle_Creer.TextColor3 = C3_fromRGB_local_CreerChatBypass(0, 220, 255); ChatBypassTitle_Creer.TextSize = 20;
    ChatBypassTitle_Creer.Text = getText("tab_chatbypass") .. "  "; -- Ajout d'emojis si souhaité
    ChatBypassTitle_Creer.Parent = ChatBypassPage_Creer

    local ChatBypassScroll_Creer = Instance.new("ScrollingFrame"); ChatBypassScroll_Creer.Name = "ChatBypassScroll"; ChatBypassScroll_Creer.Size = UDim2.new(1, -10, 1, -50); ChatBypassScroll_Creer.Position = UDim2.new(0, 5, 0, 45); ChatBypassScroll_Creer.BackgroundTransparency = 1; ChatBypassScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, 0); ChatBypassScroll_Creer.ScrollBarThickness = 6; ChatBypassScroll_Creer.Parent = ChatBypassPage_Creer
    local ChatBypassListLayout_Creer = Instance.new("UIListLayout"); ChatBypassListLayout_Creer.Parent = ChatBypassScroll_Creer; ChatBypassListLayout_Creer.SortOrder = Enum.SortOrder.LayoutOrder; ChatBypassListLayout_Creer.Padding = UDim.new(0, 10)

    -- Section Saisie Message
    local InputSection_CreerBypass = createSection(ChatBypassScroll_Creer, "InputSection", "section_bypass_input", 120, 1, " ") -- Hauteur ajustée

    chatBypassTextBox = Instance.new("TextBox") -- Utilise la variable globale
    chatBypassTextBox.Name = "ChatBypassInput"; chatBypassTextBox.Size = UDim2.new(1, -10, 0, 35); chatBypassTextBox.Position = UDim2.new(0, 5, 0, 30); -- Position après titre de section
    chatBypassTextBox.BackgroundColor3 = currentSliderBgColor; chatBypassTextBox.TextColor3 = currentTextColor;
    chatBypassTextBox.PlaceholderText = getText("placeholder_bypass_message");
    chatBypassTextBox.PlaceholderColor3 = currentPlaceholderColor; chatBypassTextBox.Font = Enum.Font.SourceSans; -- Police SourceSans comme l'original
    chatBypassTextBox.TextSize = 16; chatBypassTextBox.ClearTextOnFocus = false; chatBypassTextBox.MultiLine = false; -- Single line input
    chatBypassTextBox.Parent = InputSection_CreerBypass
    local bypassInputCorner = Instance.new("UICorner", chatBypassTextBox); bypassInputCorner.CornerRadius = UDim.new(0, 6)

    local SendBypassButton_Creer = createButton(InputSection_CreerBypass, "SendBypassButton", "button_sendbypass", 1, function()
        if chatBypassTextBox then SendBypassMessage(chatBypassTextBox.Text) end
    end, " ", " ") -- Pas d'état on/off pour ce bouton
    SendBypassButton_Creer.Size = UDim2.new(1, -10, 0, 30)
    SendBypassButton_Creer.Position = UDim2.new(0, 5, 0, 75) -- Positionné sous la textbox

    -- Section Sélection Police
    local FontSection_CreerBypass = createSection(ChatBypassScroll_Creer, "FontSection", "section_bypass_fonts", 200, 2, " ") -- Hauteur suffisante pour le scroll

    local FontScrollFrame_CreerBypass = Instance.new("ScrollingFrame")
    FontScrollFrame_CreerBypass.Name = "FontSelectionScroll"; FontScrollFrame_CreerBypass.Size = UDim2.new(1, -10, 1, -35); -- Occupe l'espace de la section
    FontScrollFrame_CreerBypass.Position = UDim2.new(0, 5, 0, 30); -- Position après titre de section
    FontScrollFrame_CreerBypass.BackgroundColor3 = Color3.fromRGB(currentSliderBgColor.R*255*0.8, currentSliderBgColor.G*255*0.8, currentSliderBgColor.B*255*0.8); -- Fond légèrement différent
    FontScrollFrame_CreerBypass.BackgroundTransparency = 0.8; FontScrollFrame_CreerBypass.BorderSizePixel = 0; FontScrollFrame_CreerBypass.CanvasSize = UDim2.new(0, 0, 0, 0);
    FontScrollFrame_CreerBypass.ScrollBarThickness = 5; FontScrollFrame_CreerBypass.Parent = FontSection_CreerBypass
    local fontScrollCorner = Instance.new("UICorner", FontScrollFrame_CreerBypass); fontScrollCorner.CornerRadius = UDim.new(0, 4)

    local FontListLayout_CreerBypass = Instance.new("UIListLayout")
    FontListLayout_CreerBypass.Padding = UDim.new(0, 5); FontListLayout_CreerBypass.SortOrder = Enum.SortOrder.LayoutOrder; FontListLayout_CreerBypass.Parent = FontScrollFrame_CreerBypass

    chatBypassFontButtons = {} -- Réinitialiser la table des boutons
    chatBypassSelectedButton = nil
    local buttonColorDefault = currentSliderBgColor -- Utiliser la couleur du slider pour défaut
    local buttonColorSelected = currentButtonColor -- Utiliser la couleur du bouton pour sélection

    -- Créer les boutons de police
    local layoutOrderCounter_bypass = 0
    for fontName, _ in pairs(chatBypassFonts) do
        local fontButton = Instance.new("TextButton")
        fontButton.Name = fontName; fontButton.Size = UDim2.new(1, -4, 0, 30); -- Taille ajustée pour padding
        fontButton.Text = fontName; fontButton.TextColor3 = currentTextColor;
        fontButton.BackgroundColor3 = (fontName == chatBypassSelectedFontName) and buttonColorSelected or buttonColorDefault; -- Couleur initiale
        fontButton.Font = Enum.Font.SourceSans; fontButton.TextSize = 14;
        fontButton.LayoutOrder = layoutOrderCounter_bypass; fontButton.Parent = FontScrollFrame_CreerBypass
        fontButton.TextXAlignment = Enum.TextXAlignment.Left; Instance.new("UIPadding", fontButton).PaddingLeft = UDim.new(0, 5) -- Petit padding gauche pour le texte

        local btnCorner = Instance.new("UICorner", fontButton); btnCorner.CornerRadius = UDim.new(0, 4)

        chatBypassFontButtons[fontName] = fontButton
        if fontName == chatBypassSelectedFontName then chatBypassSelectedButton = fontButton end
        layoutOrderCounter_bypass = layoutOrderCounter_bypass + 1

        fontButton.MouseButton1Click:Connect(function()
            if chatBypassSelectedButton then
                chatBypassSelectedButton.BackgroundColor3 = buttonColorDefault -- Reset old color
            end
            chatBypassSelectedButton = fontButton
            fontButton.BackgroundColor3 = buttonColorSelected -- Set new color
            chatBypassSelectedFontName = fontName
            chatBypassSelectedFont = chatBypassFonts[fontName] -- Update global selected font table
            ShowNotification("notif_bypass_font_selected", fontName)
        end)
         addHoverEffect(fontButton) -- Appliquer l'effet de survol de Darkfire
    end

    -- Mise à jour CanvasSize
    local function updateFontScrollSize()
         if FontScrollFrame_CreerBypass and FontListLayout_CreerBypass and FontScrollFrame_CreerBypass.Parent and FontListLayout_CreerBypass.Parent then
             FontScrollFrame_CreerBypass.CanvasSize = UDim2.new(0, 0, 0, FontListLayout_CreerBypass.AbsoluteContentSize.Y + 5)
             FontSection_CreerBypass.Size = UDim2.new(1,0,0, FontListLayout_CreerBypass.AbsoluteContentSize.Y + 45) -- Ajuster taille section
         end
    end
    FontListLayout_CreerBypass:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateFontScrollSize)
    task.wait(0.05); updateFontScrollSize() -- Appel initial


    -- Mise à jour CanvasSize globale
    ChatBypassListLayout_Creer:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
         if ChatBypassScroll_Creer and ChatBypassListLayout_Creer and ChatBypassScroll_Creer.Parent and ChatBypassListLayout_Creer.Parent then
             ChatBypassScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, ChatBypassListLayout_Creer.AbsoluteContentSize.Y + 10)
         end
    end)
    task.wait(0.1)
    ChatBypassScroll_Creer.CanvasSize = UDim2.new(0, 0, 0, ChatBypassListLayout_Creer.AbsoluteContentSize.Y + 10)

    pageInstances.ChatBypass = ChatBypassPage_Creer
    return ChatBypassPage_Creer
end


CreerBoutonsOnglets = function(tabDefinitions) 
    tabButtons = {}; 
    if TabBar then
        for _, child in ipairs(TabBar:GetChildren()) do if child:IsA("TextButton") then child:Destroy() end end
        for i, def in ipairs(tabDefinitions) do
            translationKey_CreerOnglets = "tab_" .. string.lower(def.Name:gsub("%s", "")) 
            tb_CreerOnglets=Instance.new("TextButton"); tb_CreerOnglets.Name=def.Name.."TabButton"; tb_CreerOnglets.Size=UDim2.new(1,-10,0,40); tb_CreerOnglets.BackgroundColor3=currentTabColor; 
            tb_CreerOnglets.Text=getText(translationKey_CreerOnglets); 
            tb_CreerOnglets.TextColor3=currentTextColor; tb_CreerOnglets.Font = Enum.Font.GothamBlack; tb_CreerOnglets.TextSize=14; tb_CreerOnglets.TextScaled=true; tb_CreerOnglets.Parent=TabBar; tb_CreerOnglets.LayoutOrder=i; 
            tc_CreerOnglets=Instance.new("UICorner"); tc_CreerOnglets.CornerRadius=UDim.new(0,8); tc_CreerOnglets.Parent=tb_CreerOnglets; 
            tb_CreerOnglets.MouseButton1Click:Connect(function() switchTab(def.Name) end);
            addHoverEffect(tb_CreerOnglets);
            tabButtons[def.Name]=tb_CreerOnglets 
        end;
        task.wait();
        if TabListLayout then TabBar.CanvasSize=UDim2.new(0,0,0,TabListLayout.AbsoluteContentSize.Y+10) end
    end
end

refreshAllUITextLanguage = function()
    if not MainFrame then return end
    print("Refreshing UI Text for Language:", currentLanguage, "and Emojis:", guiShowTextEmojis)

    pcall(function()
        if TitleLabel then TitleLabel.Text = getText("gui_title") .. "  "; end
        if MinimizedButton then MinimizedButton.Text = getText("gui_minimized") .. "  "; end

        -- Rafraîchir les boutons d'onglets
        for name, button in pairs(tabButtons) do
            local translationKey_refreshUI_tabs = "tab_" .. string.lower(name:gsub("%s", ""))
            if name == "ChatBypass" then translationKey_refreshUI_tabs = "tab_chatbypass" end
            button.Text = getText(translationKey_refreshUI_tabs) -- Onglets n'ont pas d'état/emoji ici
        end

        -- Rafraîchir les titres des pages
        for pageName, page in pairs(pageInstances) do
            local titleLabel_refreshUI_pageTitle = page:FindFirstChild(pageName.."Title", false) or page:FindFirstChild("TitleLabel", false)
            if titleLabel_refreshUI_pageTitle and titleLabel_refreshUI_pageTitle:IsA("TextLabel") then
                local translationKey_refreshUI_pageTitle = "tab_" .. string.lower(pageName:gsub("%s", ""))
                if pageName == "ChatBypass" then translationKey_refreshUI_pageTitle = "tab_chatbypass" end

                local emoji_refreshUI_pageTitle = ""
                -- Emojis pour titres de page
                if pageName == "Home" then emoji_refreshUI_pageTitle = "🏠" -- Exemple
                elseif pageName == "Cheats" then emoji_refreshUI_pageTitle = "🎮" -- Exemple
                elseif pageName == "FlingTools" then emoji_refreshUI_pageTitle = "💥" -- Exemple
                elseif pageName == "ChatSpy" then emoji_refreshUI_pageTitle = "👀" -- Exemple
                elseif pageName == "ChatBypass" then emoji_refreshUI_pageTitle = "💬" -- Exemple
                elseif pageName == "Executor" then emoji_refreshUI_pageTitle = "⚙️" -- Exemple
                elseif pageName == "Graphics" then emoji_refreshUI_pageTitle = "🎨" -- Exemple
                elseif pageName == "Console" then emoji_refreshUI_pageTitle = "📄" -- Exemple
                elseif pageName == "Keyboard" then emoji_refreshUI_pageTitle = "⌨️" -- Exemple
                elseif pageName == "Misc" then emoji_refreshUI_pageTitle = "🔧" -- Exemple
                elseif pageName == "MiscFeatures" then emoji_refreshUI_pageTitle = "💡" -- Exemple
                elseif pageName == "Settings" then emoji_refreshUI_pageTitle = "⚙️" -- Exemple
                elseif pageName == "VersionHistory" then emoji_refreshUI_pageTitle = "📜" -- Exemple
                end
                titleLabel_refreshUI_pageTitle.Text = getText(translationKey_refreshUI_pageTitle) .. " " .. emoji_refreshUI_pageTitle
            end
        end

        -- Rafraîchir les titres des sections
        for _, section in ipairs(MainFrame:GetDescendants()) do
            if section:IsA("Frame") and section.Name:match("Section$") then
                 local titleLabel_refreshUI_section = section:FindFirstChild(section.Name.."Title")
                 if titleLabel_refreshUI_section and titleLabel_refreshUI_section:IsA("TextLabel") then
                      local baseName_refreshUI_section = section.Name:gsub("Section$","")
                      local translationKey_refreshUI_section = ""
                      local emoji_refreshUI_section = ""

                      if section.Name == "InputSection" then
                          translationKey_refreshUI_section = "section_bypass_input"; emoji_refreshUI_section = "⌨️" -- Exemple
                      elseif section.Name == "FontSection" then
                          translationKey_refreshUI_section = "section_bypass_fonts"; emoji_refreshUI_section = "✒️" -- Exemple
                      else
                           translationKey_refreshUI_section = "section_" .. baseName_refreshUI_section:lower():gsub("%s", "_")
                           translationKey_refreshUI_section = translationKey_refreshUI_section
                                :gsub("actionsection1","tp_fling")
                                :gsub("actionsectionplayer","player_actions")
                                :gsub("actionsection2","combat_visuals")
                                :gsub("actionsection3","misc_actions")
                                :gsub("combatvisualssection","combat_visuals")
                                :gsub("miscactionssection","misc_actions")
                                :gsub("workspaceutilssection","workspace_utils")
                                :gsub("uicustomizationsection","ui_custom")
                                :gsub("visualsettingssection","visual_settings")
                                :gsub("appearancesection","appearance")
                                :gsub("configsection","config")
                                :gsub("advancedmovementsection","advanced_movement")
                                :gsub("funvisualssection","fun_visuals")
                                :gsub("otherutilssection","other_utilities")
                                :gsub("funmovementsection","fun_movement")
                                :gsub("playerinteractionsection","player_interaction")
                                :gsub("webhooksection","webhook")
                                :gsub("visualeffectssection","visual_effects")
                                :gsub("environmentsection","environment")
                                :gsub("chatspylogsection", "chat_log")

                           -- Emojis pour titres de section
                           if section.Name == "MovementSection" then emoji_refreshUI_section = "🏃"
                           elseif section.Name == "AdvMovementSection" then emoji_refreshUI_section = "🤸"
                           elseif section.Name == "FunMovementSection" then emoji_refreshUI_section = "🤪"
                           elseif section.Name == "VisualSection" then emoji_refreshUI_section = "👁️"
                           elseif section.Name == "FunVisualsSection" then emoji_refreshUI_section = "✨"
                           elseif section.Name == "CombatVisualsSection" then emoji_refreshUI_section = "⚔️"
                           elseif section.Name == "PlayerInteractionSection" then emoji_refreshUI_section = "🤝"
                           elseif section.Name == "MiscActionsSection" then emoji_refreshUI_section = "⚙️"
                           elseif section.Name == "GravitySection" then emoji_refreshUI_section = "🌍"
                           elseif section.Name == "PlayerTargetSection" then emoji_refreshUI_section = "🎯"
                           elseif section.Name == "ActionSection1" then emoji_refreshUI_section = "🚀"
                           elseif section.Name == "ActionSectionPlayer" then emoji_refreshUI_section = "👤"
                           elseif section.Name == "ActionSection2" then emoji_refreshUI_section = "⚔️"
                           elseif section.Name == "ActionSection3" then emoji_refreshUI_section = "⚙️"
                           elseif section.Name == "ServerSection" then emoji_refreshUI_section = "🌐"
                           elseif section.Name == "UtilitySection" then emoji_refreshUI_section = "🛠️"
                           elseif section.Name == "OtherUtilsSection" then emoji_refreshUI_section = "📎"
                           elseif section.Name == "SkyboxSection" then emoji_refreshUI_section = "🌌"
                           elseif section.Name == "WorkspaceUtilsSection" then emoji_refreshUI_section = "🧹"
                           elseif section.Name == "InfoSection" then emoji_refreshUI_section = "ℹ️"
                           elseif section.Name == "UiSection" then emoji_refreshUI_section = "🖱️"
                           elseif section.Name == "VisualSettingsSection" then emoji_refreshUI_section = "👓"
                           elseif section.Name == "EffectsSection" then emoji_refreshUI_section = "✨"
                           elseif section.Name == "EnvironmentSection" then emoji_refreshUI_section = "🌳"
                           elseif section.Name == "ThemeSection" then emoji_refreshUI_section = "🎨"
                           elseif section.Name == "AppearanceSection" then emoji_refreshUI_section = "💅"
                           elseif section.Name == "ConfigSection" then emoji_refreshUI_section = "💾"
                           elseif section.Name == "WebhookSection" then emoji_refreshUI_section = "🔗"
                           elseif section.Name == "ChatSpyLogSection" then emoji_refreshUI_section = "📜"
                           end
                      end

                      if translationKey_refreshUI_section ~= "" then
                          if section.Name == "ActionSection2" then translationKey_refreshUI_section = "section_combat_visuals" end
                          if section.Name == "ActionSection3" then translationKey_refreshUI_section = "section_misc_actions" end
                          titleLabel_refreshUI_section.Text = getText(translationKey_refreshUI_section) .. " " .. emoji_refreshUI_section
                      end
                 end
            end
        end

        -- Rafraîchir les labels, placeholders et boutons spécifiques
        if MainFrame then
             -- --- Labels & Placeholders ---
             local speedLbl_refreshUI = MainFrame:FindFirstChild("SpeedLabel", true); if speedLbl_refreshUI then speedLbl_refreshUI.Text = getText("label_speed") end
             local jumpLbl_refreshUI = MainFrame:FindFirstChild("JumpLabel", true); if jumpLbl_refreshUI then jumpLbl_refreshUI.Text = getText("label_jump") end
             local fovLbl_refreshUI = MainFrame:FindFirstChild("FOVLabel", true); if fovLbl_refreshUI then fovLbl_refreshUI.Text = getText("label_fov") end
             local flySpdLbl_refreshUI = MainFrame:FindFirstChild("FlySpeedLabel", true); if flySpdLbl_refreshUI then flySpdLbl_refreshUI.Text = getText("label_flyspeed") end
             local gravLbl_refreshUI = MainFrame:FindFirstChild("GravityLabel", true); if gravLbl_refreshUI then gravLbl_refreshUI.Text = getText("label_gravity") end
             local spamTxtLbl_refreshUI = MainFrame:FindFirstChild("ChatSpamLabel", true); if spamTxtLbl_refreshUI then spamTxtLbl_refreshUI.Text = getText("label_spamtext") end
             local spamDelayLbl_refreshUI = MainFrame:FindFirstChild("ChatSpamDelayLabel", true); if spamDelayLbl_refreshUI then spamDelayLbl_refreshUI.Text = getText("label_spamdelay") end
             local targetInput_refreshUI = FlingToolsPlayerInputBox; if targetInput_refreshUI then targetInput_refreshUI.PlaceholderText = getText("label_target_placeholder") end
             if FlingToolsDebugLabel then
                 if FlingToolsDebugLabel.Text ~= getText("label_target_notfound") then FlingToolsDebugLabel.Text = getText("label_target_info") end
             end
             local fpsLblText_refreshUI = MainFrame:FindFirstChild("FPSLabelText", true); if fpsLblText_refreshUI then fpsLblText_refreshUI.Text = getText("label_fps") end
             local skyboxLbl_refreshUI = MainFrame:FindFirstChild("SkyboxLabel", true); if skyboxLbl_refreshUI then skyboxLbl_refreshUI.Text = getText("label_skyboxid") end
             local transLbl_refreshUI = MainFrame:FindFirstChild("TransparencyLabel", true); if transLbl_refreshUI then transLbl_refreshUI.Text = getText("label_transparency") end
             local neonLbl_refreshUI = MainFrame:FindFirstChild("NeonToggleLabel", true); if neonLbl_refreshUI then neonLbl_refreshUI.Text = getText("label_neon") end
             local emojiLbl_refreshUI = MainFrame:FindFirstChild("ShowEmojisLabel", true); if emojiLbl_refreshUI then emojiLbl_refreshUI.Text = getText("label_showemojis") end
             local resetLbl_refreshUI = MainFrame:FindFirstChild("ResetOnDeathLabel", true); if resetLbl_refreshUI then resetLbl_refreshUI.Text = getText("label_resetondeath") end
             local transLbl_refreshUI_2 = MainFrame:FindFirstChild("TranslateLabel", true); if transLbl_refreshUI_2 then transLbl_refreshUI_2.Text = getText("label_translate") end
             local uiScaleLbl_refreshUI = MainFrame:FindFirstChild("UiScaleLabel", true); if uiScaleLbl_refreshUI then uiScaleLbl_refreshUI.Text = getText("label_uiscale") end
             local shadowLbl_refreshUI = MainFrame:FindFirstChild("ShadowLabel", true); if shadowLbl_refreshUI then shadowLbl_refreshUI.Text = getText("label_shadows") end
             local execInput_refreshUI = scriptExecutorInput; if execInput_refreshUI then execInput_refreshUI.PlaceholderText = getText("placeholder_executor") end
             local spamInput_refreshUI = MainFrame:FindFirstChild("ChatSpamInput", true); if spamInput_refreshUI then spamInput_refreshUI.PlaceholderText = getText("placeholder_chatspam") end
             local speedMultiLbl_refreshUI = MainFrame:FindFirstChild("SpeedMultiLabel", true); if speedMultiLbl_refreshUI then speedMultiLbl_refreshUI.Text = getText("label_speedmulti") end
             local jumpMultiLbl_refreshUI = MainFrame:FindFirstChild("JumpMultiLabel", true); if jumpMultiLbl_refreshUI then jumpMultiLbl_refreshUI.Text = getText("label_jumpmulti") end
             local brightLbl_refreshUI = MainFrame:FindFirstChild("BrightnessLabel", true); if brightLbl_refreshUI then brightLbl_refreshUI.Text = getText("label_brightness") end
             local espBoxLbl_refreshUI = MainFrame:FindFirstChild("ESPBoxLabel", true); if espBoxLbl_refreshUI then espBoxLbl_refreshUI.Text = getText("label_espboxstyle") end
             local userIdLbl_refreshUI = MainFrame:FindFirstChild("UserIDLabel", true); if userIdLbl_refreshUI then userIdLbl_refreshUI.Text = getText("label_userid") end
             local webhookUrlLbl_refreshUI = MainFrame:FindFirstChild("WebhookUrlLabel", true); if webhookUrlLbl_refreshUI then webhookUrlLbl_refreshUI.Text = getText("label_webhookurl") end
             local webhookMsgLbl_refreshUI = MainFrame:FindFirstChild("WebhookMsgLabel", true); if webhookMsgLbl_refreshUI then webhookMsgLbl_refreshUI.Text = getText("label_webhookmsg") end
             local espBoxSizeLbl_refreshUI = MainFrame:FindFirstChild("ESPBoxSizeLabel", true); if espBoxSizeLbl_refreshUI then espBoxSizeLbl_refreshUI.Text = getText("label_espboxsize") end
             local charScaleLbl_refreshUI = MainFrame:FindFirstChild("CharScaleLabel", true); if charScaleLbl_refreshUI then charScaleLbl_refreshUI.Text = getText("label_charscale") end
             if userIdInput then userIdInput.PlaceholderText = getText("placeholder_userid") end
             if webhookUrlInput then webhookUrlInput.PlaceholderText = getText("placeholder_webhookurl") end
             if webhookMessageInput then webhookMessageInput.PlaceholderText = getText("placeholder_webhookmsg") end
             if chatBypassTextBox then chatBypassTextBox.PlaceholderText = getText("placeholder_bypass_message") end

             -- --- Boutons Toggle (avec états ET emojis ON/OFF distincts) ---
             local flyBtn_refreshUI = MainFrame:FindFirstChild("FlyButton", true); if flyBtn_refreshUI then flyBtn_refreshUI.Text = getText("button_fly", isFlying, "✈️", " ") end
             local noclipBtn_refreshUI = MainFrame:FindFirstChild("NoclipButton", true); if noclipBtn_refreshUI then noclipBtn_refreshUI.Text = getText("button_noclip", isNoclip, "👻", " ") end
             local freezeBtn_refreshUI = FlingToolsOtherButtons["Freeze"]; if freezeBtn_refreshUI then freezeBtn_refreshUI.Text = getText("button_freeze", isFrozen, "❄️", " ") end
             local infJumpBtn_refreshUI = MainFrame:FindFirstChild("InfiniteJumpButton", true); if infJumpBtn_refreshUI then infJumpBtn_refreshUI.Text = getText("button_infjump", infiniteJumpEnabled, "⬆️", " ") end
             local wowBtn_refreshUI = MainFrame:FindFirstChild("WalkOnWaterButton", true); if wowBtn_refreshUI then wowBtn_refreshUI.Text = getText("button_walkwater", walkOnWaterEnabled, "💧", " ") end
             local irBtn_refreshUI = MainFrame:FindFirstChild("InstantRespawnButton", true); if irBtn_refreshUI then irBtn_refreshUI.Text = getText("button_instaspawn", instantRespawnEnabled, "⚡", " ") end
             local gmBtn_refreshUI = MainFrame:FindFirstChild("GodModeButton", true); if gmBtn_refreshUI then gmBtn_refreshUI.Text = getText("button_godmode", godModeEnabled, "👑", " ") end
             local isBtn_refreshUI = MainFrame:FindFirstChild("InfiniteStaminaButton", true); if isBtn_refreshUI then isBtn_refreshUI.Text = getText("button_infstamina", infiniteStaminaEnabled, "🏃", " ") end
             local phaseBtn_refreshUI = MainFrame:FindFirstChild("PhaseButton", true); if phaseBtn_refreshUI then phaseBtn_refreshUI.Text = getText("button_phase", phaseEnabled, "🧱", " ") end
             local rfBtn_refreshUI = MainFrame:FindFirstChild("RemoveFogButton", true); if rfBtn_refreshUI then rfBtn_refreshUI.Text = getText("button_remfog", removeFogEnabled, "☀️", "🌫️") end
             local espBtn_refreshUI = FlingToolsOtherButtons["ESP"]; if espBtn_refreshUI then espBtn_refreshUI.Text = getText("button_esp", espScriptEnabled, "👀", " ") end
             local trackBtn_refreshUI = FlingToolsOtherButtons["Track"]; if trackBtn_refreshUI then trackBtn_refreshUI.Text = getText("button_track", aimbotActive, "🎯", " ") end
             local aimBtn_refreshUI = FlingToolsOtherButtons["Aimbot"]; if aimBtn_refreshUI then aimBtn_refreshUI.Text = getText("button_aimbot", aimbotEnabled, "瞄", " ") end
             local specBtn_refreshUI = FlingToolsOtherButtons["Spectate"]; if specBtn_refreshUI then specBtn_refreshUI.Text = getText("button_spectate", isSpectating, "👁️", " ") end
             local tptmBtn_refreshUI = FlingToolsOtherButtons["TPToMouse"]; if tptmBtn_refreshUI then tptmBtn_refreshUI.Text = getText("button_tpmouse", tpToMouseEnabled, "🖱️", " ") end
             local orbitBtn_refreshUI = FlingToolsOtherButtons["Orbit"]; if orbitBtn_refreshUI then orbitBtn_refreshUI.Text = getText("button_orbit", orbitEnabled, "💫", " ") end
             local attachBtn_refreshUI = FlingToolsOtherButtons["Attach"]; if attachBtn_refreshUI then attachBtn_refreshUI.Text = getText("button_attach", attachEnabled, "📎", " ") end
             local carBtn_refreshUI = FlingToolsOtherButtons["Car"]; if carBtn_refreshUI then carBtn_refreshUI.Text = getText("button_car", carToggleActivated, "🚗", " ") end
             local kbBtn_refreshUI = FlingToolsOtherButtons["KillBrick"]; if kbBtn_refreshUI then kbBtn_refreshUI.Text = getText("button_killbrick", not killBrickNega, "☠️", " ") end
             local invisBtn_refreshUI = FlingToolsOtherButtons["Invisible"]; if invisBtn_refreshUI then invisBtn_refreshUI.Text = getText("button_invisible", invis_on, "⚪", "⚫") end
             local slBtn_refreshUI = FlingToolsOtherButtons["ShiftLock"]; if slBtn_refreshUI then slBtn_refreshUI.Text = getText("button_shiftlock", (ShiftLockActive and ShiftLockActive.Connected), "🔒", " ") end
             local rotBtn_refreshUI = FlingToolsOtherButtons["Rotate"]; if rotBtn_refreshUI then rotBtn_refreshUI.Text = getText("button_rotate", rotating, "🔄", " ") end
             local afkBtn_refreshUI = FlingToolsOtherButtons["AntiAfk"]; if afkBtn_refreshUI then afkBtn_refreshUI.Text = getText("button_antiafk", antiAfkEnabled, "🚫", " ") end
             local chBtn_refreshUI = FlingToolsOtherButtons["Crosshair"]; if chBtn_refreshUI then chBtn_refreshUI.Text = getText("button_crosshair", crosshairEnabled, "➕", " ") end
             local siBtn_refreshUI = MainFrame:FindFirstChild("ServerInfoButton", true); if siBtn_refreshUI then siBtn_refreshUI.Text = getText("button_serverinfo", serverInfoVisible, "ℹ️", " ") end
             local neonBtn_refreshUI = NeonToggleButton; if neonBtn_refreshUI then neonBtn_refreshUI.Text = getText("label_neon", isNeonActive, "💡", " ") end
             local emojiBtn_refreshUI = ShowEmojisButton; if emojiBtn_refreshUI then emojiBtn_refreshUI.Text = getText("label_showemojis", guiShowTextEmojis, "✅", "❌") end
             local resetBtn_refreshUI = ResetOnDeathButton; if resetBtn_refreshUI then resetBtn_refreshUI.Text = getText("label_resetondeath", resetCheatsOnDeathEnabled, "🔄", " ") end
             local transBtn_refreshUI = TranslateButton; if transBtn_refreshUI then transBtn_refreshUI.Text = getText("label_translate", nil, (currentLanguage == "EN" and "🇬🇧" or "🇫🇷")) end -- Pas d'état on/off mais emoji
             local fbBtnG_refreshUI = FlingToolsOtherButtons["FullBrightGraphics"]; if fbBtnG_refreshUI then fbBtnG_refreshUI.Text = getText("button_fullbright", fullBrightEnabled, "🔆", " ") end
             local csBtn_refreshUI = MainFrame:FindFirstChild("ChatSpamButton", true); if csBtn_refreshUI then csBtn_refreshUI.Text = getText("button_spam", chatSpamEnabled, "💬", " ") end
             local ncsBtn_refreshUI = FlingToolsOtherButtons["Noclip"]; if ncsBtn_refreshUI then ncsBtn_refreshUI.Text = getText("button_noclip", not noclipClipon, "👻", " ") end -- Utilise la variable de NoclipSimple
             local spiderBtn_refreshUI = MainFrame:FindFirstChild("SpiderButton", true); if spiderBtn_refreshUI then spiderBtn_refreshUI.Text = getText("button_spider", spiderEnabled, "🕷️", " ") end
             local jfBtn_refreshUI = MainFrame:FindFirstChild("JesusFlyButton", true); if jfBtn_refreshUI then jfBtn_refreshUI.Text = getText("button_jesusfly", jesusFlyEnabled, "🚶", " ") end
             local tracersBtn_refreshUI = MainFrame:FindFirstChild("TracersButton", true); if tracersBtn_refreshUI then tracersBtn_refreshUI.Text = getText("button_tracers", tracersEnabled, "📏", " ") end
             local noArmsBtn_refreshUI = MainFrame:FindFirstChild("NoArmsButton", true); if noArmsBtn_refreshUI then noArmsBtn_refreshUI.Text = getText("button_noarms", noArmsEnabled, "🤷", " ") end
             local noLegsBtn_refreshUI = MainFrame:FindFirstChild("NoLegsButton", true); if noLegsBtn_refreshUI then noLegsBtn_refreshUI.Text = getText("button_nolegs", noLegsEnabled, "🧍", " ") end
             local rainbowBtn_refreshUI = MainFrame:FindFirstChild("RainbowCharButton", true); if rainbowBtn_refreshUI then rainbowBtn_refreshUI.Text = getText("button_rainbowchar", rainbowCharEnabled, "🌈", " ") end
             local wallWalkBtn_refreshUI = MainFrame:FindFirstChild("WallWalkButton", true); if wallWalkBtn_refreshUI then wallWalkBtn_refreshUI.Text = getText("button_wallwalk", wallWalkEnabled, "🧗", " ") end
             local tpToolBtn_refreshUI = MainFrame:FindFirstChild("TeleportToolButton", true); if tpToolBtn_refreshUI then tpToolBtn_refreshUI.Text = getText("button_tptool", teleportToolEnabled, "🖱️", " ") end
             local lowGravBtn_refreshUI = MainFrame:FindFirstChild("LowGravityButton", true); if lowGravBtn_refreshUI then lowGravBtn_refreshUI.Text = getText("button_lowgravity", lowGravityEnabled, "🎈", " ") end
             local bhopBtn_refreshUI = MainFrame:FindFirstChild("BunnyHopButton", true); if bhopBtn_refreshUI then bhopBtn_refreshUI.Text = getText("button_bhop", bhopEnabled, "🐇", " ") end
             local autoClickBtn_refreshUI = FlingToolsOtherButtons["AutoClicker"]; if autoClickBtn_refreshUI then autoClickBtn_refreshUI.Text = getText("button_autoclicker", autoClickerEnabled, "🖱️", " ") end
             local antiVoidBtn_refreshUI = MainFrame:FindFirstChild("AntiVoidButton", true); if antiVoidBtn_refreshUI then antiVoidBtn_refreshUI.Text = getText("button_antivoid", antiVoidEnabled, "🛡️", " ") end
             local remFogV2Btn_refreshUI = MainFrame:FindFirstChild("RemoveFogV2Button", true); if remFogV2Btn_refreshUI then remFogV2Btn_refreshUI.Text = getText("button_remfogv2", removeFogV2Enabled, "☀️", "🌫️") end
             local autoRespBtn_refreshUI = FlingToolsOtherButtons["AutoRespawn"]; if autoRespBtn_refreshUI then autoRespBtn_refreshUI.Text = getText("button_autorespawn", autoRespawnEnabled, "🔄", " ") end
             local walkOnAirBtn_refreshUI = FlingToolsOtherButtons["WalkOnAir"]; if walkOnAirBtn_refreshUI then walkOnAirBtn_refreshUI.Text = getText("button_walkonair", walkOnAirEnabled, "💨", " ") end
             local platStandBtn_refreshUI = FlingToolsOtherButtons["PlatformStand"]; if platStandBtn_refreshUI then platStandBtn_refreshUI.Text = getText("button_platformstand", platformStandEnabled, "🧍", " ") end
             local spinPlayerBtn_refreshUI = MainFrame:FindFirstChild("SpinPlayerButton", true); if spinPlayerBtn_refreshUI then spinPlayerBtn_refreshUI.Text = getText("button_spinplayer", spinPlayerEnabled, "💫", " ") end
             local headlessBtn_refreshUI = MainFrame:FindFirstChild("HeadlessButton", true); if headlessBtn_refreshUI then headlessBtn_refreshUI.Text = getText("button_headless", headlessEnabled, "🚫", "👤") end
             local freezeCamBtn_refreshUI = MainFrame:FindFirstChild("FreezeCamButton", true); if freezeCamBtn_refreshUI then freezeCamBtn_refreshUI.Text = getText("button_freezecam", freezeCamEnabled, "🥶", "📷") end
             local cartoonOutlineBtn_refreshUI = FlingToolsOtherButtons["CartoonOutline"]; if cartoonOutlineBtn_refreshUI then cartoonOutlineBtn_refreshUI.Text = getText("button_cartoonoutline", cartoonOutlineEnabled, "✏️", " ") end
             local invertColorsBtn_refreshUI = FlingToolsOtherButtons["InvertColors"]; if invertColorsBtn_refreshUI then invertColorsBtn_refreshUI.Text = getText("button_invertcolors", invertColorsEnabled, "🎨", " ") end
             local bloomBtn_refreshUI = FlingToolsOtherButtons["Bloom"]; if bloomBtn_refreshUI then bloomBtn_refreshUI.Text = getText("button_bloom", bloomEnabled, "✨", " ") end
             local ragdollBtn_refreshUI = MainFrame:FindFirstChild("RagdollButton", true); if ragdollBtn_refreshUI then ragdollBtn_refreshUI.Text = getText("button_ragdoll", ragdollEnabled, "🤸", "🧍") end
             local floatUpBtn_refreshUI = MainFrame:FindFirstChild("FloatUpButton", true); if floatUpBtn_refreshUI then floatUpBtn_refreshUI.Text = getText("button_floatup", floatUpEnabled, "🎈", " ") end
             local upsideDownBtn_refreshUI = MainFrame:FindFirstChild("UpsideDownButton", true); if upsideDownBtn_refreshUI then upsideDownBtn_refreshUI.Text = getText("button_upsidedown", upsideDownEnabled, "🙃", " ") end
             local noFaceBtn_refreshUI = MainFrame:FindFirstChild("NoFaceButton", true); if noFaceBtn_refreshUI then noFaceBtn_refreshUI.Text = getText("button_noface", noFaceEnabled, "🚫", "😊") end
             local forceFieldBtn_refreshUI = MainFrame:FindFirstChild("ForceFieldButton", true); if forceFieldBtn_refreshUI then forceFieldBtn_refreshUI.Text = getText("button_forcefield", forceFieldEnabled, "🛡️", " ") end
             local dofBtn_refreshUI = FlingToolsOtherButtons["DepthOfField"]; if dofBtn_refreshUI then dofBtn_refreshUI.Text = getText("button_depthoffield", depthOfFieldEnabled, "📷", " ") end
             local sunRaysBtn_refreshUI = FlingToolsOtherButtons["SunRays"]; if sunRaysBtn_refreshUI then sunRaysBtn_refreshUI.Text = getText("button_sunrays", sunRaysEnabled, "☀️", " ") end
             local blurBtn_refreshUI = FlingToolsOtherButtons["Blur"]; if blurBtn_refreshUI then blurBtn_refreshUI.Text = getText("button_blur", blurEnabled, "💧", " ") end
             local neonWorldBtn_refreshUI = FlingToolsOtherButtons["NeonWorld"]; if neonWorldBtn_refreshUI then neonWorldBtn_refreshUI.Text = getText("button_neonworld", neonWorldEnabled, "💡", " ") end
             local coloredFogBtn_refreshUI = FlingToolsOtherButtons["ColoredFog"]; if coloredFogBtn_refreshUI then coloredFogBtn_refreshUI.Text = getText("button_coloredfog", coloredFogEnabled, "🌫️", " ") end
             local parrotBtn_refreshUI = MainFrame:FindFirstChild("ChatSpyParrotButton", true); if parrotBtn_refreshUI then parrotBtn_refreshUI.Text = getText("button_parrot", chatSpyParrotEnabled, "🦜", " ") end
             local logLocalBtn_refreshUI = MainFrame:FindFirstChild("ChatSpyLogButton", true); if logLocalBtn_refreshUI then logLocalBtn_refreshUI.Text = getText("button_loglocal", chatSpyLoggingEnabled, "📜", " ") end


             -- --- Boutons d'action simple (sans état/emoji spécifique dans le texte principal) ---
             local bringBtn_refreshUI = FlingToolsBringButton; if bringBtn_refreshUI then bringBtn_refreshUI.Text = getText(bringing and "button_bringing" or "button_bring") end -- Texte change mais pas d'emoji on/off
             local rejoinBtn_refreshUI = MainFrame:FindFirstChild("RejoinButton", true); if rejoinBtn_refreshUI then rejoinBtn_refreshUI.Text = getText("button_rejoin", nil, " ") end
             local hopBtn_refreshUI = MainFrame:FindFirstChild("ServerHopButton", true); if hopBtn_refreshUI then hopBtn_refreshUI.Text = getText("button_serverhop", nil, "  ") end
             local hopSmallestBtn_refreshUI = MainFrame:FindFirstChild("HopSmallestButton", true); if hopSmallestBtn_refreshUI then hopSmallestBtn_refreshUI.Text = getText("button_hopsmallest", nil, " ") end
             local clearConsoleBtn_refreshUI = MainFrame:FindFirstChild("ClearConsoleButton", true); if clearConsoleBtn_refreshUI then clearConsoleBtn_refreshUI.Text = getText("button_clearconsole", nil, " ") end
             local getSpeedBtn_refreshUI = MainFrame:FindFirstChild("GetSpeedButton", true); if getSpeedBtn_refreshUI then getSpeedBtn_refreshUI.Text = getText("button_getspeed", nil, " ") end
             local rdBtn_refreshUI = MainFrame:FindFirstChild("RemoveDebrisButton", true); if rdBtn_refreshUI then rdBtn_refreshUI.Text = getText("button_removedebris", nil, "  ") end
             local cwBtn_refreshUI = MainFrame:FindFirstChild("ClearWorkspaceButton", true); if cwBtn_refreshUI then cwBtn_refreshUI.Text = getText("button_clearworkspace", nil, " ") end
             local skyBtn_refreshUI = MainFrame:FindFirstChild("ApplySkyboxButton", true); if skyBtn_refreshUI then skyBtn_refreshUI.Text = getText("button_set", nil, " ") end
             local resetAllBtn_refreshUI = MainFrame:FindFirstChild("ResetAllButton", true); if resetAllBtn_refreshUI then resetAllBtn_refreshUI.Text = getText("button_resetall", nil, " ") end
             local copyAllBtn_refreshUI = MainFrame:FindFirstChild("CopyAllButton", true); if copyAllBtn_refreshUI then copyAllBtn_refreshUI.Text = getText("button_copyall", nil, " ") end
             local execBtn_refreshUI = MainFrame:FindFirstChild("ExecuteScriptButton", true); if execBtn_refreshUI then execBtn_refreshUI.Text = getText("button_execute", nil, "  ") end
             local pasteBtn_refreshUI = MainFrame:FindFirstChild("PasteScriptButton", true); if pasteBtn_refreshUI then pasteBtn_refreshUI.Text = getText("button_paste", nil, " ") end
             local clearBtn_refreshUI = MainFrame:FindFirstChild("ClearScriptButton", true); if clearBtn_refreshUI then clearBtn_refreshUI.Text = getText("button_clear", nil, " ") end
             local saveClipBtn_refreshUI = MainFrame:FindFirstChild("SaveConfigButton", true); if saveClipBtn_refreshUI then saveClipBtn_refreshUI.Text = getText("button_saveclip", nil, " ") end
             local loadClipBtn_refreshUI = MainFrame:FindFirstChild("LoadConfigButton", true); if loadClipBtn_refreshUI then loadClipBtn_refreshUI.Text = getText("button_loadclip", nil, " ") end
             local saveFileBtn_refreshUI = MainFrame:FindFirstChild("SaveConfigToFileButton", true); if saveFileBtn_refreshUI then saveFileBtn_refreshUI.Text = getText("button_savefile", nil, " ") end
             local loadFileBtn_refreshUI = MainFrame:FindFirstChild("LoadConfigFromFileButton", true); if loadFileBtn_refreshUI then loadFileBtn_refreshUI.Text = getText("button_loadfile", nil, " ") end
             local centerBtn_refreshUI = MainFrame:FindFirstChild("CenterGUIButton", true); if centerBtn_refreshUI then centerBtn_refreshUI.Text = getText("button_centergui", nil, "  ") end
             local bringAllBtn_refreshUI = FlingToolsOtherButtons["BringAll"]; if bringAllBtn_refreshUI then bringAllBtn_refreshUI.Text = getText("button_bringall", nil, " ") end
             local tpBtn_refreshUI = FlingToolsOtherButtons["Teleport"]; if tpBtn_refreshUI then tpBtn_refreshUI.Text = getText("button_teleport", nil, " ") end
             local flingBtn_refreshUI = FlingToolsOtherButtons["Fling"]; if flingBtn_refreshUI then flingBtn_refreshUI.Text = getText("button_fling", nil, " ") end
             local flingAllBtn_refreshUI = FlingToolsOtherButtons["FlingAll"]; if flingAllBtn_refreshUI then flingAllBtn_refreshUI.Text = getText("button_flingall", nil, "  ") end
             local tripBtn_refreshUI = FlingToolsOtherButtons["Trip"]; if tripBtn_refreshUI then tripBtn_refreshUI.Text = getText("button_tripplayer", nil, " ") end
             local sitBtn_refreshUI = FlingToolsOtherButtons["Sit"]; if sitBtn_refreshUI then sitBtn_refreshUI.Text = getText("button_sitplayer", nil, " ") end
             local annoyBtn_refreshUI = FlingToolsOtherButtons["Annoy"]; if annoyBtn_refreshUI then annoyBtn_refreshUI.Text = getText("button_annoyplayer", nil, " ") end
             local laserBtn_refreshUI = FlingToolsOtherButtons["LaserGun"]; if laserBtn_refreshUI then laserBtn_refreshUI.Text = getText("button_lasergun", nil, " ") end
             local plBtn_refreshUI = FlingToolsOtherButtons["PlayerLift"]; if plBtn_refreshUI then plBtn_refreshUI.Text = getText("button_playerlift", nil, " ") end
             local stopBtn_refreshUI = FlingToolsOtherButtons["StopLift"]; if stopBtn_refreshUI then stopBtn_refreshUI.Text = getText("button_stoplift", nil, " ") end
             local highJumpBtn_refreshUI = MainFrame:FindFirstChild("HighJumpButton", true); if highJumpBtn_refreshUI then highJumpBtn_refreshUI.Text = getText("button_highjump", nil, " ") end
             local thirdPersonBtn_refreshUI = MainFrame:FindFirstChild("ThirdPersonButton", true); if thirdPersonBtn_refreshUI then thirdPersonBtn_refreshUI.Text = getText("button_thirdperson", nil, " ") end
             local firstPersonBtn_refreshUI = MainFrame:FindFirstChild("FirstPersonButton", true); if firstPersonBtn_refreshUI then firstPersonBtn_refreshUI.Text = getText("button_firstperson", nil, " ") end
             local headSitBtn_refreshUI = FlingToolsOtherButtons["HeadSit"]; if headSitBtn_refreshUI then headSitBtn_refreshUI.Text = getText("button_headsit", nil, " ") end
             local destroyBtn_refreshUI = MainFrame:FindFirstChild("DestroyGUIButton", true); if destroyBtn_refreshUI then destroyBtn_refreshUI.Text = getText("button_destroygui", nil, " ") end
             local chamsV2Btn_refreshUI = FlingToolsOtherButtons["ChamsV2"]; if chamsV2Btn_refreshUI then chamsV2Btn_refreshUI.Text = getText("button_chamsv2", nil, " ") end
             local chamsV2BtnGfx_refreshUI = FlingToolsOtherButtons["ChamsV2Gfx"]; if chamsV2BtnGfx_refreshUI then chamsV2BtnGfx_refreshUI.Text = getText("button_chamsv2", nil, " ") end
             local printPosBtn_refreshUI = MainFrame:FindFirstChild("PrintPositionsButton", true); if printPosBtn_refreshUI then printPosBtn_refreshUI.Text = getText("button_printpositions", nil, " ") end
             local cycleSkyBtn_refreshUI = MainFrame:FindFirstChild("CycleSkyboxButton", true); if cycleSkyBtn_refreshUI then cycleSkyBtn_refreshUI.Text = getText("button_cycleskybox", nil, " ") end
             local panicBtn_refreshUI = MainFrame:FindFirstChild("PanicButton", true); if panicBtn_refreshUI then panicBtn_refreshUI.Text = getText("button_panic", nil, " ") end
             local clearChatBtn_refreshUI = MainFrame:FindFirstChild("ClearChatButton", true); if clearChatBtn_refreshUI then clearChatBtn_refreshUI.Text = getText("button_clearchat", nil, " ") end
             local getUserIdBtn_refreshUI = MainFrame:FindFirstChild("GetUserIDButton", true); if getUserIdBtn_refreshUI then getUserIdBtn_refreshUI.Text = getText("button_getuserid", nil, " ") end
             local copyUserIdBtn_refreshUI = MainFrame:FindFirstChild("CopyUserIdButton", true); if copyUserIdBtn_refreshUI then copyUserIdBtn_refreshUI.Text = getText("button_copyuserid", nil, " ") end
             local sendWebhookBtn_refreshUI = MainFrame:FindFirstChild("SendWebhookButton", true); if sendWebhookBtn_refreshUI then sendWebhookBtn_refreshUI.Text = getText("button_sendwebhook", nil, "  ") end
             local tpBehindBtn_refreshUI = FlingToolsOtherButtons["TPBehind"]; if tpBehindBtn_refreshUI then tpBehindBtn_refreshUI.Text = getText("button_tpbehind", nil, "  ") end
             local setDayBtn_refreshUI = MainFrame:FindFirstChild("SetDayButton", true); if setDayBtn_refreshUI then setDayBtn_refreshUI.Text = getText("button_setday", nil, "  ") end
             local setNightBtn_refreshUI = MainFrame:FindFirstChild("SetNightButton", true); if setNightBtn_refreshUI then setNightBtn_refreshUI.Text = getText("button_setnight", nil, " ") end
             local sendBypassBtn_refreshUI = MainFrame:FindFirstChild("SendBypassButton", true); if sendBypassBtn_refreshUI then sendBypassBtn_refreshUI.Text = getText("button_sendbypass", nil, " ", " ") end -- Mettre à jour le bouton bypass

             -- --- Boutons de Thème ---
             local redBtn_refreshUI = MainFrame:FindFirstChild("ThemeButtonRed", true); if redBtn_refreshUI then redBtn_refreshUI.Text = getText("button_red", nil, " ") end
             local blueBtn_refreshUI = MainFrame:FindFirstChild("ThemeButtonBlue", true); if blueBtn_refreshUI then blueBtn_refreshUI.Text = getText("button_blue", nil, " ") end
             local greenBtn_refreshUI = MainFrame:FindFirstChild("ThemeButtonGreen", true); if greenBtn_refreshUI then greenBtn_refreshUI.Text = getText("button_green", nil, " ") end
             local purpleBtn_refreshUI = MainFrame:FindFirstChild("ThemeButtonPurple", true); if purpleBtn_refreshUI then purpleBtn_refreshUI.Text = getText("button_purple", nil, " ") end
             local blackBtn_refreshUI = MainFrame:FindFirstChild("ThemeButtonBlack", true); if blackBtn_refreshUI then blackBtn_refreshUI.Text = getText("button_black", nil, " ") end
             local primeBtn_refreshUI = MainFrame:FindFirstChild("ThemeButtonPrime", true); if primeBtn_refreshUI then primeBtn_refreshUI.Text = getText("button_prime", nil, " ") end
             local cyberBtn_refreshUI = MainFrame:FindFirstChild("ThemeButtonCyber", true); if cyberBtn_refreshUI then cyberBtn_refreshUI.Text = getText("button_cyberpunk", nil, " ") end
             local toxicBtn_refreshUI = MainFrame:FindFirstChild("ThemeButtonToxic", true); if toxicBtn_refreshUI then toxicBtn_refreshUI.Text = getText("button_toxic", nil, "  ") end
             local oceanBtn_refreshUI = MainFrame:FindFirstChild("ThemeButtonOcean", true); if oceanBtn_refreshUI then oceanBtn_refreshUI.Text = getText("button_ocean", nil, " ") end
        end
    end)
    print("UI Text refreshed for Language:", currentLanguage, "and Emojis:", guiShowTextEmojis)
end

applyColorTheme = function(mainColorStart, mainColorMid, mainColorEnd, buttonCol, neonColor, textCol, sliderBgCol, placeholderCol)
    if not Gradient or not MainFrame then print("Cannot apply theme: Main UI not ready") return end
    if not textCol then warn("applyColorTheme called with nil textCol, using previous:", currentTextColor); textCol = currentTextColor end
    sliderBgCol = sliderBgCol or Color3.fromRGB(50, 50, 70)
    placeholderCol = placeholderCol or Color3.fromRGB(150, 150, 150)

    local C3_fromRGB_local_applyTheme = cached_Color3_fromRGB; local C3_new_local_applyTheme = cached_Color3_new
    if typeof(C3_fromRGB_local_applyTheme) ~= "function" then warn("applyColorTheme: C3_fromRGB_local_applyTheme is nil!"); return end

    currentButtonColor = buttonCol; currentTabColor = C3_fromRGB_local_applyTheme(buttonCol.R*255*0.75, buttonCol.G*255*0.75, buttonCol.B*255*0.75); currentTextColor = textCol; currentSliderBgColor = sliderBgCol; currentPlaceholderColor = placeholderCol

    local CSKP_applyTheme = ColorSequenceKeypoint.new; Gradient.Color = ColorSequence.new{ CSKP_applyTheme(0,mainColorStart), CSKP_applyTheme(0.5,mainColorMid), CSKP_applyTheme(1,mainColorEnd) }
    local homePage_applyTheme=pageInstances.Home; local homeGradient_applyTheme=homePage_applyTheme and homePage_applyTheme:FindFirstChild("HomeGradient", true); if homeGradient_applyTheme then homeGradient_applyTheme.Color = ColorSequence.new{ CSKP_applyTheme(0,mainColorStart), CSKP_applyTheme(1,mainColorEnd) } end
    if NeonBorder then NeonBorder.BackgroundColor3 = neonColor end; local selNeon_applyTheme=SelectionFrame and SelectionFrame:FindFirstChild("SelNeon"); if selNeon_applyTheme then selNeon_applyTheme.BackgroundColor3 = neonColor end; local kbdFrame_applyTheme=pageInstances.Keyboard and pageInstances.Keyboard:FindFirstChild("KeyboardFrame", true); local kbdNeon_applyTheme=kbdFrame_applyTheme and kbdFrame_applyTheme:FindFirstChild("KeyboardNeon"); if kbdNeon_applyTheme then kbdNeon_applyTheme.BackgroundColor3 = neonColor end; local welcomeFrame_applyTheme=pageInstances.Home and pageInstances.Home:FindFirstChild("WelcomeFrame", true); local welcomeGlow_applyTheme=welcomeFrame_applyTheme and welcomeFrame_applyTheme:FindFirstChild("WelcomeGlow"); if welcomeGlow_applyTheme then welcomeGlow_applyTheme.BackgroundColor3 = neonColor end
    if MinimizeButton then MinimizeButton.BackgroundColor3 = currentButtonColor; MinimizeButton.TextColor3 = currentTextColor end; if MinimizedButton then MinimizedButton.BackgroundColor3 = currentButtonColor; MinimizedButton.TextColor3 = currentTextColor; MinimizedButton.BackgroundTransparency = 0 end; if MinGradient then MinGradient.Color = ColorSequence.new{ CSKP_applyTheme(0,currentButtonColor), CSKP_applyTheme(1,currentTabColor) } end
    if TabBar then TabBar.BackgroundColor3 = C3_fromRGB_local_applyTheme(buttonCol.R*255*0.5, buttonCol.G*255*0.5, buttonCol.B*255*0.5) end

    local activePageName_applyTheme = nil; for name, page in pairs(pageInstances) do if page.Visible then activePageName_applyTheme = name; break end end; for name, button in pairs(tabButtons) do button.BackgroundColor3 = (name == activePageName_applyTheme) and currentButtonColor or currentTabColor; button.TextColor3 = currentTextColor end

    -- Fonction interne pour mettre à jour les couleurs
    local updateDescendantColors_applyTheme = function(parent)
        if not parent then return end
        for _, d in ipairs(parent:GetDescendants()) do
             local success_applyTheme_desc, err_applyTheme_desc = pcall(function()
                if d and d.Parent then
                    -- --- TextButton Styling ---
                    if d:IsA("TextButton") then
                        if d.Name:match("Value") or d.Name == "ESPBoxSizeValue" or d.Name == "CharScaleValue" then -- Slider Value Display
                            d.BackgroundColor3=currentSliderBgColor; d.TextColor3=currentTextColor
                        elseif d.Name:match("ThemeButton") or d.Name == "CopyAllButton" or d.Name == "ExecuteScriptButton" or d.Name == "PasteScriptButton" or d.Name == "ClearScriptButton" or d.Name == "SaveConfigButton" or d.Name == "LoadConfigButton" or d.Name == "SaveConfigToFileButton" or d.Name == "LoadConfigFromFileButton" or d.Name == "ApplySkyboxButton" or d.Name == "RejoinButton" or d.Name == "ServerHopButton" or d.Name == "CenterGUIButton" or d.Name == "RemoveDebrisButton" or d.Name == "ClearWorkspaceButton" or d.Name == "ClearConsoleButton" or d.Name == "GetSpeedButton" or d.Name == "HighJumpButton" or d.Name == "ThirdPersonButton" or d.Name == "FirstPersonButton" or d.Name == "ChamsV2Button" or d.Name == "ChamsV2ButtonGfx" or d.Name == "PrintPositionsButton" or d.Name == "CycleSkyboxButton" or d.Name == "ClearChatButton" or d.Name == "GetUserIDButton" or d.Name == "CopyUserIDButton" or d.Name == "SendWebhookButton" or d.Name == "HopSmallestButton" or d.Name == "SetDayButton" or d.Name == "SetNightButton" or d.Name == "TPBehindButton" or (d.Parent and d.Parent.Name == "ErrorEntry") or d.Name=="Switch" or d.Name=="ResetAllButton" or d.Name=="TargetButton" or d.Name == "SendBypassButton" or d.Name == "FlingTools_LaserGunButton" or d.Name == "FlingTools_TripButton" or d.Name == "FlingTools_SitButton" or d.Name == "FlingTools_AnnoyButton" or d.Name == "FlingTools_TeleportButton" or d.Name == "FlingTools_FlingButton" or d.Name == "FlingTools_FlingAllButton" or d.Name == "FlingTools_BringAllButton" or d.Name == "FlingTools_PlayerLiftButton" or d.Name == "FlingTools_StopLiftButton" or d.Name == "FlingTools_HeadSitButton" then -- Generic / Specific Action Buttons
                            d.BackgroundColor3=currentButtonColor; d.TextColor3=currentTextColor; if d.Name=="TargetButton" then d.TextSize=16; d.Font=Enum.Font.GothamBlack; d.Text = ">"; if not d:FindFirstChild("UICorner") then Instance.new("UICorner",d).CornerRadius=UDim.new(1,0) end end
                        elseif d.Parent.Name == "FontSelectionScroll" then -- NOUVEAU: Boutons de police Bypass
                            local isSelected = (chatBypassSelectedButton == d)
                            d.BackgroundColor3 = isSelected and currentButtonColor or currentSliderBgColor -- Couleur différente si sélectionné
                            d.TextColor3 = currentTextColor
                        elseif d.Name=="DestroyGUIButton" or d.Name=="PanicButton" then -- Destructive Buttons
                            d.BackgroundColor3=Color3.fromRGB(255,60,60); d.TextColor3=currentTextColor
                        elseif FlingToolsBringButton and d==FlingToolsBringButton then -- Special Case: Bring Button
                            d.BackgroundColor3 = bringing and (C3_fromRGB_local_applyTheme(255,150,0)) or (target and target.Parent and (C3_fromRGB_local_applyTheme(0,200,0)) or currentButtonColor); d.TextColor3 = bringing and (C3_fromRGB_local_applyTheme(0,0,0)) or currentTextColor
                        else -- Default for Toggle Buttons
                            d.BackgroundColor3=currentButtonColor; d.TextColor3=currentTextColor
                        end
                    -- --- TextLabel Styling ---
                    elseif d:IsA("TextLabel") then
                         if FlingToolsNoclipStatusLabel and d == FlingToolsNoclipStatusLabel then -- Noclip Status
                            d.BackgroundColor3=currentButtonColor; d.TextColor3 = (d.Text=="ON") and C3_fromRGB_local_applyTheme(0,185,0) or C3_fromRGB_local_applyTheme(170,0,0)
                         elseif (fpsLabel and d==fpsLabel) or (serverInfoDisplay and d==serverInfoDisplay) then -- Info Displays
                            d.BackgroundColor3=currentSliderBgColor; d.TextColor3=currentTextColor
                         elseif d.Name:match("Title") and d.Parent~=MainFrame and d.Parent~=SelectionFrame and d.Parent~=ContentFrame and not (d.Parent:FindFirstAncestor("WelcomeFrame") or d.Parent.Name=="WelcomeFrame") then -- Page/Section Titles
                            d.TextColor3=C3_fromRGB_local_applyTheme(0,220,255)
                         elseif d.Name=="TitleLabel" or d.Name=="WelcomeTitle" or (d.Parent and d.Parent:FindFirstAncestor(".VersionHistoryPage") and d.Name:match("^Version_")) then -- Main Title / Specific Titles
                            d.TextColor3=C3_fromRGB_local_applyTheme(0,220,255)
                         else -- Default/Other Labels
                            d.TextColor3=currentTextColor; if d.Parent and d.Parent.Name=="PlayerListEntry" then d.Font=Enum.Font.GothamBlack; d.TextSize=13 end
                         end
                    -- --- TextBox Styling ---
                    elseif d:IsA("TextBox") then
                         d.BackgroundColor3=currentSliderBgColor; d.TextColor3=currentTextColor; d.PlaceholderColor3=currentPlaceholderColor
                    -- --- Frame Styling ---
                    elseif d:IsA("Frame") then
                        if d.Name=="Bar" and d.Parent and d.Parent.Name:match("Slider") then -- Slider Bars
                            d.BackgroundColor3=currentButtonColor
                        elseif d.Name=="WelcomeFrame" then -- Welcome Frame Background
                            d.BackgroundColor3=currentButtonColor; d.BackgroundTransparency=0.3
                        elseif d.Name:match("Slider") then -- Slider Backgrounds
                            d.BackgroundColor3=currentSliderBgColor
                        elseif d.Name=="PlayerListEntry" then -- Player List Entry Background
                            d.BackgroundColor3 = Color3.fromRGB(currentSliderBgColor.R*255*0.9,currentSliderBgColor.G*255*0.9,currentSliderBgColor.B*255*0.9); d.BackgroundTransparency=0.9; if not d:FindFirstChild("UICorner") then Instance.new("UICorner",d).CornerRadius=UDim.new(0,6) end; if not d:FindFirstChild("UIGradient") then local g_applyThemeDesc=Instance.new("UIGradient",d); g_applyThemeDesc.Rotation=90; g_applyThemeDesc.Color=ColorSequence.new{CSKP_applyTheme(0,Color3.fromRGB(currentSliderBgColor.R*255*1.1,currentSliderBgColor.G*255*1.1,currentSliderBgColor.B*255*1.1)), CSKP_applyTheme(1,currentSliderBgColor)} end
                        elseif d.Name=="PlayerListFrame" or d.Name=="HistoryScroll" or d.Name=="ErrorList" or d.Name=="MiscFeaturesScroll" or d.Name=="GraphicsScroll" or d.Name == "FontSelectionScroll" or d.Name == "ChatSpyLogPanel" or d.Name == "CheatsScroll" or d.Name == "FlingScroll" or d.Name == "SettingsScroll" or d.Name == "MiscScroll" or d.Name == "ChatBypassScroll" then -- Scrolling Frame Backgrounds
                            d.BackgroundColor3=currentSliderBgColor; d.BackgroundTransparency=0.8
                        end
                    end

                    -- --- Font Check (Universal) ---
                    if d:IsA("TextLabel") or d:IsA("TextButton") or d:IsA("TextBox") then
                        if d.Font ~= Enum.Font.GothamBlack then
                            -- Exceptions for specific elements
                            if d.Name == "ScriptExecutorInput" then d.Font = Enum.Font.Code
                            elseif d.Parent and d.Parent.Name == "FontSelectionScroll" then d.Font = Enum.Font.SourceSans -- Bypass font buttons
                            elseif d.Name == "ChatBypassInput" then d.Font = Enum.Font.SourceSans -- Bypass input
                            elseif d.Parent and (d.Parent.Name == "ChatSpyLogPanel" or (d.Parent.Parent and d.Parent.Parent.Name == "ChatSpyLogPanel")) then d.Font = Enum.Font.SourceSans -- Chat Spy Log (check parent and parent.parent)
                            elseif d.Name ~= "ErrorEntry" and not d.Name:match("^Change_") and not d.Name:match("^Version_") then -- Avoid changing console/version history font
                                d.Font = Enum.Font.GothamBlack
                            end
                        end
                    end
                end
             end)
             if not success_applyTheme_desc then warn(string.format("Error updating color/font for descendant '%s' (Type: %s): %s", d and d.Name or "N/A", typeof(d), tostring(err_applyTheme_desc))) end
        end
    end

    -- Apply colors to all pages and the selection frame if it exists
    for _, page in pairs(pageInstances) do updateDescendantColors_applyTheme(page) end
    if SelectionFrame and SelectionFrame.Parent then updateDescendantColors_applyTheme(SelectionFrame) end
    if refreshAllUITextLanguage then refreshAllUITextLanguage() end -- Refresh text after color change

end


-- SLIDER LOGIC REVERTED TO LOCALS
createSliderLogic = function(sliderFrame, barFrame, valueLabel, maxValue, applyFunc, container, defaultValue, minValue)
    local localDraggingSlider = false -- Specific to this slider instance
    local localSliderBeingDragged = nil -- Specific to this slider instance

    minValue = minValue or 0
    if not sliderFrame or not barFrame or not container then return end
    local clamp = math.clamp
    local floor = math.floor
    local C3_fromRGB_local = cached_Color3_fromRGB

    local function updateSliderAppearance(value)
        local ratio = 0
        local numVal = tonumber(value)
        local numMin = tonumber(minValue) or 0
        local numMax = tonumber(maxValue) or 100
        if typeof(numVal)=="number" and typeof(numMin)=="number" and typeof(numMax)=="number" and numMax ~= numMin then
            ratio = clamp((numVal - numMin) / (numMax - numMin), 0, 1)
        end
        if barFrame then barFrame.Size = UDim2.new(ratio, 0, 1, 0) end
        local dispVal = "NaN"
        if typeof(numVal)=="number" then
            if numMax > 10 then dispVal = floor(numVal * 10) / 10 else dispVal = numVal end
        end
        if valueLabel then
             if valueLabel.Name == "CharScaleValue" then
                 valueLabel.Text = string.format("%.2f", dispVal)
             else
                 valueLabel.Text = string.format(numMax > 10 and "%.1f" or "%.0f", dispVal)
             end
        end
    end

    local initVal = defaultValue
    if valueLabel and tonumber(valueLabel.Text) then
        pcall(function() initVal = tonumber(valueLabel.Text) end)
    end
    initVal = (tonumber(initVal) or tonumber(defaultValue)) or 0
    local numMinValue = tonumber(minValue) or 0
    local numMaxValue = tonumber(maxValue) or 100
    initVal = clamp(initVal, numMinValue, numMaxValue)
    updateSliderAppearance(initVal)

    local function handleInput(inputPos)
        if not sliderFrame or not sliderFrame.Parent then return end
        local sX, sW = sliderFrame.AbsolutePosition.X, sliderFrame.AbsoluteSize.X
        if typeof(sX)~="number" or typeof(sW)~="number" or sW <= 0 then return end
        local rX = clamp(inputPos.X - sX, 0, sW)
        local ratio = 0
        if typeof(rX)=="number" and typeof(sW)=="number" and sW ~= 0 then
            ratio = rX / sW
        else
            warn("createSliderLogic (handleInput): Invalid slider dimensions for ratio calculation (rX:", rX, "sW:", sW, ")")
            return
        end
        local numMinValueLocal = tonumber(minValue) or 0
        local numMaxValueLocal = tonumber(maxValue) or 100
        local numRatio = tonumber(ratio)
        local nV = numMinValueLocal
        if typeof(numMinValueLocal)=="number" and typeof(numMaxValueLocal)=="number" and typeof(numRatio)=="number" then
            local range = numMaxValueLocal - numMinValueLocal
            if typeof(range)=="number" then
                local scaledValue = numRatio * range
                if typeof(scaledValue)=="number" then
                    local potentialNV = numMinValueLocal + scaledValue
                    if typeof(potentialNV)=="number" then
                        nV = clamp(potentialNV, numMinValueLocal, numMaxValueLocal)
                    else warn("createSliderLogic (handleInput): Final addition resulted in non-number (minVal:", numMinValueLocal, "scaledValue:", scaledValue, ")") end
                else warn("createSliderLogic (handleInput): Scaled value calculation resulted in non-number (ratio:", numRatio, "range:", range, ")") end
            else warn("createSliderLogic (handleInput): Range calculation resulted in non-number (maxVal:", numMaxValueLocal, "minVal:", numMinValueLocal, ")") end
            updateSliderAppearance(nV)
            pcall(applyFunc, nV)
        else warn("createSliderLogic (handleInput): Invalid types for value calculation (min:", typeof(numMinValueLocal), "max:", typeof(numMaxValueLocal), "ratio:", typeof(numRatio),")") end
    end

    sliderFrame.InputBegan:Connect(function(input)
        if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then
            localDraggingSlider = true
            localSliderBeingDragged = sliderFrame
            canDragMainFrame=false -- This global variable still needs to be managed
            if typeof(C3_fromRGB_local)=="function" then
                local hoverSliderBg=Color3.fromRGB(currentSliderBgColor.R*255*1.2, currentSliderBgColor.G*255*1.2, currentSliderBgColor.B*255*1.2)
                local sldTween=TweenService:Create(sliderFrame,tweenInfo,{BackgroundColor3=hoverSliderBg})
                if sldTween then sldTween:Play() end
            end
            handleInput(input.Position)
        end
    end)
    sliderFrame.InputEnded:Connect(function(input)
        if (input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch) and localSliderBeingDragged==sliderFrame then
            localDraggingSlider = false
            localSliderBeingDragged = nil
            canDragMainFrame=true -- This global variable still needs to be managed
            if typeof(C3_fromRGB_local)=="function" then
                local sldTween=TweenService:Create(sliderFrame,tweenInfo,{BackgroundColor3=currentSliderBgColor})
                if sldTween then sldTween:Play() end
            end
        end
    end)
    sliderFrame.InputChanged:Connect(function(input)
        if localDraggingSlider and localSliderBeingDragged==sliderFrame and (input.UserInputType==Enum.UserInputType.MouseMovement or input.UserInputType==Enum.UserInputType.Touch) then
            handleInput(input.Position)
        end
    end)

    if valueLabel then
        valueLabel.MouseButton1Click:Connect(function()
            local scrollF = container:FindFirstAncestorWhichIsA("ScrollingFrame")
            local scrollP = scrollF and scrollF.CanvasPosition or Vector2.zero
            local origTxt = valueLabel.Text
            local txtBox = Instance.new("TextBox")
            txtBox.Size = valueLabel.Size
            txtBox.Position = valueLabel.Position
            txtBox.AnchorPoint = valueLabel.AnchorPoint
            txtBox.BackgroundColor3 = currentSliderBgColor
            txtBox.TextColor3 = currentTextColor
            txtBox.Font = valueLabel.Font
            txtBox.TextSize = valueLabel.TextSize
            txtBox.Text = origTxt
            txtBox.ClearTextOnFocus = false
            txtBox.Parent = valueLabel.Parent
            txtBox.ZIndex = valueLabel.ZIndex + 1
            txtBox:CaptureFocus()
            txtBox.Text=""
            txtBox.Text=origTxt
            if scrollF then scrollF.ScrollingEnabled=false end
            local function cleanup(applyChg,enteredVal)
                local revertVal = tonumber(origTxt) or defaultValue
                local finalVal = revertVal
                local numMinValueLocal=tonumber(minValue) or 0
                local numMaxValueLocal=tonumber(maxValue) or 100
                if applyChg then
                    local numVal=tonumber(enteredVal)
                    if numVal and typeof(numMinValueLocal)=="number" and typeof(numMaxValueLocal)=="number" then
                        finalVal=clamp(numVal,numMinValueLocal,numMaxValueLocal)
                    end
                end
                updateSliderAppearance(finalVal)
                pcall(applyFunc, finalVal)
                ShowNotification("notif_value_set", tostring(finalVal))
                txtBox:Destroy()
                if scrollF then scrollF.ScrollingEnabled=true; scrollF.CanvasPosition=scrollP end
            end
            txtBox.FocusLost:Connect(function(enterPressed) cleanup(enterPressed,txtBox.Text) end)
        end)
    end
end


switchTab = function(pageName) 
    C3_fromRGB_local_switchTab = cached_Color3_fromRGB; C3_new_local_switchTab = cached_Color3_new; canUseRGB_switchTab = typeof(C3_fromRGB_local_switchTab) == "function" 
    pageToActivate_switchTab = pageInstances[pageName]; if not pageToActivate_switchTab or pageToActivate_switchTab.Visible then return end 
    for _, page in pairs(pageInstances) do page.Visible = false end; pageToActivate_switchTab.Visible = true
    for name, button in pairs(tabButtons) do
        currentTabText_switchTab = button.Text 
        button.BackgroundColor3 = (name == pageName) and currentButtonColor or currentTabColor
    end
    if pageName == "FlingTools" and FlingToolsBringButton then FlingToolsBringButton.BackgroundColor3 = bringing and (canUseRGB_switchTab and C3_fromRGB_local_switchTab(255,150,0) or Color3.new(1,150/255,0)) or (target and target.Parent and (canUseRGB_switchTab and C3_fromRGB_local_switchTab(0,200,0) or Color3.new(0,200/255,0)) or currentButtonColor); FlingToolsBringButton.TextColor3 = bringing and (canUseRGB_switchTab and C3_fromRGB_local_switchTab(0,0,0) or Color3.new(0,0,0)) or currentTextColor; updatePlayerList() end
    translationKey_switchTab = "tab_" .. string.lower(pageName:gsub("%s", "")) 
    ShowNotification("Switched to %s tab", getText(translationKey_switchTab)) 
end

setGuiSize = function(mode) 
    C3_new_local_setGuiSize = cached_Color3_new; if typeof(C3_new_local_setGuiSize) ~= "function" then warn("setGuiSize: C3_new_local_setGuiSize is nil!"); return end 
    targetSize_setGuiSize, contentWidth_setGuiSize, contentPosOffset_setGuiSize = nil, nil, nil; if mode=="Mobile" then targetSize_setGuiSize=UDim2.new(0,400,0,300); contentWidth_setGuiSize=270; contentPosOffset_setGuiSize=130 else targetSize_setGuiSize=UDim2.new(0,450,0,350); contentWidth_setGuiSize=320; contentPosOffset_setGuiSize=130 end 
    currentSize=targetSize_setGuiSize; currentPosition=UDim2.new(0.5,-targetSize_setGuiSize.X.Offset/2,0.5,-targetSize_setGuiSize.Y.Offset/2)
    mainTween_setGuiSize = TweenService:Create(MainFrame,tweenInfo,{Size=targetSize_setGuiSize,Position=currentPosition}); if mainTween_setGuiSize then mainTween_setGuiSize:Play() else warn("Failed to create MainFrame resize tween") end 
    contentTween_setGuiSize = TweenService:Create(ContentFrame,tweenInfo,{Size=UDim2.new(0, contentWidth_setGuiSize, 1, -40), Position = UDim2.new(0,contentPosOffset_setGuiSize, 0, 35)}); if contentTween_setGuiSize then contentTween_setGuiSize:Play() else warn("Failed to create ContentFrame resize tween") end 
    homePage_setGuiSize=pageInstances.Home; if homePage_setGuiSize then welcomeF_setGuiSize=homePage_setGuiSize:FindFirstChild("WelcomeFrame", true); if welcomeF_setGuiSize then homeBg_setGuiSize=homePage_setGuiSize:FindFirstChild("HomeBackground", true); bgW_setGuiSize=homeBg_setGuiSize and homeBg_setGuiSize.AbsoluteSize.X or contentWidth_setGuiSize-10; bgH_setGuiSize=homeBg_setGuiSize and homeBg_setGuiSize.AbsoluteSize.Y or(targetSize_setGuiSize.Y.Offset-40-10); min_setGuiSize=math.min; welcomeTween_setGuiSize = TweenService:Create(welcomeF_setGuiSize,tweenInfo,{Size=UDim2.new(0,min_setGuiSize(200,bgW_setGuiSize*0.8),0,min_setGuiSize(180,bgH_setGuiSize*0.8)),Position=UDim2.new(0.5,-min_setGuiSize(100,bgW_setGuiSize*0.4),0.5,-min_setGuiSize(90,bgH_setGuiSize*0.4))}); if welcomeTween_setGuiSize then welcomeTween_setGuiSize:Play() else warn("Failed to create WelcomeFrame resize tween") end end end 
    TabBar.Visible=true; ContentFrame.Visible=true;
    if SelectionFrame and SelectionFrame.Parent then SelectionFrame:Destroy(); SelectionFrame=nil end
    if pageInstances.Keyboard then task.wait(0.1); currentVisibility_setGuiSize = pageInstances.Keyboard.Visible; pageRef_setGuiSize = pageInstances.Keyboard; pageInstances.Keyboard = nil; pageRef_setGuiSize:Destroy(); CreerPageClavier(); if pageInstances.Keyboard then pageInstances.Keyboard.Visible = currentVisibility_setGuiSize; applyColorTheme(Gradient.Color.Keypoints[1].Value, Gradient.Color.Keypoints[2].Value, Gradient.Color.Keypoints[3].Value, currentButtonColor, (NeonBorder and NeonBorder.BackgroundColor3 or C3_new_local_setGuiSize(0,1,1)), currentTextColor, currentSliderBgColor, currentPlaceholderColor) end end 
    for _, page in pairs(pageInstances) do scroll_setGuiSize = page:FindFirstChildWhichIsA("ScrollingFrame"); if scroll_setGuiSize then task.wait(0.05); layout_setGuiSize = scroll_setGuiSize:FindFirstChildOfClass("UIListLayout") or scroll_setGuiSize:FindFirstChildOfClass("UIGridLayout"); if layout_setGuiSize then scroll_setGuiSize.CanvasSize = UDim2.new(0,0,0,layout_setGuiSize.AbsoluteContentSize.Y + 20) end end end 
    ShowNotification("notif_gui_mode", mode)
end

toggleFly = function() 
    char_toggleFly=player.Character; if not char_toggleFly then ShowNotification("notif_error_char_not_found"); return end; hum_toggleFly=char_toggleFly:FindFirstChildWhichIsA("Humanoid"); root_toggleFly=char_toggleFly:FindFirstChild("HumanoidRootPart"); if not hum_toggleFly or not root_toggleFly then ShowNotification("notif_error_humanoid_rootpart"); return end 
    isFlying=not isFlying; flyBtn_toggleFly=MainFrame and MainFrame:FindFirstChild("FlyButton",true); 
    if flyBtn_toggleFly then flyBtn_toggleFly.Text = getText("button_fly", isFlying, "", "") end;
    ShowNotification("notif_feature_state", getText("button_fly"), getText(isFlying and "state_on" or "state_off"))
    if isFlying then hum_toggleFly:SetStateEnabled(Enum.HumanoidStateType.FallingDown,false); hum_toggleFly:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,false); bv_toggleFly=Instance.new("BodyVelocity"); bv_toggleFly.Velocity=Vector3.new(); bv_toggleFly.MaxForce=Vector3.new(math.huge,math.huge,math.huge); bv_toggleFly.P=5000; bv_toggleFly.Parent=root_toggleFly; bv_toggleFly.Name="FlyVelocity"; bg_toggleFly=Instance.new("BodyGyro"); bg_toggleFly.P=5000; bg_toggleFly.MaxTorque=Vector3.new(math.huge,math.huge,math.huge); bg_toggleFly.CFrame=root_toggleFly.CFrame; bg_toggleFly.Parent=root_toggleFly; bg_toggleFly.Name="FlyGyro"; if flyConnection then flyConnection:Disconnect() end; flyConnection=RunService.RenderStepped:Connect(function() if not isFlying or not root_toggleFly.Parent or not bv_toggleFly.Parent or not bg_toggleFly.Parent then if flyConnection then flyConnection:Disconnect(); flyConnection=nil end return end; cam_toggleFly=workspace.CurrentCamera; if not cam_toggleFly then return end; mov_toggleFly=Vector3.new(); if UserInputService:IsKeyDown(Enum.KeyCode.W) then mov_toggleFly+=Vector3.new(0,0,-1) end; if UserInputService:IsKeyDown(Enum.KeyCode.S) then mov_toggleFly+=Vector3.new(0,0,1) end; if UserInputService:IsKeyDown(Enum.KeyCode.A) then mov_toggleFly+=Vector3.new(-1,0,0) end; if UserInputService:IsKeyDown(Enum.KeyCode.D) then mov_toggleFly+=Vector3.new(1,0,0) end; if UserInputService:IsKeyDown(Enum.KeyCode.Space) then mov_toggleFly+=Vector3.new(0,1,0) end; if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) or UserInputService:IsKeyDown(Enum.KeyCode.C) then mov_toggleFly+=Vector3.new(0,-1,0) end; bv_toggleFly.Velocity=(mov_toggleFly.Magnitude>0) and (cam_toggleFly.CFrame.Rotation*mov_toggleFly).Unit*flySpeed or Vector3.new(); bg_toggleFly.CFrame=cam_toggleFly.CFrame end) 
    else hum_toggleFly:SetStateEnabled(Enum.HumanoidStateType.FallingDown,true); hum_toggleFly:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,true); bv_toggleFly_off=root_toggleFly:FindFirstChild("FlyVelocity"); if bv_toggleFly_off then bv_toggleFly_off:Destroy() end; bg_toggleFly_off=root_toggleFly:FindFirstChild("FlyGyro"); if bg_toggleFly_off then bg_toggleFly_off:Destroy() end; if flyConnection then flyConnection:Disconnect(); flyConnection=nil end; pcall(hum_toggleFly.ChangeState, hum_toggleFly, Enum.HumanoidStateType.Running) end 
end

toggleNoclip = function() 
    char_toggleNoclip=player.Character; if not char_toggleNoclip then ShowNotification("notif_error_char_not_found"); return end 
    isNoclip=not isNoclip; noclipBtn_toggleNoclip=MainFrame and MainFrame:FindFirstChild("NoclipButton",true); 
    if noclipBtn_toggleNoclip then noclipBtn_toggleNoclip.Text = getText("button_noclip", isNoclip, "", "") end;
    ShowNotification("notif_feature_state", getText("button_noclip"), getText(isNoclip and "state_on" or "state_off"))
    if noclipConnection and noclipConnection.Connected then noclipConnection:Disconnect(); noclipConnection=nil end
    noclipParts = {} 
    if isNoclip then
         for _,p in pairs(char_toggleNoclip:GetDescendants()) do if p:IsA("BasePart") then pcall(function() p.CanCollide=false end); table.insert(noclipParts,p) end end;
         noclipConnection=RunService.Stepped:Connect(function()
             if not isNoclip then if noclipConnection and noclipConnection.Connected then noclipConnection:Disconnect(); noclipConnection=nil end return end;
             currentCharacter_NoclipLoop = player.Character; if not currentCharacter_NoclipLoop then return end; currentParts_NoclipLoop = {}; for _, p in pairs(currentCharacter_NoclipLoop:GetDescendants()) do if p:IsA("BasePart") then currentParts_NoclipLoop[p] = true end end 
             for i=#noclipParts,1,-1 do p_NoclipLoop=noclipParts[i]; if p_NoclipLoop and p_NoclipLoop.Parent and p_NoclipLoop:IsDescendantOf(currentCharacter_NoclipLoop) then pcall(function() p_NoclipLoop.CanCollide=false end); currentParts_NoclipLoop[p_NoclipLoop] = nil else table.remove(noclipParts,i) end end 
             for p,_ in pairs(currentParts_NoclipLoop) do pcall(function() p.CanCollide = false end); table.insert(noclipParts, p) end
         end)
    else
         currentCharacter_NoclipLoop_Off = player.Character; if currentCharacter_NoclipLoop_Off then for _,p in pairs(currentCharacter_NoclipLoop_Off:GetDescendants()) do if p:IsA("BasePart") then pcall(function() p.CanCollide=true end) end end end 
         noclipParts={}
    end
end

applyCheatValues = function(character) 
    hum_applyCheatValues = character and character:FindFirstChildWhichIsA("Humanoid"); if not hum_applyCheatValues then return end 
    speedVal_applyCheatValues, jumpVal_applyCheatValues, gravVal_applyCheatValues, fovVal_applyCheatValues = 16, 50, 196.2, 70 
    if MainFrame then speedValTxt_applyCheatValues=MainFrame:FindFirstChild("SpeedValue",true); jumpValTxt_applyCheatValues=MainFrame:FindFirstChild("JumpValue",true); gravValTxt_applyCheatValues=MainFrame:FindFirstChild("GravityValue",true); fovValTxt_applyCheatValues=MainFrame:FindFirstChild("FOVValue",true); pcall(function() speedVal_applyCheatValues = tonumber(speedValTxt_applyCheatValues.Text) or speedVal_applyCheatValues end); pcall(function() jumpVal_applyCheatValues = tonumber(jumpValTxt_applyCheatValues.Text) or jumpVal_applyCheatValues end); pcall(function() gravVal_applyCheatValues = tonumber(gravValTxt_applyCheatValues.Text) or gravVal_applyCheatValues end); pcall(function() fovVal_applyCheatValues = tonumber(fovValTxt_applyCheatValues.Text) or fovVal_applyCheatValues end) end 
    pcall(function() hum_applyCheatValues.WalkSpeed = speedVal_applyCheatValues * walkSpeedMultiplier end)
    pcall(function() hum_applyCheatValues.JumpPower = jumpVal_applyCheatValues * jumpPowerMultiplier end)
    if not lowGravityEnabled then 
        pcall(function() workspace.Gravity = gravVal_applyCheatValues end)
    else
        pcall(function() workspace.Gravity = originalGravity / 3 end) 
    end
    pcall(function() Camera.FieldOfView = fovVal_applyCheatValues end)
    ApplyCharacterScale_Original(characterScaleValue) 
end

resetStatesOnSpawn_Core = function(character) 
    hum_resetCore = character and character:FindFirstChildWhichIsA("Humanoid") 
    if resetCheatsOnDeathEnabled then
        ShowNotification("notif_states_reset_core")
        if isFlying then isFlying=false; flyBtn_resetCore=MainFrame and MainFrame:FindFirstChild("FlyButton",true); if flyBtn_resetCore then flyBtn_resetCore.Text = getText("button_fly", isFlying, "", "") end; if flyConnection and flyConnection.Connected then flyConnection:Disconnect(); flyConnection=nil end; root_resetCore=character and character:FindFirstChild("HumanoidRootPart"); if root_resetCore then bv_resetCore=root_resetCore:FindFirstChild("FlyVelocity"); if bv_resetCore then bv_resetCore:Destroy() end; bg_resetCore=root_resetCore:FindFirstChild("FlyGyro"); if bg_resetCore then bg_resetCore:Destroy() end end; if hum_resetCore then pcall(hum_resetCore.SetStateEnabled, hum_resetCore, Enum.HumanoidStateType.FallingDown, true); pcall(hum_resetCore.SetStateEnabled, hum_resetCore, Enum.HumanoidStateType.Ragdoll, true); pcall(hum_resetCore.ChangeState, hum_resetCore, Enum.HumanoidStateType.Running) end end 
        if isNoclip then isNoclip=false; noclipBtn_resetCore=MainFrame and MainFrame:FindFirstChild("NoclipButton",true); if noclipBtn_resetCore then noclipBtn_resetCore.Text = getText("button_noclip", isNoclip, "", "") end; if noclipConnection and noclipConnection.Connected then noclipConnection:Disconnect(); noclipConnection=nil end; if character then for _, p in pairs(character:GetDescendants()) do if p:IsA("BasePart") then pcall(function() p.CanCollide=true end) end end end; noclipParts={} end 
        if infiniteJumpEnabled then toggleInfiniteJump_Original() end; if walkOnAirEnabled then toggleWalkOnAir_Original() end; if platformStandEnabled then togglePlatformStand_Original() end; if spinPlayerEnabled then toggleSpinPlayer_Original() end; if headlessEnabled then toggleHeadless_Original() end; if freezeCamEnabled then toggleFreezeCam_Original() end; if ragdollEnabled then toggleRagdoll_Original() end; if floatUpEnabled then toggleFloatUp_Original() end; if upsideDownEnabled then toggleUpsideDown_Original() end; if noFaceEnabled then toggleNoFace_Original() end; if forceFieldEnabled then toggleForceField_Original() end; if walkOnWaterEnabled then toggleWalkOnWater_Original() end; if instantRespawnEnabled then toggleInstantRespawn_Original() end; if godModeEnabled then toggleGodMode_Original() end; if infiniteStaminaEnabled then toggleInfiniteStamina_Original() end; if phaseEnabled then togglePhase_Original() end; if fullBrightEnabled then toggleFullBright_Original() end; if removeFogEnabled then toggleRemoveFog_Original() end; if antiAfkEnabled then toggleAntiAfk_Original() end; if crosshairEnabled then toggleCrosshair_Original() end; if chatSpamEnabled then toggleChatSpam_Original() end
        if spiderEnabled then toggleSpider_Original() end
        if jesusFlyEnabled then toggleJesusFly_Original() end
        if tracersEnabled then toggleTracers_Original() end
        if noArmsEnabled then toggleNoArms_Original() end
        if noLegsEnabled then toggleNoLegs_Original() end
        if rainbowCharEnabled then toggleRainbowChar_Original() end
        if wallWalkEnabled then toggleWallWalk_Original() end
        if teleportToolEnabled then toggleTeleportTool_Original() end
        if lowGravityEnabled then toggleLowGravity_Original() end
        if bhopEnabled then toggleBunnyHop_Original() end
        if autoClickerEnabled then toggleAutoClicker_Original() end
        if antiVoidEnabled then toggleAntiVoid_Original() end
        if removeFogV2Enabled then toggleRemoveFogV2_Original() end
        if autoRespawnEnabled then toggleAutoRespawn_Original() end
        if cartoonOutlineEnabled then toggleCartoonOutline_Original() end
        if invertColorsEnabled then toggleInvertColors_Original() end
        if bloomEnabled then toggleBloom_Original() end
        if depthOfFieldEnabled then toggleDepthOfField_Original() end
        if sunRaysEnabled then toggleSunRays_Original() end
        if blurEnabled then toggleBlur_Original() end
        if neonWorldEnabled then toggleNeonWorld_Original() end
        if coloredFogEnabled then toggleColoredFog_Original() end
        walkSpeedMultiplier = 1; jumpPowerMultiplier = 1 
        characterScaleValue = 1 
        settings_tbl.Chams_Style = 1; CycleChamsStyle_Original(true) 
        settings_tbl.ESP_BoxStyle = "Box"; ApplyESPBoxStyle_Original("Box") 
        settings_tbl.ESP_BoxSize = 1; ApplyESPBoxSizeSlider(1) 
        shadowQuality = 3; ApplyShadowQuality_Original(3) 
    else
        ShowNotification("notif_states_persist_core")
        if isFlying then root_persistCore = character and character:FindFirstChild("HumanoidRootPart"); if root_persistCore then bv_persistCore=root_persistCore:FindFirstChild("FlyVelocity"); if bv_persistCore then bv_persistCore:Destroy() end; bg_persistCore=root_persistCore:FindFirstChild("FlyGyro"); if bg_persistCore then bg_persistCore:Destroy() end end; task.wait(0.1); if player.Character then toggleFly(); toggleFly() else isFlying=false; flyBtn_persistCore=MainFrame and MainFrame:FindFirstChild("FlyButton",true); if flyBtn_persistCore then flyBtn_persistCore.Text = getText("button_fly", isFlying, "", "") end end end 
        if isNoclip then toggleNoclip(); task.wait(0.05); if player.Character then toggleNoclip() else isNoclip=false; noclipBtn_persistCore=MainFrame and MainFrame:FindFirstChild("NoclipButton",true); if noclipBtn_persistCore then noclipBtn_persistCore.Text = getText("button_noclip", isNoclip, "", "") end end end 
        if godModeEnabled then toggleGodMode_Original(); task.wait(0.05); toggleGodMode_Original() end; if infiniteStaminaEnabled then toggleInfiniteStamina_Original(); task.wait(0.05); toggleInfiniteStamina_Original() end; if phaseEnabled then togglePhase_Original(); task.wait(0.05); togglePhase_Original() end; if antiAfkEnabled then toggleAntiAfk_Original(); task.wait(0.05); toggleAntiAfk_Original() end; if chatSpamEnabled then toggleChatSpam_Original(); task.wait(0.05); toggleChatSpam_Original() end
        if spiderEnabled then toggleSpider_Original(); task.wait(0.05); toggleSpider_Original() end
        if jesusFlyEnabled then toggleJesusFly_Original(); task.wait(0.05); toggleJesusFly_Original() end
        if tracersEnabled then toggleTracers_Original(); task.wait(0.05); toggleTracers_Original() end
        if noArmsEnabled then toggleNoArms_Original(); task.wait(0.05); toggleNoArms_Original() end
        if noLegsEnabled then toggleNoLegs_Original(); task.wait(0.05); toggleNoLegs_Original() end
        if rainbowCharEnabled then toggleRainbowChar_Original(); task.wait(0.05); toggleRainbowChar_Original() end
        if walkOnAirEnabled then toggleWalkOnAir_Original(); task.wait(0.05); toggleWalkOnAir_Original() end 
        if platformStandEnabled then togglePlatformStand_Original(); task.wait(0.05); togglePlatformStand_Original() end 
        if spinPlayerEnabled then toggleSpinPlayer_Original(); task.wait(0.05); toggleSpinPlayer_Original() end 
        if headlessEnabled then toggleHeadless_Original(); task.wait(0.05); toggleHeadless_Original() end 
        if freezeCamEnabled then toggleFreezeCam_Original(); task.wait(0.05); toggleFreezeCam_Original() end 
        if ragdollEnabled then toggleRagdoll_Original(); task.wait(0.05); toggleRagdoll_Original() end 
        if floatUpEnabled then toggleFloatUp_Original(); task.wait(0.05); toggleFloatUp_Original() end 
        if upsideDownEnabled then toggleUpsideDown_Original(); task.wait(0.05); toggleUpsideDown_Original() end 
        if noFaceEnabled then toggleNoFace_Original(); task.wait(0.05); toggleNoFace_Original() end 
        if forceFieldEnabled then toggleForceField_Original(); task.wait(0.05); toggleForceField_Original() end 
        if wallWalkEnabled then toggleWallWalk_Original(); task.wait(0.05); toggleWallWalk_Original() end 
        if teleportToolEnabled then toggleTeleportTool_Original(); task.wait(0.05); toggleTeleportTool_Original() end 
        if lowGravityEnabled then toggleLowGravity_Original(); task.wait(0.05); toggleLowGravity_Original() end 
        if bhopEnabled then toggleBunnyHop_Original(); task.wait(0.05); toggleBunnyHop_Original() end 
        if autoClickerEnabled then toggleAutoClicker_Original(); task.wait(0.05); toggleAutoClicker_Original() end 
        if antiVoidEnabled then toggleAntiVoid_Original(); task.wait(0.05); toggleAntiVoid_Original() end 
        if removeFogV2Enabled then toggleRemoveFogV2_Original(); task.wait(0.05); toggleRemoveFogV2_Original() end 
        if autoRespawnEnabled then toggleAutoRespawn_Original(); task.wait(0.05); toggleAutoRespawn_Original() end 
        if cartoonOutlineEnabled then toggleCartoonOutline_Original(); task.wait(0.05); toggleCartoonOutline_Original() end 
        if invertColorsEnabled then toggleInvertColors_Original(); task.wait(0.05); toggleInvertColors_Original() end 
        if bloomEnabled then toggleBloom_Original(); task.wait(0.05); toggleBloom_Original() end 
        if depthOfFieldEnabled then toggleDepthOfField_Original(); task.wait(0.05); toggleDepthOfField_Original() end 
        if sunRaysEnabled then toggleSunRays_Original(); task.wait(0.05); toggleSunRays_Original() end 
        if blurEnabled then toggleBlur_Original(); task.wait(0.05); toggleBlur_Original() end 
        if neonWorldEnabled then toggleNeonWorld_Original(); task.wait(0.05); toggleNeonWorld_Original() end 
        if coloredFogEnabled then toggleColoredFog_Original(); task.wait(0.05); toggleColoredFog_Original() end 
    end
    task.wait(0.1); applyCheatValues(character)
end

resetStatesOnSpawn = function(character)
    -- On crée une "liste de courses" pour se souvenir des cheats actifs.
    local persistedCheatStates = {}

    -- ÉTAPE 1 : Si "Reset on Death" est sur OFF, on note tout ce qui était activé.
    if not resetCheatsOnDeathEnabled then
        ShowNotification("States will be reapplied...") -- Petite notif pour toi ;)
        persistedCheatStates = {
            -- Cheats principaux
            Fly = isFlying,
            Noclip = isNoclip,
            InfiniteJump = infiniteJumpEnabled,
            WalkOnWater = walkOnWaterEnabled,
            InstantRespawn = instantRespawnEnabled,
            GodMode = godModeEnabled,
            InfiniteStamina = infiniteStaminaEnabled,
            Phase = phaseEnabled,
            AntiVoid = antiVoidEnabled,
            RemoveFog = removeFogEnabled,
            RemoveFogV2 = removeFogV2Enabled,
            Spider = spiderEnabled,
            JesusFly = jesusFlyEnabled,
            WallWalk = wallWalkEnabled,
            LowGravity = lowGravityEnabled,
            BunnyHop = bhopEnabled,
            RainbowChar = rainbowCharEnabled,
            SpinPlayer = spinPlayerEnabled,
            Headless = headlessEnabled,
            FreezeCam = freezeCamEnabled,
            Ragdoll = ragdollEnabled,
            FloatUp = floatUpEnabled,
            UpsideDown = upsideDownEnabled,
            NoFace = noFaceEnabled,
            ForceField = forceFieldEnabled,
            FullBright = fullBrightEnabled,
            CartoonOutline = cartoonOutlineEnabled,
            InvertColors = invertColorsEnabled,
            Bloom = bloomEnabled,
            DepthOfField = depthOfFieldEnabled,
            SunRays = sunRaysEnabled,
            Blur = blurEnabled,
            NeonWorld = neonWorldEnabled,
            ColoredFog = coloredFogEnabled,

            -- Cheats FlingTools & Misc
            ESP = espScriptEnabled,
            Aimbot = aimbotEnabled,
            Track = aimbotActive,
            Spectate = isSpectating,
            Freeze = isFrozen,
            Car = carToggleActivated,
            KillBrick = not killBrickNega,
            NoclipSimple = not noclipClipon,
            Invisible = invis_on,
            ShiftLock = (ShiftLockActive and ShiftLockActive.Connected),
            Rotate = rotating,
            SpamTP = isToggleActive,
            TpAll = teleportAllEnabled,
            TpToMouse = tpToMouseEnabled,
            Orbit = orbitEnabled,
            Attach = attachEnabled,
            AntiAFK = antiAfkEnabled,
            Crosshair = crosshairEnabled,
            AutoClicker = autoClickerEnabled,
            AutoRespawn = autoRespawnEnabled,
            WalkOnAir = walkOnAirEnabled,
            PlatformStand = platformStandEnabled
        }
    end

    -- ÉTAPE 2 : On lance la réinitialisation normale, qui va tout désactiver.
    ShowNotification("notif_states_resetting")
    resetStatesOnSpawn_FlingTools(character)
    resetStatesOnSpawn_Core(character)
    
    -- ÉTAPE 3 : APRÈS la réinitialisation, si on avait noté des cheats, on les réactive !
    if not resetCheatsOnDeathEnabled then
        task.wait(0.2) -- On attend un micro-instant pour que le personnage soit bien prêt.
        
        -- On réactive tout ce qui était sur notre "liste".
        if persistedCheatStates.ESP then toggleESP_Original() end
        if persistedCheatStates.Aimbot then toggleAimbotCamera_Original() end
        if persistedCheatStates.Track then toggleAimbotTrack_Original() end
        if persistedCheatStates.GodMode then toggleGodMode_Original() end
        if persistedCheatStates.InfiniteStamina then toggleInfiniteStamina_Original() end
        if persistedCheatStates.Phase then togglePhase_Original() end
        if persistedCheatStates.Spider then toggleSpider_Original() end
        if persistedCheatStates.JesusFly then toggleJesusFly_Original() end
        if persistedCheatStates.RainbowChar then toggleRainbowChar_Original() end
        if persistedCheatStates.WallWalk then toggleWallWalk_Original() end
        if persistedCheatStates.LowGravity then toggleLowGravity_Original() end
        if persistedCheatStates.BunnyHop then toggleBunnyHop_Original() end
        if persistedCheatStates.AntiVoid then toggleAntiVoid_Original() end
        if persistedCheatStates.SpinPlayer then toggleSpinPlayer_Original() end
        if persistedCheatStates.Headless then toggleHeadless_Original() end
        if persistedCheatStates.FreezeCam then toggleFreezeCam_Original() end
        if persistedCheatStates.Ragdoll then toggleRagdoll_Original() end
        if persistedCheatStates.FloatUp then toggleFloatUp_Original() end
        if persistedCheatStates.UpsideDown then toggleUpsideDown_Original() end
        if persistedCheatStates.NoFace then toggleNoFace_Original() end
        if persistedCheatStates.ForceField then toggleForceField_Original() end
        if persistedCheatStates.FullBright then toggleFullBright_Original() end
        if persistedCheatStates.CartoonOutline then toggleCartoonOutline_Original() end
        if persistedCheatStates.InvertColors then toggleInvertColors_Original() end
        if persistedCheatStates.Bloom then toggleBloom_Original() end
        if persistedCheatStates.DepthOfField then toggleDepthOfField_Original() end
        if persistedCheatStates.SunRays then toggleSunRays_Original() end
        if persistedCheatStates.Blur then toggleBlur_Original() end
        if persistedCheatStates.NeonWorld then toggleNeonWorld_Original() end
        if persistedCheatStates.ColoredFog then toggleColoredFog_Original() end
        if persistedCheatStates.AntiAFK then toggleAntiAfk_Original() end
        if persistedCheatStates.Crosshair then toggleCrosshair_Original() end
        if persistedCheatStates.AutoClicker then toggleAutoClicker_Original() end
        if persistedCheatStates.AutoRespawn then toggleAutoRespawn_Original() end
        if persistedCheatStates.WalkOnAir then toggleWalkOnAir_Original() end
        if persistedCheatStates.PlatformStand then togglePlatformStand_Original() end
        if persistedCheatStates.ShiftLock then toggleShiftLock_Original() end
        if persistedCheatStates.Spectate then toggleSpectate_Original() end
        if persistedCheatStates.Invisible then toggleInvisible_Original() end
        if persistedCheatStates.Freeze then toggleFreeze_Original() end

        -- On attend un peu avant de réactiver ceux-ci pour être sûr que le personnage a bien bougé.
        task.wait(0.1)
        if persistedCheatStates.Fly then toggleFly() end
        if persistedCheatStates.Noclip then toggleNoclip() end
    end

    ShowNotification("notif_states_reset_complete")
end




do 
    success_HttpService, err_HttpService = pcall(function() HttpService = game:GetService("HttpService") end) 
    if not success_HttpService then warn("HttpService failed to load:", err_HttpService, "- Clipboard/Webhook/ServerHop functions might be limited.") end

    CreerFramePrincipale()
    CreerBoutonsMinimisation()
end

do 
    CreerPageAccueil()
    CreerPageCheats()
    CreerPageFlingTools()
    CreerPageChatSpy()
    CreerPageExecutor()
    CreerPageConsole()
    CreerPageClavier()
    CreerPageSettings()
    CreerPageMisc()
    CreerPageMiscFeatures()
    CreerPageVersionHistory()
    CreerPageGraphics()
    CreerPageChatBypass()
    CreerPageHttpSpy()
end



do 
    for i, v in pairs(plrs:GetPlayers()) do if v ~= lp then others[v] = true end end
    plrs.PlayerAdded:Connect(function(plr) others[plr] = true; task.wait(0.1); updatePlayerList() end)
    plrs.PlayerRemoving:Connect(function(plr)
        others[plr] = nil
        task.wait(0.1)
        updatePlayerList()
        if plr == target then
            target = nil
            if FlingToolsPlayerInfoLabel then FlingToolsPlayerInfoLabel.Text = "" end
            if FlingToolsDebugLabel then FlingToolsDebugLabel.Text = getText("label_target_info") end
            if FlingToolsBringButton and not bringing then
                 FlingToolsBringButton.BackgroundColor3 = currentButtonColor
                 FlingToolsBringButton.TextColor3 = currentTextColor
            end
             if FlingToolsBringButton and bringing then
                  bringing = false
                  FlingToolsBringButton.Text = getText("button_bring")
                  FlingToolsBringButton.BackgroundColor3 = currentButtonColor
                  FlingToolsBringButton.TextColor3 = currentTextColor
             end
            if lift_loopThread and lift_scriptDisabled == false then lift_scriptDisabled = true; ShowNotification("notif_playerlift_target_left") end
            if orbitEnabled and orbitTarget == plr then toggleOrbit_Original() end
            if attachEnabled and attachTarget == plr then toggleAttach_Original() end
        end
        if plr == targetPlayer then if isSpectating then toggleSpectate_Original() end; if rotating then toggleRotatePlayer_Original() end end
        if plr == spamTpTargetPlayer and isToggleActive then toggleSpamTp_Original() end
        tracerName_PlayerRemoving = "Tracer_" .. plr.UserId 
        if tracersTable[tracerName_PlayerRemoving] then
            if tracersTable[tracerName_PlayerRemoving].Parent then tracersTable[tracerName_PlayerRemoving]:Destroy() end
            tracersTable[tracerName_PlayerRemoving] = nil
        end
    end)

    for _, playerInstance_ChatSpyInit in ipairs(Players:GetPlayers()) do 
        if playerInstance_ChatSpyInit ~= lp then
            oldConnection_ChatSpyInit = playerInstance_ChatSpyInit:FindFirstChild("ChatSpyChattedConnection") 
            if not oldConnection_ChatSpyInit then
                conn_ChatSpyInit = playerInstance_ChatSpyInit.Chatted:Connect(function(msg) onChatSpyPlayerChatted(playerInstance_ChatSpyInit, msg) end) 
                tag_ChatSpyInit = Instance.new("BoolValue", playerInstance_ChatSpyInit); tag_ChatSpyInit.Name = "ChatSpyChattedConnection"; tag_ChatSpyInit.Value = true 
            end
        end
    end
    Players.PlayerAdded:Connect(function(playerInstance_ChatSpyAdded) 
        if playerInstance_ChatSpyAdded ~= lp then
            oldConnection_ChatSpyAdded = playerInstance_ChatSpyAdded:FindFirstChild("ChatSpyChattedConnection") 
            if oldConnection_ChatSpyAdded then oldConnection_ChatSpyAdded:Destroy() end 

            conn_ChatSpyAdded = playerInstance_ChatSpyAdded.Chatted:Connect(function(msg) onChatSpyPlayerChatted(playerInstance_ChatSpyAdded, msg) end) 
            tag_ChatSpyAdded = Instance.new("BoolValue", playerInstance_ChatSpyAdded); tag_ChatSpyAdded.Name = "ChatSpyChattedConnection"; tag_ChatSpyAdded.Value = true 
        end
    end)
    Players.PlayerRemoving:Connect(function(playerInstance_ChatSpyRemoving) 
        oldConnection_ChatSpyRemoving = playerInstance_ChatSpyRemoving:FindFirstChild("ChatSpyChattedConnection") 
        if oldConnection_ChatSpyRemoving then oldConnection_ChatSpyRemoving:Destroy() end
    end)

end 



do 
    ongletDefinitions_Tabs = { 
        {Name="Home"}, {Name="Cheats"}, {Name="FlingTools"}, {Name="ChatSpy"}, {Name="Executor"}, {Name="Graphics"}, {Name="Misc"}, {Name="MiscFeatures"}, {Name="Console"}, {Name="Keyboard"}, {Name="Settings"}, {Name="VersionHistory"}, {Name="ChatBypass"}, {Name="HttpSpy"}
    }
    CreerBoutonsOnglets(ongletDefinitions_Tabs)

    mobileBtn_ModeSel, pcBtn_ModeSel = CreerFenetreSelection() 
    if mobileBtn_ModeSel and pcBtn_ModeSel then
        mobileBtn_ModeSel.MouseButton1Click:Connect(function() setGuiSize("Mobile") end)
        pcBtn_ModeSel.MouseButton1Click:Connect(function() setGuiSize("PC") end)
    else
        warn("Failed to create Mobile/PC selection buttons. GUI size cannot be changed.")
        setGuiSize("PC") 
    end
end

do 
    MinimizeButton.MouseButton1Click:Connect(function()
        if not isMinimized then isMinimized=true; TabBar.Visible=false; ContentFrame.Visible=false; TitleLabel.Visible=false; MinimizeButton.Visible=false; tPos_Minimize=UDim2.new(MainFrame.Position.X.Scale,MainFrame.Position.X.Offset+(MainFrame.Size.X.Offset-60)/2,MainFrame.Position.Y.Scale,MainFrame.Position.Y.Offset+(MainFrame.Size.Y.Offset-60)/2); tw_Minimize=TweenService:Create(MainFrame,tweenInfo,{Size=UDim2.new(0,60,0,60),Position=tPos_Minimize}); if tw_Minimize then tw_Minimize:Play() else warn("Failed to create minimize tween") end; tw_Minimize.Completed:Wait(); MainFrame.Visible=false; MinimizedButton.Position=MainFrame.Position; MinimizedButton.Visible=true; ShowNotification("notif_gui_minimized") end 
    end)

    Hitbox.InputBegan:Connect(function(i) if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then minimizedDrag_mD, minimizedDrag_hM = true, false; Hitbox.Size=UDim2.new(0,180,0,180); Hitbox.Position=UDim2.new(0,-60,0,-60); iP_Hitbox,bP_Hitbox=i.Position,MinimizedButton.AbsolutePosition; minimizedDrag_dOX, minimizedDrag_dOY =iP_Hitbox.X-bP_Hitbox.X,iP_Hitbox.Y-bP_Hitbox.Y; MinimizedButton.BackgroundTransparency=0.3 end end) 
    Hitbox.InputChanged:Connect(function(i) if minimizedDrag_mD and(i.UserInputType==Enum.UserInputType.MouseMovement or i.UserInputType==Enum.UserInputType.Touch) then minimizedDrag_hM=true; mX_Hitbox,mY_Hitbox=i.Position.X,i.Position.Y; MinimizedButton.Position=UDim2.new(0,mX_Hitbox - minimizedDrag_dOX, 0, mY_Hitbox - minimizedDrag_dOY) end end) 
    Hitbox.InputEnded:Connect(function(i) 
    if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then 
        if minimizedDrag_mD then 
            minimizedDrag_mD=false; 
            Hitbox.Size=UDim2.new(0,60,0,60); 
            Hitbox.Position=UDim2.new(0,0,0,0); 
            MinimizedButton.BackgroundTransparency=0; 
            if not minimizedDrag_hM and isMinimized then 
                MinimizedButton.Visible=false; 
                MainFrame.Visible=true; 
                TitleLabel.Visible=true; 
                MinimizeButton.Visible=true;

                -- LA MAGIE OPÈRE ICI --
                -- On calcule la nouvelle position de la grande fenêtre en se basant sur le centre du petit cube
                local cubeCenterPosX = MinimizedButton.Position.X.Offset + (MinimizedButton.AbsoluteSize.X / 2)
                local cubeCenterPosY = MinimizedButton.Position.Y.Offset + (MinimizedButton.AbsoluteSize.Y / 2)
                
                -- On positionne le coin supérieur gauche de la grande fenêtre pour que son centre corresponde au centre du cube
                local newMaximizedPosX = cubeCenterPosX - (currentSize.X.Offset / 2)
                local newMaximizedPosY = cubeCenterPosY - (currentSize.Y.Offset / 2)
                
                local newMaximizedPosition = UDim2.new(0, newMaximizedPosX, 0, newMaximizedPosY)
                
                -- On met à jour la variable globale pour qu'elle s'en souvienne la prochaine fois
                currentPosition = newMaximizedPosition
                
                -- On lance l'animation vers la NOUVELLE position calculée
                local tw_Maximize=TweenService:Create(MainFrame,tweenInfo,{Size=currentSize,Position=newMaximizedPosition}); 
                -- FIN DE LA MAGIE --

                if tw_Maximize then tw_Maximize:Play() else warn("Failed to create maximize tween") end; 
                tw_Maximize.Completed:Wait(); 
                TabBar.Visible=true; 
                ContentFrame.Visible=true; 
                isMinimized=false; 
                ShowNotification("notif_gui_maximized") 
            end 
        end 
    end 
end)

    do drag_MainFrame=false;dS_MainFrame=nil;sP_MainFrame=nil; 
        TitleBar.InputBegan:Connect(function(i) if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then if canDragMainFrame and not (_G["draggingSlider_" .. (sliderBeingDragged and sliderBeingDragged.Name or "nil")] or (sliderBeingDragged and sliderBeingDragged:IsA("Frame") and _G["draggingSlider_"..sliderBeingDragged.Name])) then drag_MainFrame,dS_MainFrame,sP_MainFrame=true,i.Position,MainFrame.Position; pcall(function() MainFrame.BackgroundTransparency+=0.1 end) end end end); 
        TitleBar.InputChanged:Connect(function(i) if drag_MainFrame and canDragMainFrame and not (_G["draggingSlider_" .. (sliderBeingDragged and sliderBeingDragged.Name or "nil")] or (sliderBeingDragged and sliderBeingDragged:IsA("Frame") and _G["draggingSlider_"..sliderBeingDragged.Name])) and(i.UserInputType==Enum.UserInputType.MouseMovement or i.UserInputType==Enum.UserInputType.Touch) then delta_MainFrame=i.Position-dS_MainFrame; MainFrame.Position=UDim2.new(sP_MainFrame.X.Scale,sP_MainFrame.X.Offset+delta_MainFrame.X,sP_MainFrame.Y.Scale,sP_MainFrame.Y.Offset+delta_MainFrame.Y); currentPosition=MainFrame.Position end end); 
        TitleBar.InputEnded:Connect(function(i) if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then if drag_MainFrame then drag_MainFrame=false; pcall(function() MainFrame.BackgroundTransparency-=0.1 end) end end end)
    end
end

do 
    resetStatesOnSpawn_FlingTools(nil) 
    if player.Character then resetStatesOnSpawn_Core(player.Character) end

    player.CharacterAdded:Connect(resetStatesOnSpawn)

    UserInputService.InputBegan:Connect(function(i,gp)
        if gp then return end;
        focused_Final = UserInputService:GetFocusedTextBox(); if focused_Final and (focused_Final == scriptExecutorInput or focused_Final == skyboxInput or focused_Final:FindFirstAncestor(".KeyboardPage") or focused_Final:FindFirstAncestor("ChatSpamInput") or focused_Final == FlingToolsPlayerInputBox or focused_Final == userIdInput or focused_Final == webhookUrlInput or focused_Final == webhookMessageInput) then return end 
        if i.KeyCode==Enum.KeyCode.F4 then guiVisible=not guiVisible; ScreenGui.Enabled=guiVisible; ShowNotification(guiVisible and "notif_gui_enabled" or "notif_gui_disabled") end
    end)
    player.Chatted:Connect(function(m) if not slower then warn("Chatted: 'slower' unavailable!"); return end; if slower(m)=="!rt" and ScreenGui.Enabled then CenterGUI() end end)

    task.wait(0.1) 
    if typeof(cached_Color3_fromRGB) == "function" and typeof(THEME_C3_BlackBtn) == "Color3" then
        applyColorTheme(THEME_C3_Black, THEME_C3_BlackMid, THEME_C3_BlackEnd, THEME_C3_BlackBtn, THEME_C3_BlackNeon, THEME_C3_BlackText, THEME_C3_BlackSlider, THEME_C3_BlackPlaceholder)
    else
        warn("Cannot apply initial theme: cached_Color3_fromRGB or Global Theme Vars are nil!")
        if typeof(THEME_C3_BlackBtn) == "Color3" then applyColorTheme(THEME_C3_Black, THEME_C3_BlackMid, THEME_C3_BlackEnd, THEME_C3_BlackBtn, THEME_C3_BlackNeon, THEME_C3_BlackText, THEME_C3_BlackSlider, THEME_C3_BlackPlaceholder) end
    end
    switchTab("Home") 

    if target and target.Parent then if FlingToolsPlayerInfoLabel then if (target.DisplayName) and (target.DisplayName ~= "") and (target.DisplayName ~= target.Name) then FlingToolsPlayerInfoLabel.Text = target.DisplayName .. " @" .. target.Name else FlingToolsPlayerInfoLabel.Text = "@" .. target.Name end end; if FlingToolsDebugLabel then FlingToolsDebugLabel.Text = "Display: " .. target.DisplayName .. " | User: " .. target.Name end end

    refreshAllUITextLanguage()

    print("DMX GUI Prime v10.0.0 loaded successfully!") 
    ShowNotification("notif_loaded")

end 

--- END OF MODIFIED rFIgLE (GLOBALS_SLIDER_LOCALS_FIX) ---
